
lr3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005488  08005488  00015488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200000a8  08005730  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08005730  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a509  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f4  00000000  00000000  0002a5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205da  00000000  00000000  0002cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009de8  00000000  00000000  0004d3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6788  00000000  00000000  000571a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d92a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002594  00000000  00000000  0011d980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800546c 	.word	0x0800546c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800546c 	.word	0x0800546c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96e 	b.w	8000f0c <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468c      	mov	ip, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8083 	bne.w	8000d5e <__udivmoddi4+0x116>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d947      	bls.n	8000cee <__udivmoddi4+0xa6>
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	b142      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	f1c2 0020 	rsb	r0, r2, #32
 8000c68:	fa24 f000 	lsr.w	r0, r4, r0
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4097      	lsls	r7, r2
 8000c70:	ea40 0c01 	orr.w	ip, r0, r1
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c80:	fa1f fe87 	uxth.w	lr, r7
 8000c84:	fb08 c116 	mls	r1, r8, r6, ip
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x60>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9a:	f080 8119 	bcs.w	8000ed0 <__udivmoddi4+0x288>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 8116 	bls.w	8000ed0 <__udivmoddi4+0x288>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x8c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	f080 8105 	bcs.w	8000ed4 <__udivmoddi4+0x28c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8102 	bls.w	8000ed4 <__udivmoddi4+0x28c>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd8:	eba4 040e 	sub.w	r4, r4, lr
 8000cdc:	2600      	movs	r6, #0
 8000cde:	b11d      	cbz	r5, 8000ce8 <__udivmoddi4+0xa0>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xaa>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d150      	bne.n	8000d9c <__udivmoddi4+0x154>
 8000cfa:	1bcb      	subs	r3, r1, r7
 8000cfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	2601      	movs	r6, #1
 8000d06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0a:	0c21      	lsrs	r1, r4, #16
 8000d0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d14:	fb08 f30c 	mul.w	r3, r8, ip
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000d1c:	1879      	adds	r1, r7, r1
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0xe2>
 8000d24:	428b      	cmp	r3, r1
 8000d26:	f200 80e9 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1ac9      	subs	r1, r1, r3
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x10c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x10a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80d9 	bhi.w	8000f04 <__udivmoddi4+0x2bc>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e7bf      	b.n	8000cde <__udivmoddi4+0x96>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x12e>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80b1 	beq.w	8000eca <__udivmoddi4+0x282>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x1cc>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0x140>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80b8 	bhi.w	8000ef8 <__udivmoddi4+0x2b0>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	468c      	mov	ip, r1
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0a8      	beq.n	8000ce8 <__udivmoddi4+0xa0>
 8000d96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000d9c:	f1c2 0320 	rsb	r3, r2, #32
 8000da0:	fa20 f603 	lsr.w	r6, r0, r3
 8000da4:	4097      	lsls	r7, r2
 8000da6:	fa01 f002 	lsl.w	r0, r1, r2
 8000daa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dae:	40d9      	lsrs	r1, r3
 8000db0:	4330      	orrs	r0, r6
 8000db2:	0c03      	lsrs	r3, r0, #16
 8000db4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db8:	fa1f f887 	uxth.w	r8, r7
 8000dbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb06 f108 	mul.w	r1, r6, r8
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	fa04 f402 	lsl.w	r4, r4, r2
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x19c>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dd6:	f080 808d 	bcs.w	8000ef4 <__udivmoddi4+0x2ac>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 808a 	bls.w	8000ef4 <__udivmoddi4+0x2ac>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b281      	uxth	r1, r0
 8000de8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb00 f308 	mul.w	r3, r0, r8
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x1c4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e02:	d273      	bcs.n	8000eec <__udivmoddi4+0x2a4>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d971      	bls.n	8000eec <__udivmoddi4+0x2a4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4439      	add	r1, r7
 8000e0c:	1acb      	subs	r3, r1, r3
 8000e0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e12:	e778      	b.n	8000d06 <__udivmoddi4+0xbe>
 8000e14:	f1c6 0c20 	rsb	ip, r6, #32
 8000e18:	fa03 f406 	lsl.w	r4, r3, r6
 8000e1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e20:	431c      	orrs	r4, r3
 8000e22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e32:	431f      	orrs	r7, r3
 8000e34:	0c3b      	lsrs	r3, r7, #16
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fa1f f884 	uxth.w	r8, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e46:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4a:	458a      	cmp	sl, r1
 8000e4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e50:	fa00 f306 	lsl.w	r3, r0, r6
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x220>
 8000e56:	1861      	adds	r1, r4, r1
 8000e58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e5c:	d248      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	d946      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4421      	add	r1, r4
 8000e68:	eba1 010a 	sub.w	r1, r1, sl
 8000e6c:	b2bf      	uxth	r7, r7
 8000e6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7a:	fb00 f808 	mul.w	r8, r0, r8
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x24a>
 8000e82:	19e7      	adds	r7, r4, r7
 8000e84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e88:	d22e      	bcs.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8a:	45b8      	cmp	r8, r7
 8000e8c:	d92c      	bls.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4427      	add	r7, r4
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	eba7 0708 	sub.w	r7, r7, r8
 8000e9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9e:	454f      	cmp	r7, r9
 8000ea0:	46c6      	mov	lr, r8
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	d31a      	bcc.n	8000edc <__udivmoddi4+0x294>
 8000ea6:	d017      	beq.n	8000ed8 <__udivmoddi4+0x290>
 8000ea8:	b15d      	cbz	r5, 8000ec2 <__udivmoddi4+0x27a>
 8000eaa:	ebb3 020e 	subs.w	r2, r3, lr
 8000eae:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eb6:	40f2      	lsrs	r2, r6
 8000eb8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ebc:	40f7      	lsrs	r7, r6
 8000ebe:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e70b      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0x60>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6fd      	b.n	8000cd4 <__udivmoddi4+0x8c>
 8000ed8:	4543      	cmp	r3, r8
 8000eda:	d2e5      	bcs.n	8000ea8 <__udivmoddi4+0x260>
 8000edc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7df      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e7d2      	b.n	8000e92 <__udivmoddi4+0x24a>
 8000eec:	4660      	mov	r0, ip
 8000eee:	e78d      	b.n	8000e0c <__udivmoddi4+0x1c4>
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	e7b9      	b.n	8000e68 <__udivmoddi4+0x220>
 8000ef4:	4666      	mov	r6, ip
 8000ef6:	e775      	b.n	8000de4 <__udivmoddi4+0x19c>
 8000ef8:	4630      	mov	r0, r6
 8000efa:	e74a      	b.n	8000d92 <__udivmoddi4+0x14a>
 8000efc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f00:	4439      	add	r1, r7
 8000f02:	e713      	b.n	8000d2c <__udivmoddi4+0xe4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	443c      	add	r4, r7
 8000f08:	e724      	b.n	8000d54 <__udivmoddi4+0x10c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <turn_off_LED>:
		{1,2,3,4,5,6,7,-1},
		{1,2,3,4,6,7,-1}
};


void turn_off_LED(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	for (int i = 0; i<4; i++){
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	e00e      	b.n	8000f3a <turn_off_LED+0x2a>
			HAL_GPIO_WritePin(section_port[i], section_pins[i], GPIO_PIN_SET);
 8000f1c:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <turn_off_LED+0x64>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <turn_off_LED+0x68>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f000 ffb2 	bl	8001e98 <HAL_GPIO_WritePin>
	for (int i = 0; i<4; i++){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	dded      	ble.n	8000f1c <turn_off_LED+0xc>
		}

	for (int i = 1; i<10; i++){
 8000f40:	2301      	movs	r3, #1
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	e00e      	b.n	8000f64 <turn_off_LED+0x54>
		HAL_GPIO_WritePin(segments_port[i], segments_pins[i], GPIO_PIN_SET);
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <turn_off_LED+0x6c>)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <turn_off_LED+0x70>)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f000 ff9d 	bl	8001e98 <HAL_GPIO_WritePin>
	for (int i = 1; i<10; i++){
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b09      	cmp	r3, #9
 8000f68:	dded      	ble.n	8000f46 <turn_off_LED+0x36>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000024 	.word	0x20000024
 8000f78:	080054a4 	.word	0x080054a4
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	08005490 	.word	0x08005490
 8000f84:	00000000 	.word	0x00000000

08000f88 <set_digit>:

int set_digit(int number){
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	turn_off_LED();
 8000f90:	f7ff ffbe 	bl	8000f10 <turn_off_LED>
	if (number < -999) number = -999;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000f9a:	dc01      	bgt.n	8000fa0 <set_digit+0x18>
 8000f9c:	4b60      	ldr	r3, [pc, #384]	; (8001120 <set_digit+0x198>)
 8000f9e:	607b      	str	r3, [r7, #4]
	if (number > 9999) number = 9999;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dd02      	ble.n	8000fb0 <set_digit+0x28>
 8000faa:	f242 730f 	movw	r3, #9999	; 0x270f
 8000fae:	607b      	str	r3, [r7, #4]

	int discharge = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
	if (number != 0){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d014      	beq.n	8000fe4 <set_digit+0x5c>
		discharge = log10(abs(number));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bfb8      	it	lt
 8000fc0:	425b      	neglt	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fac6 	bl	8000554 <__aeabi_i2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	ec43 2b10 	vmov	d0, r2, r3
 8000fd0:	f003 f806 	bl	8003fe0 <log10>
 8000fd4:	ec53 2b10 	vmov	r2, r3, d0
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fdd4 	bl	8000b88 <__aeabi_d2iz>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	617b      	str	r3, [r7, #20]
	}

	for (int section = 0; section<discharge+1; section++){
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	e06d      	b.n	80010c6 <set_digit+0x13e>
		turn_off_LED();
 8000fea:	f7ff ff91 	bl	8000f10 <turn_off_LED>
		HAL_GPIO_WritePin(section_port[section], section_pins[section], GPIO_PIN_RESET);
 8000fee:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <set_digit+0x19c>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ff6:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <set_digit+0x1a0>)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	f000 ff49 	bl	8001e98 <HAL_GPIO_WritePin>

		int num = abs(number % (int)(pow(10,section+1))/ (int)pow(10,section));
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	3301      	adds	r3, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff faa2 	bl	8000554 <__aeabi_i2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	ec43 2b11 	vmov	d1, r2, r3
 8001018:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 8001118 <set_digit+0x190>
 800101c:	f003 f828 	bl	8004070 <pow>
 8001020:	ec53 2b10 	vmov	r2, r3, d0
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fdae 	bl	8000b88 <__aeabi_d2iz>
 800102c:	4602      	mov	r2, r0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	fb93 f1f2 	sdiv	r1, r3, r2
 8001034:	fb02 f201 	mul.w	r2, r2, r1
 8001038:	1a9c      	subs	r4, r3, r2
 800103a:	6938      	ldr	r0, [r7, #16]
 800103c:	f7ff fa8a 	bl	8000554 <__aeabi_i2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	ec43 2b11 	vmov	d1, r2, r3
 8001048:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8001118 <set_digit+0x190>
 800104c:	f003 f810 	bl	8004070 <pow>
 8001050:	ec53 2b10 	vmov	r2, r3, d0
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd96 	bl	8000b88 <__aeabi_d2iz>
 800105c:	4603      	mov	r3, r0
 800105e:	fb94 f3f3 	sdiv	r3, r4, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfb8      	it	lt
 8001066:	425b      	neglt	r3, r3
 8001068:	60bb      	str	r3, [r7, #8]
		int i = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]

		while (numbers[num][i] != -1){
 800106e:	e01a      	b.n	80010a6 <set_digit+0x11e>
			HAL_GPIO_WritePin(segments_port[numbers[num][i]], segments_pins[numbers[num][i]], GPIO_PIN_RESET);
 8001070:	492e      	ldr	r1, [pc, #184]	; (800112c <set_digit+0x1a4>)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	00da      	lsls	r2, r3, #3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800107e:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <set_digit+0x1a8>)
 8001080:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001084:	4929      	ldr	r1, [pc, #164]	; (800112c <set_digit+0x1a4>)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	00da      	lsls	r2, r3, #3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001092:	4a28      	ldr	r2, [pc, #160]	; (8001134 <set_digit+0x1ac>)
 8001094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	f000 fefc 	bl	8001e98 <HAL_GPIO_WritePin>
			i++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
		while (numbers[num][i] != -1){
 80010a6:	4921      	ldr	r1, [pc, #132]	; (800112c <set_digit+0x1a4>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	00da      	lsls	r2, r3, #3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d1da      	bne.n	8001070 <set_digit+0xe8>
		}
		HAL_Delay(5);
 80010ba:	2005      	movs	r0, #5
 80010bc:	f000 fb90 	bl	80017e0 <HAL_Delay>
	for (int section = 0; section<discharge+1; section++){
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	3301      	adds	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	da8d      	bge.n	8000fea <set_digit+0x62>

	}
	if (number < 0) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da1a      	bge.n	800110a <set_digit+0x182>
		turn_off_LED();
 80010d4:	f7ff ff1c 	bl	8000f10 <turn_off_LED>
		HAL_GPIO_WritePin(section_port[discharge+1], section_pins[discharge+1], GPIO_PIN_RESET);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a11      	ldr	r2, [pc, #68]	; (8001124 <set_digit+0x19c>)
 80010de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <set_digit+0x1a0>)
 80010e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	f000 fed2 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segments_port[7], segments_pins[7], GPIO_PIN_RESET);
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <set_digit+0x1a8>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	2200      	movs	r2, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 feca 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001104:	2005      	movs	r0, #5
 8001106:	f000 fb6b 	bl	80017e0 <HAL_Delay>

	//HAL_GPIO_WritePin(section_port[3 - discharge], section_pins[3 - discharge], GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(segments_port[9], segments_pins[9], GPIO_PIN_RESET);
	//HAL_Delay(5);

	return 1;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	00000000 	.word	0x00000000
 800111c:	40240000 	.word	0x40240000
 8001120:	fffffc19 	.word	0xfffffc19
 8001124:	20000024 	.word	0x20000024
 8001128:	080054a4 	.word	0x080054a4
 800112c:	080054ac 	.word	0x080054ac
 8001130:	20000000 	.word	0x20000000
 8001134:	08005490 	.word	0x08005490

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f000 fade 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f828 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f000 f8b0 	bl	80012a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001148:	f000 f884 	bl	8001254 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  rx_buffer = (uint8_t*) malloc(sizeof(uint8_t)*8);
 800114c:	2008      	movs	r0, #8
 800114e:	f002 fb07 	bl	8003760 <malloc>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <main+0x4c>)
 8001158:	601a      	str	r2, [r3, #0]
  tx_buffer = (uint8_t*) malloc(sizeof(uint8_t)*8);
 800115a:	2008      	movs	r0, #8
 800115c:	f002 fb00 	bl	8003760 <malloc>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <main+0x50>)
 8001166:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, rx_buffer, 4);
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <main+0x4c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2204      	movs	r2, #4
 800116e:	4619      	mov	r1, r3
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <main+0x54>)
 8001172:	f001 fc51 	bl	8002a18 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  set_digit(changed_number);
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <main+0x58>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff04 	bl	8000f88 <set_digit>
 8001180:	e7f9      	b.n	8001176 <main+0x3e>
 8001182:	bf00      	nop
 8001184:	200000c4 	.word	0x200000c4
 8001188:	200000c8 	.word	0x200000c8
 800118c:	200000dc 	.word	0x200000dc
 8001190:	200000cd 	.word	0x200000cd

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2234      	movs	r2, #52	; 0x34
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fae4 	bl	8003770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <SystemClock_Config+0xb8>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <SystemClock_Config+0xb8>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <SystemClock_Config+0xb8>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <SystemClock_Config+0xbc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <SystemClock_Config+0xbc>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <SystemClock_Config+0xbc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2310      	movs	r3, #16
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4618      	mov	r0, r3
 800120a:	f001 f8d5 	bl	80023b8 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001214:	f000 f94e 	bl	80014b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fe4a 	bl	8001ecc <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800123e:	f000 f939 	bl	80014b4 <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3750      	adds	r7, #80	; 0x50
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f001 fb32 	bl	80028f4 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f90d 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000dc 	.word	0x200000dc
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a44      	ldr	r2, [pc, #272]	; (80013d8 <MX_GPIO_Init+0x130>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <MX_GPIO_Init+0x130>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <MX_GPIO_Init+0x130>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <MX_GPIO_Init+0x130>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <MX_GPIO_Init+0x130>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <MX_GPIO_Init+0x130>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a36      	ldr	r2, [pc, #216]	; (80013d8 <MX_GPIO_Init+0x130>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <MX_GPIO_Init+0x130>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <MX_GPIO_Init+0x130>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a2f      	ldr	r2, [pc, #188]	; (80013d8 <MX_GPIO_Init+0x130>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <MX_GPIO_Init+0x130>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800132e:	2200      	movs	r2, #0
 8001330:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001334:	4829      	ldr	r0, [pc, #164]	; (80013dc <MX_GPIO_Init+0x134>)
 8001336:	f000 fdaf 	bl	8001e98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f641 4110 	movw	r1, #7184	; 0x1c10
 8001340:	4827      	ldr	r0, [pc, #156]	; (80013e0 <MX_GPIO_Init+0x138>)
 8001342:	f000 fda9 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	210a      	movs	r1, #10
 800134a:	4826      	ldr	r0, [pc, #152]	; (80013e4 <MX_GPIO_Init+0x13c>)
 800134c:	f000 fda4 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2104      	movs	r1, #4
 8001354:	4824      	ldr	r0, [pc, #144]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001356:	f000 fd9f 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800135a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800135e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <MX_GPIO_Init+0x134>)
 8001374:	f000 fbfc 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001378:	f641 4310 	movw	r3, #7184	; 0x1c10
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <MX_GPIO_Init+0x138>)
 8001392:	f000 fbed 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001396:	230a      	movs	r3, #10
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80013ae:	f000 fbdf 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b2:	2304      	movs	r3, #4
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_GPIO_Init+0x140>)
 80013ca:	f000 fbd1 	bl	8001b70 <HAL_GPIO_Init>

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020c00 	.word	0x40020c00

080013ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	//?��?а?��?па?��??��?ит�? данные
	for (int i=1; i<3; i++){
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e011      	b.n	800141e <HAL_UART_RxCpltCallback+0x32>
		char sym = rx_buffer[i];
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_UART_RxCpltCallback+0xac>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	72fb      	strb	r3, [r7, #11]
		current_number += sym -48 ;//) * pow(10, i%2);
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_UART_RxCpltCallback+0xb0>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	7afb      	ldrb	r3, [r7, #11]
 800140c:	4413      	add	r3, r2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	3b30      	subs	r3, #48	; 0x30
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_UART_RxCpltCallback+0xb0>)
 8001416:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<3; i++){
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3301      	adds	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b02      	cmp	r3, #2
 8001422:	ddea      	ble.n	80013fa <HAL_UART_RxCpltCallback+0xe>
	}


	//ма?��?. п?��?еоб?��?азование
	changed_number = pow(e, current_number);
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_UART_RxCpltCallback+0xb4>)
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f8a6 	bl	8000578 <__aeabi_f2d>
 800142c:	4604      	mov	r4, r0
 800142e:	460d      	mov	r5, r1
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HAL_UART_RxCpltCallback+0xb0>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f87d 	bl	8000534 <__aeabi_ui2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	ec43 2b11 	vmov	d1, r2, r3
 8001442:	ec45 4b10 	vmov	d0, r4, r5
 8001446:	f002 fe13 	bl	8004070 <pow>
 800144a:	ec53 2b10 	vmov	r2, r3, d0
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbc1 	bl	8000bd8 <__aeabi_d2uiz>
 8001456:	4603      	mov	r3, r0
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_UART_RxCpltCallback+0xb8>)
 800145c:	701a      	strb	r2, [r3, #0]

	//упаковат�?
	sprintf(tx_buffer, "\r%d\n", changed_number);
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_UART_RxCpltCallback+0xbc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_UART_RxCpltCallback+0xb8>)
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	4911      	ldr	r1, [pc, #68]	; (80014ac <HAL_UART_RxCpltCallback+0xc0>)
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fa43 	bl	80038f4 <siprintf>

	//отп?��?авит�? об?��?атно
	HAL_UART_Transmit_IT(&huart2, tx_buffer, 4);
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_UART_RxCpltCallback+0xbc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2204      	movs	r2, #4
 8001474:	4619      	mov	r1, r3
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <HAL_UART_RxCpltCallback+0xc4>)
 8001478:	f001 fa89 	bl	800298e <HAL_UART_Transmit_IT>

	current_number = 0;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_UART_RxCpltCallback+0xb0>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rx_buffer, 4);
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_UART_RxCpltCallback+0xac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2204      	movs	r2, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4809      	ldr	r0, [pc, #36]	; (80014b0 <HAL_UART_RxCpltCallback+0xc4>)
 800148c:	f001 fac4 	bl	8002a18 <HAL_UART_Receive_IT>

}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bdb0      	pop	{r4, r5, r7, pc}
 8001498:	200000c4 	.word	0x200000c4
 800149c:	200000cc 	.word	0x200000cc
 80014a0:	402df84d 	.word	0x402df84d
 80014a4:	200000cd 	.word	0x200000cd
 80014a8:	200000c8 	.word	0x200000c8
 80014ac:	08005488 	.word	0x08005488
 80014b0:	200000dc 	.word	0x200000dc

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x4c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_UART_MspInit+0x94>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d133      	bne.n	800159a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_UART_MspInit+0x98>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_UART_MspInit+0x98>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_UART_MspInit+0x98>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_UART_MspInit+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_UART_MspInit+0x98>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_UART_MspInit+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800156a:	230c      	movs	r3, #12
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157a:	2307      	movs	r3, #7
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_UART_MspInit+0x9c>)
 8001586:	f000 faf3 	bl	8001b70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2026      	movs	r0, #38	; 0x26
 8001590:	f000 fa25 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001594:	2026      	movs	r0, #38	; 0x26
 8001596:	f000 fa3e 	bl	8001a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40004400 	.word	0x40004400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f8d0 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <USART2_IRQHandler+0x10>)
 800160a:	f001 fa35 	bl	8002a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000dc 	.word	0x200000dc

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f002 f860 	bl	800370c <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20020000 	.word	0x20020000
 8001678:	00000400 	.word	0x00000400
 800167c:	200000d0 	.word	0x200000d0
 8001680:	20000138 	.word	0x20000138

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ae:	490e      	ldr	r1, [pc, #56]	; (80016e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c4:	4c0b      	ldr	r4, [pc, #44]	; (80016f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016d2:	f7ff ffd7 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f002 f81f 	bl	8003718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff fd2d 	bl	8001138 <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80016ec:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 80016f0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80016f4:	20000134 	.word	0x20000134

080016f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f94f 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fec6 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f967 	bl	8001a32 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f92f 	bl	80019de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000034 	.word	0x20000034
 8001798:	2000003c 	.word	0x2000003c
 800179c:	20000038 	.word	0x20000038

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000003c 	.word	0x2000003c
 80017c4:	20000120 	.word	0x20000120

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000120 	.word	0x20000120

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff ffee 	bl	80017c8 <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_Delay+0x44>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffde 	bl	80017c8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000003c 	.word	0x2000003c

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff29 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff3e 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff8e 	bl	800191c <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff31 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa2 	bl	8001984 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff feb6 	bl	80017c8 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d008      	beq.n	8001a7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e052      	b.n	8001b22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0216 	bic.w	r2, r2, #22
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d103      	bne.n	8001aac <HAL_DMA_Abort+0x62>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0208 	bic.w	r2, r2, #8
 8001aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001acc:	e013      	b.n	8001af6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ace:	f7ff fe7b 	bl	80017c8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d90c      	bls.n	8001af6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e015      	b.n	8001b22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e4      	bne.n	8001ace <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b08:	223f      	movs	r2, #63	; 0x3f
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e00c      	b.n	8001b62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e165      	b.n	8001e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f040 8154 	bne.w	8001e52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d005      	beq.n	8001bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d130      	bne.n	8001c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 0201 	and.w	r2, r3, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d017      	beq.n	8001c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d123      	bne.n	8001cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	69b9      	ldr	r1, [r7, #24]
 8001cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0203 	and.w	r2, r3, #3
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80ae 	beq.w	8001e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_GPIO_Init+0x300>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a5c      	ldr	r2, [pc, #368]	; (8001e70 <HAL_GPIO_Init+0x300>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_GPIO_Init+0x300>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d12:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	; (8001e78 <HAL_GPIO_Init+0x308>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d025      	beq.n	8001d8a <HAL_GPIO_Init+0x21a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4e      	ldr	r2, [pc, #312]	; (8001e7c <HAL_GPIO_Init+0x30c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <HAL_GPIO_Init+0x216>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x310>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x212>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_GPIO_Init+0x314>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x20e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_GPIO_Init+0x318>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x20a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x31c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x206>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <HAL_GPIO_Init+0x320>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x202>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e00c      	b.n	8001d8c <HAL_GPIO_Init+0x21c>
 8001d72:	2307      	movs	r3, #7
 8001d74:	e00a      	b.n	8001d8c <HAL_GPIO_Init+0x21c>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e008      	b.n	8001d8c <HAL_GPIO_Init+0x21c>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x21c>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x21c>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x21c>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x21c>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	f002 0203 	and.w	r2, r2, #3
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dce:	4a31      	ldr	r2, [pc, #196]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd4:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df8:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e4c:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	f67f ae96 	bls.w	8001b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40021400 	.word	0x40021400
 8001e90:	40021800 	.word	0x40021800
 8001e94:	40013c00 	.word	0x40013c00

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0cc      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d90c      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b8      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	494d      	ldr	r1, [pc, #308]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d044      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d119      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e067      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4934      	ldr	r1, [pc, #208]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff fc04 	bl	80017c8 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff fc00 	bl	80017c8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d20c      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002052:	f000 f855 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	490a      	ldr	r1, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fb64 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00
 8002088:	40023800 	.word	0x40023800
 800208c:	080055ec 	.word	0x080055ec
 8002090:	20000034 	.word	0x20000034
 8002094:	20000038 	.word	0x20000038

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_RCC_GetHCLKFreq+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000034 	.word	0x20000034

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b4:	f7ff fff0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0a9b      	lsrs	r3, r3, #10
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	080055fc 	.word	0x080055fc

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020dc:	f7ff ffdc 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0b5b      	lsrs	r3, r3, #13
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	080055fc 	.word	0x080055fc

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002104:	b087      	sub	sp, #28
 8002106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002108:	2600      	movs	r6, #0
 800210a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 800210c:	2600      	movs	r6, #0
 800210e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002110:	2600      	movs	r6, #0
 8002112:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002114:	2600      	movs	r6, #0
 8002116:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002118:	2600      	movs	r6, #0
 800211a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800211c:	4ea3      	ldr	r6, [pc, #652]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 800211e:	68b6      	ldr	r6, [r6, #8]
 8002120:	f006 060c 	and.w	r6, r6, #12
 8002124:	2e0c      	cmp	r6, #12
 8002126:	f200 8137 	bhi.w	8002398 <HAL_RCC_GetSysClockFreq+0x298>
 800212a:	f20f 0c08 	addw	ip, pc, #8
 800212e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002169 	.word	0x08002169
 8002138:	08002399 	.word	0x08002399
 800213c:	08002399 	.word	0x08002399
 8002140:	08002399 	.word	0x08002399
 8002144:	0800216f 	.word	0x0800216f
 8002148:	08002399 	.word	0x08002399
 800214c:	08002399 	.word	0x08002399
 8002150:	08002399 	.word	0x08002399
 8002154:	08002175 	.word	0x08002175
 8002158:	08002399 	.word	0x08002399
 800215c:	08002399 	.word	0x08002399
 8002160:	08002399 	.word	0x08002399
 8002164:	0800228b 	.word	0x0800228b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4b91      	ldr	r3, [pc, #580]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800216a:	613b      	str	r3, [r7, #16]
       break;
 800216c:	e117      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216e:	4b91      	ldr	r3, [pc, #580]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002170:	613b      	str	r3, [r7, #16]
      break;
 8002172:	e114      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002174:	4b8d      	ldr	r3, [pc, #564]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800217c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d024      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	461a      	mov	r2, r3
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	f240 14ff 	movw	r4, #511	; 0x1ff
 800219a:	f04f 0500 	mov.w	r5, #0
 800219e:	ea02 0004 	and.w	r0, r2, r4
 80021a2:	ea03 0105 	and.w	r1, r3, r5
 80021a6:	4b83      	ldr	r3, [pc, #524]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021a8:	fb03 f201 	mul.w	r2, r3, r1
 80021ac:	2300      	movs	r3, #0
 80021ae:	fb03 f300 	mul.w	r3, r3, r0
 80021b2:	4413      	add	r3, r2
 80021b4:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021b6:	fba0 0102 	umull	r0, r1, r0, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	4619      	mov	r1, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	461a      	mov	r2, r3
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	f7fe fd27 	bl	8000c18 <__aeabi_uldivmod>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4613      	mov	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e04c      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d4:	4b75      	ldr	r3, [pc, #468]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	461a      	mov	r2, r3
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	ea02 0800 	and.w	r8, r2, r0
 80021ec:	ea03 0901 	and.w	r9, r3, r1
 80021f0:	4640      	mov	r0, r8
 80021f2:	4649      	mov	r1, r9
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	014b      	lsls	r3, r1, #5
 80021fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002202:	0142      	lsls	r2, r0, #5
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	ebb0 0008 	subs.w	r0, r0, r8
 800220c:	eb61 0109 	sbc.w	r1, r1, r9
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	018b      	lsls	r3, r1, #6
 800221a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800221e:	0182      	lsls	r2, r0, #6
 8002220:	1a12      	subs	r2, r2, r0
 8002222:	eb63 0301 	sbc.w	r3, r3, r1
 8002226:	f04f 0000 	mov.w	r0, #0
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	00d9      	lsls	r1, r3, #3
 8002230:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002234:	00d0      	lsls	r0, r2, #3
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	eb12 0208 	adds.w	r2, r2, r8
 800223e:	eb43 0309 	adc.w	r3, r3, r9
 8002242:	f04f 0000 	mov.w	r0, #0
 8002246:	f04f 0100 	mov.w	r1, #0
 800224a:	0299      	lsls	r1, r3, #10
 800224c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002250:	0290      	lsls	r0, r2, #10
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	461a      	mov	r2, r3
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f7fe fcd9 	bl	8000c18 <__aeabi_uldivmod>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4613      	mov	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800226e:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	3301      	adds	r3, #1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	613b      	str	r3, [r7, #16]
      break;
 8002288:	e089      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228a:	4948      	ldr	r1, [pc, #288]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 800228c:	6849      	ldr	r1, [r1, #4]
 800228e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002292:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002294:	4945      	ldr	r1, [pc, #276]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002296:	6849      	ldr	r1, [r1, #4]
 8002298:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800229c:	2900      	cmp	r1, #0
 800229e:	d024      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a0:	4942      	ldr	r1, [pc, #264]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022a2:	6849      	ldr	r1, [r1, #4]
 80022a4:	0989      	lsrs	r1, r1, #6
 80022a6:	4608      	mov	r0, r1
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80022b0:	f04f 0500 	mov.w	r5, #0
 80022b4:	ea00 0204 	and.w	r2, r0, r4
 80022b8:	ea01 0305 	and.w	r3, r1, r5
 80022bc:	493d      	ldr	r1, [pc, #244]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80022be:	fb01 f003 	mul.w	r0, r1, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	fb01 f102 	mul.w	r1, r1, r2
 80022c8:	1844      	adds	r4, r0, r1
 80022ca:	493a      	ldr	r1, [pc, #232]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80022cc:	fba2 0101 	umull	r0, r1, r2, r1
 80022d0:	1863      	adds	r3, r4, r1
 80022d2:	4619      	mov	r1, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	f7fe fc9c 	bl	8000c18 <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4613      	mov	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e04a      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	461a      	mov	r2, r3
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022fa:	f04f 0100 	mov.w	r1, #0
 80022fe:	ea02 0400 	and.w	r4, r2, r0
 8002302:	ea03 0501 	and.w	r5, r3, r1
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	014b      	lsls	r3, r1, #5
 8002314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002318:	0142      	lsls	r2, r0, #5
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	1b00      	subs	r0, r0, r4
 8002320:	eb61 0105 	sbc.w	r1, r1, r5
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	018b      	lsls	r3, r1, #6
 800232e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002332:	0182      	lsls	r2, r0, #6
 8002334:	1a12      	subs	r2, r2, r0
 8002336:	eb63 0301 	sbc.w	r3, r3, r1
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	00d9      	lsls	r1, r3, #3
 8002344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002348:	00d0      	lsls	r0, r2, #3
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	1912      	adds	r2, r2, r4
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	0299      	lsls	r1, r3, #10
 800235e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002362:	0290      	lsls	r0, r2, #10
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	461a      	mov	r2, r3
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	f7fe fc50 	bl	8000c18 <__aeabi_uldivmod>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4613      	mov	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0f1b      	lsrs	r3, r3, #28
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	613b      	str	r3, [r7, #16]
      break;
 8002396:	e002      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800239a:	613b      	str	r3, [r7, #16]
      break;
 800239c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239e:	693b      	ldr	r3, [r7, #16]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	017d7840 	.word	0x017d7840

080023b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e28d      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8083 	beq.w	80024de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023d8:	4b94      	ldr	r3, [pc, #592]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d019      	beq.n	8002418 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023e4:	4b91      	ldr	r3, [pc, #580]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023f0:	4b8e      	ldr	r3, [pc, #568]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b88      	ldr	r3, [pc, #544]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002416:	d10b      	bne.n	8002430 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b84      	ldr	r3, [pc, #528]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05b      	beq.n	80024dc <HAL_RCC_OscConfig+0x124>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d157      	bne.n	80024dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e25a      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x90>
 800243a:	4b7c      	ldr	r3, [pc, #496]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7b      	ldr	r2, [pc, #492]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xcc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0xb4>
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a75      	ldr	r2, [pc, #468]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b73      	ldr	r3, [pc, #460]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a72      	ldr	r2, [pc, #456]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xcc>
 800246c:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6b      	ldr	r2, [pc, #428]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff f99c 	bl	80017c8 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff f998 	bl	80017c8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e21f      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b61      	ldr	r3, [pc, #388]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xdc>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff f988 	bl	80017c8 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff f984 	bl	80017c8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e20b      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x104>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06f      	beq.n	80025ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ea:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024f6:	4b4d      	ldr	r3, [pc, #308]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002502:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b44      	ldr	r3, [pc, #272]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x186>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1d3      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4937      	ldr	r1, [pc, #220]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_RCC_OscConfig+0x278>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff f931 	bl	80017c8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff f92d 	bl	80017c8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1b4      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4925      	ldr	r1, [pc, #148]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_OscConfig+0x278>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff f910 	bl	80017c8 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff f90c 	bl	80017c8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e193      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d036      	beq.n	8002644 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_RCC_OscConfig+0x27c>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff f8f0 	bl	80017c8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff f8ec 	bl	80017c8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e173      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x234>
 800260a:	e01b      	b.n	8002644 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_OscConfig+0x27c>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7ff f8d9 	bl	80017c8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	e00e      	b.n	8002638 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261a:	f7ff f8d5 	bl	80017c8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d907      	bls.n	8002638 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e15c      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
 800262c:	40023800 	.word	0x40023800
 8002630:	42470000 	.word	0x42470000
 8002634:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ea      	bne.n	800261a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8097 	beq.w	8002780 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b83      	ldr	r3, [pc, #524]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b7f      	ldr	r3, [pc, #508]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a7e      	ldr	r2, [pc, #504]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b7c      	ldr	r3, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b79      	ldr	r3, [pc, #484]	; (8002868 <HAL_RCC_OscConfig+0x4b0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b76      	ldr	r3, [pc, #472]	; (8002868 <HAL_RCC_OscConfig+0x4b0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a75      	ldr	r2, [pc, #468]	; (8002868 <HAL_RCC_OscConfig+0x4b0>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7ff f895 	bl	80017c8 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7ff f891 	bl	80017c8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e118      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <HAL_RCC_OscConfig+0x4b0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x31e>
 80026c8:	4b66      	ldr	r3, [pc, #408]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	4a65      	ldr	r2, [pc, #404]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	; 0x70
 80026d4:	e01c      	b.n	8002710 <HAL_RCC_OscConfig+0x358>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x340>
 80026de:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a60      	ldr	r2, [pc, #384]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ea:	4b5e      	ldr	r3, [pc, #376]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0x358>
 80026f8:	4b5a      	ldr	r3, [pc, #360]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a59      	ldr	r2, [pc, #356]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	4b57      	ldr	r3, [pc, #348]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a56      	ldr	r2, [pc, #344]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	f023 0304 	bic.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7ff f856 	bl	80017c8 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7ff f852 	bl	80017c8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0d7      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0ee      	beq.n	8002720 <HAL_RCC_OscConfig+0x368>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff f840 	bl	80017c8 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7ff f83c 	bl	80017c8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0c1      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002762:	4b40      	ldr	r3, [pc, #256]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ee      	bne.n	800274c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80ad 	beq.w	80028e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	d060      	beq.n	8002858 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d145      	bne.n	800282a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <HAL_RCC_OscConfig+0x4b4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff f810 	bl	80017c8 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ac:	f7ff f80c 	bl	80017c8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e093      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	071b      	lsls	r3, r3, #28
 80027f6:	491b      	ldr	r1, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x4b4>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe ffe1 	bl	80017c8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe ffdd 	bl	80017c8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e064      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x452>
 8002828:	e05c      	b.n	80028e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x4b4>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe ffca 	bl	80017c8 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe ffc6 	bl	80017c8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e04d      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x480>
 8002856:	e045      	b.n	80028e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e040      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
 800286c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <HAL_RCC_OscConfig+0x538>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d030      	beq.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d129      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d122      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d119      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	3b01      	subs	r3, #1
 80028ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10f      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e03f      	b.n	8002986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fdf8 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fd1f 	bl	800337c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800294c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800295c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800296c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	4613      	mov	r3, r2
 800299a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d130      	bne.n	8002a0a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_UART_Transmit_IT+0x26>
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e029      	b.n	8002a0c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Transmit_IT+0x38>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e022      	b.n	8002a0c <HAL_UART_Transmit_IT+0x7e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2221      	movs	r2, #33	; 0x21
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a04:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d11d      	bne.n	8002a6e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_UART_Receive_IT+0x26>
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e016      	b.n	8002a70 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_UART_Receive_IT+0x38>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e00f      	b.n	8002a70 <HAL_UART_Receive_IT+0x58>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fab5 	bl	8002fd4 <UART_Start_Receive_IT>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	e000      	b.n	8002a70 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0ba      	sub	sp, #232	; 0xe8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_UART_IRQHandler+0x66>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fb95 	bl	8003206 <UART_Receive_IT>
      return;
 8002adc:	e256      	b.n	8002f8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80de 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x22c>
 8002ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80d1 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xae>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_UART_IRQHandler+0xd2>
 8002b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_UART_IRQHandler+0xf6>
 8002b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f043 0204 	orr.w	r2, r3, #4
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <HAL_UART_IRQHandler+0x126>
 8002b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0208 	orr.w	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 81ed 	beq.w	8002f82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x14e>
 8002bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb20 	bl	8003206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x17a>
 8002bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d04f      	beq.n	8002c92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa28 	bl	8003048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d141      	bne.n	8002c8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3314      	adds	r3, #20
 8002c0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3314      	adds	r3, #20
 8002c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1d9      	bne.n	8002c06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d013      	beq.n	8002c82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	4a7d      	ldr	r2, [pc, #500]	; (8002e54 <HAL_UART_IRQHandler+0x3dc>)
 8002c60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe ff5f 	bl	8001b2a <HAL_DMA_Abort_IT>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c80:	e00e      	b.n	8002ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f990 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	e00a      	b.n	8002ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f98c 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c90:	e006      	b.n	8002ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f988 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c9e:	e170      	b.n	8002f82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca0:	bf00      	nop
    return;
 8002ca2:	e16e      	b.n	8002f82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	f040 814a 	bne.w	8002f42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8143 	beq.w	8002f42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 813c 	beq.w	8002f42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	f040 80b4 	bne.w	8002e58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8140 	beq.w	8002f86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	f080 8139 	bcs.w	8002f86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d26:	f000 8088 	beq.w	8002e3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1d9      	bne.n	8002d2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3314      	adds	r3, #20
 8002d7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3314      	adds	r3, #20
 8002d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e1      	bne.n	8002d76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3314      	adds	r3, #20
 8002db8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ddc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e3      	bne.n	8002db2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e3      	bne.n	8002df8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fe08 	bl	8001a4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f8b6 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e50:	e099      	b.n	8002f86 <HAL_UART_IRQHandler+0x50e>
 8002e52:	bf00      	nop
 8002e54:	0800310f 	.word	0x0800310f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 808b 	beq.w	8002f8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8086 	beq.w	8002f8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ea2:	647a      	str	r2, [r7, #68]	; 0x44
 8002ea4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e3      	bne.n	8002e7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3314      	adds	r3, #20
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002eda:	633a      	str	r2, [r7, #48]	; 0x30
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee2:	e841 2300 	strex	r3, r2, [r1]
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e3      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0310 	bic.w	r3, r3, #16
 8002f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f20:	61fa      	str	r2, [r7, #28]
 8002f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	69b9      	ldr	r1, [r7, #24]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e3      	bne.n	8002efc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f83e 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f40:	e023      	b.n	8002f8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_UART_IRQHandler+0x4ea>
 8002f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8eb 	bl	8003136 <UART_Transmit_IT>
    return;
 8002f60:	e014      	b.n	8002f8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00e      	beq.n	8002f8c <HAL_UART_IRQHandler+0x514>
 8002f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f92b 	bl	80031d6 <UART_EndTransmit_IT>
    return;
 8002f80:	e004      	b.n	8002f8c <HAL_UART_IRQHandler+0x514>
    return;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <HAL_UART_IRQHandler+0x514>
      return;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <HAL_UART_IRQHandler+0x514>
      return;
 8002f8a:	bf00      	nop
  }
}
 8002f8c:	37e8      	adds	r7, #232	; 0xe8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop

08002f94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2222      	movs	r2, #34	; 0x22
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003018:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0220 	orr.w	r2, r2, #32
 8003038:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b095      	sub	sp, #84	; 0x54
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	330c      	adds	r3, #12
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003070:	643a      	str	r2, [r7, #64]	; 0x40
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e5      	bne.n	8003050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	61fb      	str	r3, [r7, #28]
   return(result);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d119      	bne.n	80030f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f023 0310 	bic.w	r3, r3, #16
 80030d6:	647b      	str	r3, [r7, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030e0:	61ba      	str	r2, [r7, #24]
 80030e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	6979      	ldr	r1, [r7, #20]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	e841 2300 	strex	r3, r2, [r1]
 80030ec:	613b      	str	r3, [r7, #16]
   return(result);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e5      	bne.n	80030c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003102:	bf00      	nop
 8003104:	3754      	adds	r7, #84	; 0x54
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff ff3d 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b21      	cmp	r3, #33	; 0x21
 8003148:	d13e      	bne.n	80031c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	d114      	bne.n	800317e <UART_Transmit_IT+0x48>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d110      	bne.n	800317e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]
 800317c:	e008      	b.n	8003190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6211      	str	r1, [r2, #32]
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29b      	uxth	r3, r3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4619      	mov	r1, r3
 800319e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fecc 	bl	8002f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b08c      	sub	sp, #48	; 0x30
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b22      	cmp	r3, #34	; 0x22
 8003218:	f040 80ab 	bne.w	8003372 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d117      	bne.n	8003256 <UART_Receive_IT+0x50>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d113      	bne.n	8003256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003244:	b29a      	uxth	r2, r3
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	1c9a      	adds	r2, r3, #2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
 8003254:	e026      	b.n	80032a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d007      	beq.n	800327a <UART_Receive_IT+0x74>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <UART_Receive_IT+0x82>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e008      	b.n	800329a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	b2da      	uxtb	r2, r3
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4619      	mov	r1, r3
 80032b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d15a      	bne.n	800336e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0220 	bic.w	r2, r2, #32
 80032c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d135      	bne.n	8003364 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	613b      	str	r3, [r7, #16]
   return(result);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 0310 	bic.w	r3, r3, #16
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	623a      	str	r2, [r7, #32]
 8003320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	69f9      	ldr	r1, [r7, #28]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	61bb      	str	r3, [r7, #24]
   return(result);
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e5      	bne.n	80032fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d10a      	bne.n	8003356 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fe2d 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
 8003362:	e002      	b.n	800336a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fe f841 	bl	80013ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e002      	b.n	8003374 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3730      	adds	r7, #48	; 0x30
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003380:	b09f      	sub	sp, #124	; 0x7c
 8003382:	af00      	add	r7, sp, #0
 8003384:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	ea40 0301 	orr.w	r3, r0, r1
 800339c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033c0:	f021 010c 	bic.w	r1, r1, #12
 80033c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	6999      	ldr	r1, [r3, #24]
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	ea40 0301 	orr.w	r3, r0, r1
 80033e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4bc5      	ldr	r3, [pc, #788]	; (8003700 <UART_SetConfig+0x384>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d004      	beq.n	80033fa <UART_SetConfig+0x7e>
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4bc3      	ldr	r3, [pc, #780]	; (8003704 <UART_SetConfig+0x388>)
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d103      	bne.n	8003402 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033fa:	f7fe fe6d 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 80033fe:	6778      	str	r0, [r7, #116]	; 0x74
 8003400:	e002      	b.n	8003408 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003402:	f7fe fe55 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8003406:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003410:	f040 80b6 	bne.w	8003580 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003416:	461c      	mov	r4, r3
 8003418:	f04f 0500 	mov.w	r5, #0
 800341c:	4622      	mov	r2, r4
 800341e:	462b      	mov	r3, r5
 8003420:	1891      	adds	r1, r2, r2
 8003422:	6439      	str	r1, [r7, #64]	; 0x40
 8003424:	415b      	adcs	r3, r3
 8003426:	647b      	str	r3, [r7, #68]	; 0x44
 8003428:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800342c:	1912      	adds	r2, r2, r4
 800342e:	eb45 0303 	adc.w	r3, r5, r3
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	00d9      	lsls	r1, r3, #3
 800343c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003440:	00d0      	lsls	r0, r2, #3
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	1911      	adds	r1, r2, r4
 8003448:	6639      	str	r1, [r7, #96]	; 0x60
 800344a:	416b      	adcs	r3, r5
 800344c:	667b      	str	r3, [r7, #100]	; 0x64
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	1891      	adds	r1, r2, r2
 800345a:	63b9      	str	r1, [r7, #56]	; 0x38
 800345c:	415b      	adcs	r3, r3
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003464:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003468:	f7fd fbd6 	bl	8000c18 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4ba5      	ldr	r3, [pc, #660]	; (8003708 <UART_SetConfig+0x38c>)
 8003472:	fba3 2302 	umull	r2, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	011e      	lsls	r6, r3, #4
 800347a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347c:	461c      	mov	r4, r3
 800347e:	f04f 0500 	mov.w	r5, #0
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	1891      	adds	r1, r2, r2
 8003488:	6339      	str	r1, [r7, #48]	; 0x30
 800348a:	415b      	adcs	r3, r3
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
 800348e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003492:	1912      	adds	r2, r2, r4
 8003494:	eb45 0303 	adc.w	r3, r5, r3
 8003498:	f04f 0000 	mov.w	r0, #0
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	00d9      	lsls	r1, r3, #3
 80034a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034a6:	00d0      	lsls	r0, r2, #3
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	1911      	adds	r1, r2, r4
 80034ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80034b0:	416b      	adcs	r3, r5
 80034b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	461a      	mov	r2, r3
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80034c2:	415b      	adcs	r3, r3
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80034ce:	f7fd fba3 	bl	8000c18 <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4b8c      	ldr	r3, [pc, #560]	; (8003708 <UART_SetConfig+0x38c>)
 80034d8:	fba3 1302 	umull	r1, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	2164      	movs	r1, #100	; 0x64
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	3332      	adds	r3, #50	; 0x32
 80034ea:	4a87      	ldr	r2, [pc, #540]	; (8003708 <UART_SetConfig+0x38c>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034f8:	441e      	add	r6, r3
 80034fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fc:	4618      	mov	r0, r3
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	1894      	adds	r4, r2, r2
 8003508:	623c      	str	r4, [r7, #32]
 800350a:	415b      	adcs	r3, r3
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
 800350e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003512:	1812      	adds	r2, r2, r0
 8003514:	eb41 0303 	adc.w	r3, r1, r3
 8003518:	f04f 0400 	mov.w	r4, #0
 800351c:	f04f 0500 	mov.w	r5, #0
 8003520:	00dd      	lsls	r5, r3, #3
 8003522:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003526:	00d4      	lsls	r4, r2, #3
 8003528:	4622      	mov	r2, r4
 800352a:	462b      	mov	r3, r5
 800352c:	1814      	adds	r4, r2, r0
 800352e:	653c      	str	r4, [r7, #80]	; 0x50
 8003530:	414b      	adcs	r3, r1
 8003532:	657b      	str	r3, [r7, #84]	; 0x54
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	461a      	mov	r2, r3
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	1891      	adds	r1, r2, r2
 8003540:	61b9      	str	r1, [r7, #24]
 8003542:	415b      	adcs	r3, r3
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800354a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800354e:	f7fd fb63 	bl	8000c18 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <UART_SetConfig+0x38c>)
 8003558:	fba3 1302 	umull	r1, r3, r3, r2
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	2164      	movs	r1, #100	; 0x64
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	3332      	adds	r3, #50	; 0x32
 800356a:	4a67      	ldr	r2, [pc, #412]	; (8003708 <UART_SetConfig+0x38c>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	f003 0207 	and.w	r2, r3, #7
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4432      	add	r2, r6
 800357c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800357e:	e0b9      	b.n	80036f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003582:	461c      	mov	r4, r3
 8003584:	f04f 0500 	mov.w	r5, #0
 8003588:	4622      	mov	r2, r4
 800358a:	462b      	mov	r3, r5
 800358c:	1891      	adds	r1, r2, r2
 800358e:	6139      	str	r1, [r7, #16]
 8003590:	415b      	adcs	r3, r3
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003598:	1912      	adds	r2, r2, r4
 800359a:	eb45 0303 	adc.w	r3, r5, r3
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	00d9      	lsls	r1, r3, #3
 80035a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ac:	00d0      	lsls	r0, r2, #3
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	eb12 0804 	adds.w	r8, r2, r4
 80035b6:	eb43 0905 	adc.w	r9, r3, r5
 80035ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4618      	mov	r0, r3
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	008b      	lsls	r3, r1, #2
 80035ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035d2:	0082      	lsls	r2, r0, #2
 80035d4:	4640      	mov	r0, r8
 80035d6:	4649      	mov	r1, r9
 80035d8:	f7fd fb1e 	bl	8000c18 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4b49      	ldr	r3, [pc, #292]	; (8003708 <UART_SetConfig+0x38c>)
 80035e2:	fba3 2302 	umull	r2, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	011e      	lsls	r6, r3, #4
 80035ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ec:	4618      	mov	r0, r3
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	1894      	adds	r4, r2, r2
 80035f8:	60bc      	str	r4, [r7, #8]
 80035fa:	415b      	adcs	r3, r3
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003602:	1812      	adds	r2, r2, r0
 8003604:	eb41 0303 	adc.w	r3, r1, r3
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	f04f 0500 	mov.w	r5, #0
 8003610:	00dd      	lsls	r5, r3, #3
 8003612:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003616:	00d4      	lsls	r4, r2, #3
 8003618:	4622      	mov	r2, r4
 800361a:	462b      	mov	r3, r5
 800361c:	1814      	adds	r4, r2, r0
 800361e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003620:	414b      	adcs	r3, r1
 8003622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	008b      	lsls	r3, r1, #2
 8003638:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800363c:	0082      	lsls	r2, r0, #2
 800363e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003642:	f7fd fae9 	bl	8000c18 <__aeabi_uldivmod>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <UART_SetConfig+0x38c>)
 800364c:	fba3 1302 	umull	r1, r3, r3, r2
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	2164      	movs	r1, #100	; 0x64
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	3332      	adds	r3, #50	; 0x32
 800365e:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <UART_SetConfig+0x38c>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366a:	441e      	add	r6, r3
 800366c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366e:	4618      	mov	r0, r3
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	1894      	adds	r4, r2, r2
 800367a:	603c      	str	r4, [r7, #0]
 800367c:	415b      	adcs	r3, r3
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003684:	1812      	adds	r2, r2, r0
 8003686:	eb41 0303 	adc.w	r3, r1, r3
 800368a:	f04f 0400 	mov.w	r4, #0
 800368e:	f04f 0500 	mov.w	r5, #0
 8003692:	00dd      	lsls	r5, r3, #3
 8003694:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003698:	00d4      	lsls	r4, r2, #3
 800369a:	4622      	mov	r2, r4
 800369c:	462b      	mov	r3, r5
 800369e:	eb12 0a00 	adds.w	sl, r2, r0
 80036a2:	eb43 0b01 	adc.w	fp, r3, r1
 80036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f04f 0100 	mov.w	r1, #0
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	008b      	lsls	r3, r1, #2
 80036ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036be:	0082      	lsls	r2, r0, #2
 80036c0:	4650      	mov	r0, sl
 80036c2:	4659      	mov	r1, fp
 80036c4:	f7fd faa8 	bl	8000c18 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <UART_SetConfig+0x38c>)
 80036ce:	fba3 1302 	umull	r1, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2164      	movs	r1, #100	; 0x64
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	3332      	adds	r3, #50	; 0x32
 80036e0:	4a09      	ldr	r2, [pc, #36]	; (8003708 <UART_SetConfig+0x38c>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4432      	add	r2, r6
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	377c      	adds	r7, #124	; 0x7c
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036fe:	bf00      	nop
 8003700:	40011000 	.word	0x40011000
 8003704:	40011400 	.word	0x40011400
 8003708:	51eb851f 	.word	0x51eb851f

0800370c <__errno>:
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <__errno+0x8>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000040 	.word	0x20000040

08003718 <__libc_init_array>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	4d0d      	ldr	r5, [pc, #52]	; (8003750 <__libc_init_array+0x38>)
 800371c:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <__libc_init_array+0x3c>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	2600      	movs	r6, #0
 8003724:	42a6      	cmp	r6, r4
 8003726:	d109      	bne.n	800373c <__libc_init_array+0x24>
 8003728:	4d0b      	ldr	r5, [pc, #44]	; (8003758 <__libc_init_array+0x40>)
 800372a:	4c0c      	ldr	r4, [pc, #48]	; (800375c <__libc_init_array+0x44>)
 800372c:	f001 fe9e 	bl	800546c <_init>
 8003730:	1b64      	subs	r4, r4, r5
 8003732:	10a4      	asrs	r4, r4, #2
 8003734:	2600      	movs	r6, #0
 8003736:	42a6      	cmp	r6, r4
 8003738:	d105      	bne.n	8003746 <__libc_init_array+0x2e>
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003740:	4798      	blx	r3
 8003742:	3601      	adds	r6, #1
 8003744:	e7ee      	b.n	8003724 <__libc_init_array+0xc>
 8003746:	f855 3b04 	ldr.w	r3, [r5], #4
 800374a:	4798      	blx	r3
 800374c:	3601      	adds	r6, #1
 800374e:	e7f2      	b.n	8003736 <__libc_init_array+0x1e>
 8003750:	08005680 	.word	0x08005680
 8003754:	08005680 	.word	0x08005680
 8003758:	08005680 	.word	0x08005680
 800375c:	08005684 	.word	0x08005684

08003760 <malloc>:
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <malloc+0xc>)
 8003762:	4601      	mov	r1, r0
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f000 b85b 	b.w	8003820 <_malloc_r>
 800376a:	bf00      	nop
 800376c:	20000040 	.word	0x20000040

08003770 <memset>:
 8003770:	4402      	add	r2, r0
 8003772:	4603      	mov	r3, r0
 8003774:	4293      	cmp	r3, r2
 8003776:	d100      	bne.n	800377a <memset+0xa>
 8003778:	4770      	bx	lr
 800377a:	f803 1b01 	strb.w	r1, [r3], #1
 800377e:	e7f9      	b.n	8003774 <memset+0x4>

08003780 <_free_r>:
 8003780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003782:	2900      	cmp	r1, #0
 8003784:	d048      	beq.n	8003818 <_free_r+0x98>
 8003786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800378a:	9001      	str	r0, [sp, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f1a1 0404 	sub.w	r4, r1, #4
 8003792:	bfb8      	it	lt
 8003794:	18e4      	addlt	r4, r4, r3
 8003796:	f000 f8cd 	bl	8003934 <__malloc_lock>
 800379a:	4a20      	ldr	r2, [pc, #128]	; (800381c <_free_r+0x9c>)
 800379c:	9801      	ldr	r0, [sp, #4]
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	4615      	mov	r5, r2
 80037a2:	b933      	cbnz	r3, 80037b2 <_free_r+0x32>
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	6014      	str	r4, [r2, #0]
 80037a8:	b003      	add	sp, #12
 80037aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037ae:	f000 b8c7 	b.w	8003940 <__malloc_unlock>
 80037b2:	42a3      	cmp	r3, r4
 80037b4:	d90b      	bls.n	80037ce <_free_r+0x4e>
 80037b6:	6821      	ldr	r1, [r4, #0]
 80037b8:	1862      	adds	r2, r4, r1
 80037ba:	4293      	cmp	r3, r2
 80037bc:	bf04      	itt	eq
 80037be:	681a      	ldreq	r2, [r3, #0]
 80037c0:	685b      	ldreq	r3, [r3, #4]
 80037c2:	6063      	str	r3, [r4, #4]
 80037c4:	bf04      	itt	eq
 80037c6:	1852      	addeq	r2, r2, r1
 80037c8:	6022      	streq	r2, [r4, #0]
 80037ca:	602c      	str	r4, [r5, #0]
 80037cc:	e7ec      	b.n	80037a8 <_free_r+0x28>
 80037ce:	461a      	mov	r2, r3
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	b10b      	cbz	r3, 80037d8 <_free_r+0x58>
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	d9fa      	bls.n	80037ce <_free_r+0x4e>
 80037d8:	6811      	ldr	r1, [r2, #0]
 80037da:	1855      	adds	r5, r2, r1
 80037dc:	42a5      	cmp	r5, r4
 80037de:	d10b      	bne.n	80037f8 <_free_r+0x78>
 80037e0:	6824      	ldr	r4, [r4, #0]
 80037e2:	4421      	add	r1, r4
 80037e4:	1854      	adds	r4, r2, r1
 80037e6:	42a3      	cmp	r3, r4
 80037e8:	6011      	str	r1, [r2, #0]
 80037ea:	d1dd      	bne.n	80037a8 <_free_r+0x28>
 80037ec:	681c      	ldr	r4, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	6053      	str	r3, [r2, #4]
 80037f2:	4421      	add	r1, r4
 80037f4:	6011      	str	r1, [r2, #0]
 80037f6:	e7d7      	b.n	80037a8 <_free_r+0x28>
 80037f8:	d902      	bls.n	8003800 <_free_r+0x80>
 80037fa:	230c      	movs	r3, #12
 80037fc:	6003      	str	r3, [r0, #0]
 80037fe:	e7d3      	b.n	80037a8 <_free_r+0x28>
 8003800:	6825      	ldr	r5, [r4, #0]
 8003802:	1961      	adds	r1, r4, r5
 8003804:	428b      	cmp	r3, r1
 8003806:	bf04      	itt	eq
 8003808:	6819      	ldreq	r1, [r3, #0]
 800380a:	685b      	ldreq	r3, [r3, #4]
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	bf04      	itt	eq
 8003810:	1949      	addeq	r1, r1, r5
 8003812:	6021      	streq	r1, [r4, #0]
 8003814:	6054      	str	r4, [r2, #4]
 8003816:	e7c7      	b.n	80037a8 <_free_r+0x28>
 8003818:	b003      	add	sp, #12
 800381a:	bd30      	pop	{r4, r5, pc}
 800381c:	200000d4 	.word	0x200000d4

08003820 <_malloc_r>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	1ccd      	adds	r5, r1, #3
 8003824:	f025 0503 	bic.w	r5, r5, #3
 8003828:	3508      	adds	r5, #8
 800382a:	2d0c      	cmp	r5, #12
 800382c:	bf38      	it	cc
 800382e:	250c      	movcc	r5, #12
 8003830:	2d00      	cmp	r5, #0
 8003832:	4606      	mov	r6, r0
 8003834:	db01      	blt.n	800383a <_malloc_r+0x1a>
 8003836:	42a9      	cmp	r1, r5
 8003838:	d903      	bls.n	8003842 <_malloc_r+0x22>
 800383a:	230c      	movs	r3, #12
 800383c:	6033      	str	r3, [r6, #0]
 800383e:	2000      	movs	r0, #0
 8003840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003842:	f000 f877 	bl	8003934 <__malloc_lock>
 8003846:	4921      	ldr	r1, [pc, #132]	; (80038cc <_malloc_r+0xac>)
 8003848:	680a      	ldr	r2, [r1, #0]
 800384a:	4614      	mov	r4, r2
 800384c:	b99c      	cbnz	r4, 8003876 <_malloc_r+0x56>
 800384e:	4f20      	ldr	r7, [pc, #128]	; (80038d0 <_malloc_r+0xb0>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b923      	cbnz	r3, 800385e <_malloc_r+0x3e>
 8003854:	4621      	mov	r1, r4
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f83c 	bl	80038d4 <_sbrk_r>
 800385c:	6038      	str	r0, [r7, #0]
 800385e:	4629      	mov	r1, r5
 8003860:	4630      	mov	r0, r6
 8003862:	f000 f837 	bl	80038d4 <_sbrk_r>
 8003866:	1c43      	adds	r3, r0, #1
 8003868:	d123      	bne.n	80038b2 <_malloc_r+0x92>
 800386a:	230c      	movs	r3, #12
 800386c:	6033      	str	r3, [r6, #0]
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f866 	bl	8003940 <__malloc_unlock>
 8003874:	e7e3      	b.n	800383e <_malloc_r+0x1e>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	1b5b      	subs	r3, r3, r5
 800387a:	d417      	bmi.n	80038ac <_malloc_r+0x8c>
 800387c:	2b0b      	cmp	r3, #11
 800387e:	d903      	bls.n	8003888 <_malloc_r+0x68>
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	441c      	add	r4, r3
 8003884:	6025      	str	r5, [r4, #0]
 8003886:	e004      	b.n	8003892 <_malloc_r+0x72>
 8003888:	6863      	ldr	r3, [r4, #4]
 800388a:	42a2      	cmp	r2, r4
 800388c:	bf0c      	ite	eq
 800388e:	600b      	streq	r3, [r1, #0]
 8003890:	6053      	strne	r3, [r2, #4]
 8003892:	4630      	mov	r0, r6
 8003894:	f000 f854 	bl	8003940 <__malloc_unlock>
 8003898:	f104 000b 	add.w	r0, r4, #11
 800389c:	1d23      	adds	r3, r4, #4
 800389e:	f020 0007 	bic.w	r0, r0, #7
 80038a2:	1ac2      	subs	r2, r0, r3
 80038a4:	d0cc      	beq.n	8003840 <_malloc_r+0x20>
 80038a6:	1a1b      	subs	r3, r3, r0
 80038a8:	50a3      	str	r3, [r4, r2]
 80038aa:	e7c9      	b.n	8003840 <_malloc_r+0x20>
 80038ac:	4622      	mov	r2, r4
 80038ae:	6864      	ldr	r4, [r4, #4]
 80038b0:	e7cc      	b.n	800384c <_malloc_r+0x2c>
 80038b2:	1cc4      	adds	r4, r0, #3
 80038b4:	f024 0403 	bic.w	r4, r4, #3
 80038b8:	42a0      	cmp	r0, r4
 80038ba:	d0e3      	beq.n	8003884 <_malloc_r+0x64>
 80038bc:	1a21      	subs	r1, r4, r0
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 f808 	bl	80038d4 <_sbrk_r>
 80038c4:	3001      	adds	r0, #1
 80038c6:	d1dd      	bne.n	8003884 <_malloc_r+0x64>
 80038c8:	e7cf      	b.n	800386a <_malloc_r+0x4a>
 80038ca:	bf00      	nop
 80038cc:	200000d4 	.word	0x200000d4
 80038d0:	200000d8 	.word	0x200000d8

080038d4 <_sbrk_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	4d06      	ldr	r5, [pc, #24]	; (80038f0 <_sbrk_r+0x1c>)
 80038d8:	2300      	movs	r3, #0
 80038da:	4604      	mov	r4, r0
 80038dc:	4608      	mov	r0, r1
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	f7fd fe9a 	bl	8001618 <_sbrk>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d102      	bne.n	80038ee <_sbrk_r+0x1a>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	b103      	cbz	r3, 80038ee <_sbrk_r+0x1a>
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	20000124 	.word	0x20000124

080038f4 <siprintf>:
 80038f4:	b40e      	push	{r1, r2, r3}
 80038f6:	b500      	push	{lr}
 80038f8:	b09c      	sub	sp, #112	; 0x70
 80038fa:	ab1d      	add	r3, sp, #116	; 0x74
 80038fc:	9002      	str	r0, [sp, #8]
 80038fe:	9006      	str	r0, [sp, #24]
 8003900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003904:	4809      	ldr	r0, [pc, #36]	; (800392c <siprintf+0x38>)
 8003906:	9107      	str	r1, [sp, #28]
 8003908:	9104      	str	r1, [sp, #16]
 800390a:	4909      	ldr	r1, [pc, #36]	; (8003930 <siprintf+0x3c>)
 800390c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003910:	9105      	str	r1, [sp, #20]
 8003912:	6800      	ldr	r0, [r0, #0]
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	a902      	add	r1, sp, #8
 8003918:	f000 f874 	bl	8003a04 <_svfiprintf_r>
 800391c:	9b02      	ldr	r3, [sp, #8]
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	b01c      	add	sp, #112	; 0x70
 8003924:	f85d eb04 	ldr.w	lr, [sp], #4
 8003928:	b003      	add	sp, #12
 800392a:	4770      	bx	lr
 800392c:	20000040 	.word	0x20000040
 8003930:	ffff0208 	.word	0xffff0208

08003934 <__malloc_lock>:
 8003934:	4801      	ldr	r0, [pc, #4]	; (800393c <__malloc_lock+0x8>)
 8003936:	f000 baf9 	b.w	8003f2c <__retarget_lock_acquire_recursive>
 800393a:	bf00      	nop
 800393c:	2000012c 	.word	0x2000012c

08003940 <__malloc_unlock>:
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <__malloc_unlock+0x8>)
 8003942:	f000 baf4 	b.w	8003f2e <__retarget_lock_release_recursive>
 8003946:	bf00      	nop
 8003948:	2000012c 	.word	0x2000012c

0800394c <__ssputs_r>:
 800394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	688e      	ldr	r6, [r1, #8]
 8003952:	429e      	cmp	r6, r3
 8003954:	4682      	mov	sl, r0
 8003956:	460c      	mov	r4, r1
 8003958:	4690      	mov	r8, r2
 800395a:	461f      	mov	r7, r3
 800395c:	d838      	bhi.n	80039d0 <__ssputs_r+0x84>
 800395e:	898a      	ldrh	r2, [r1, #12]
 8003960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003964:	d032      	beq.n	80039cc <__ssputs_r+0x80>
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	6909      	ldr	r1, [r1, #16]
 800396a:	eba5 0901 	sub.w	r9, r5, r1
 800396e:	6965      	ldr	r5, [r4, #20]
 8003970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003978:	3301      	adds	r3, #1
 800397a:	444b      	add	r3, r9
 800397c:	106d      	asrs	r5, r5, #1
 800397e:	429d      	cmp	r5, r3
 8003980:	bf38      	it	cc
 8003982:	461d      	movcc	r5, r3
 8003984:	0553      	lsls	r3, r2, #21
 8003986:	d531      	bpl.n	80039ec <__ssputs_r+0xa0>
 8003988:	4629      	mov	r1, r5
 800398a:	f7ff ff49 	bl	8003820 <_malloc_r>
 800398e:	4606      	mov	r6, r0
 8003990:	b950      	cbnz	r0, 80039a8 <__ssputs_r+0x5c>
 8003992:	230c      	movs	r3, #12
 8003994:	f8ca 3000 	str.w	r3, [sl]
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	6921      	ldr	r1, [r4, #16]
 80039aa:	464a      	mov	r2, r9
 80039ac:	f000 fac0 	bl	8003f30 <memcpy>
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	6126      	str	r6, [r4, #16]
 80039be:	6165      	str	r5, [r4, #20]
 80039c0:	444e      	add	r6, r9
 80039c2:	eba5 0509 	sub.w	r5, r5, r9
 80039c6:	6026      	str	r6, [r4, #0]
 80039c8:	60a5      	str	r5, [r4, #8]
 80039ca:	463e      	mov	r6, r7
 80039cc:	42be      	cmp	r6, r7
 80039ce:	d900      	bls.n	80039d2 <__ssputs_r+0x86>
 80039d0:	463e      	mov	r6, r7
 80039d2:	4632      	mov	r2, r6
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	4641      	mov	r1, r8
 80039d8:	f000 fab8 	bl	8003f4c <memmove>
 80039dc:	68a3      	ldr	r3, [r4, #8]
 80039de:	6822      	ldr	r2, [r4, #0]
 80039e0:	1b9b      	subs	r3, r3, r6
 80039e2:	4432      	add	r2, r6
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	6022      	str	r2, [r4, #0]
 80039e8:	2000      	movs	r0, #0
 80039ea:	e7db      	b.n	80039a4 <__ssputs_r+0x58>
 80039ec:	462a      	mov	r2, r5
 80039ee:	f000 fac7 	bl	8003f80 <_realloc_r>
 80039f2:	4606      	mov	r6, r0
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d1e1      	bne.n	80039bc <__ssputs_r+0x70>
 80039f8:	6921      	ldr	r1, [r4, #16]
 80039fa:	4650      	mov	r0, sl
 80039fc:	f7ff fec0 	bl	8003780 <_free_r>
 8003a00:	e7c7      	b.n	8003992 <__ssputs_r+0x46>
	...

08003a04 <_svfiprintf_r>:
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	4698      	mov	r8, r3
 8003a0a:	898b      	ldrh	r3, [r1, #12]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	b09d      	sub	sp, #116	; 0x74
 8003a10:	4607      	mov	r7, r0
 8003a12:	460d      	mov	r5, r1
 8003a14:	4614      	mov	r4, r2
 8003a16:	d50e      	bpl.n	8003a36 <_svfiprintf_r+0x32>
 8003a18:	690b      	ldr	r3, [r1, #16]
 8003a1a:	b963      	cbnz	r3, 8003a36 <_svfiprintf_r+0x32>
 8003a1c:	2140      	movs	r1, #64	; 0x40
 8003a1e:	f7ff feff 	bl	8003820 <_malloc_r>
 8003a22:	6028      	str	r0, [r5, #0]
 8003a24:	6128      	str	r0, [r5, #16]
 8003a26:	b920      	cbnz	r0, 8003a32 <_svfiprintf_r+0x2e>
 8003a28:	230c      	movs	r3, #12
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	e0d1      	b.n	8003bd6 <_svfiprintf_r+0x1d2>
 8003a32:	2340      	movs	r3, #64	; 0x40
 8003a34:	616b      	str	r3, [r5, #20]
 8003a36:	2300      	movs	r3, #0
 8003a38:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a44:	2330      	movs	r3, #48	; 0x30
 8003a46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003bf0 <_svfiprintf_r+0x1ec>
 8003a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a4e:	f04f 0901 	mov.w	r9, #1
 8003a52:	4623      	mov	r3, r4
 8003a54:	469a      	mov	sl, r3
 8003a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a5a:	b10a      	cbz	r2, 8003a60 <_svfiprintf_r+0x5c>
 8003a5c:	2a25      	cmp	r2, #37	; 0x25
 8003a5e:	d1f9      	bne.n	8003a54 <_svfiprintf_r+0x50>
 8003a60:	ebba 0b04 	subs.w	fp, sl, r4
 8003a64:	d00b      	beq.n	8003a7e <_svfiprintf_r+0x7a>
 8003a66:	465b      	mov	r3, fp
 8003a68:	4622      	mov	r2, r4
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f7ff ff6d 	bl	800394c <__ssputs_r>
 8003a72:	3001      	adds	r0, #1
 8003a74:	f000 80aa 	beq.w	8003bcc <_svfiprintf_r+0x1c8>
 8003a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a7a:	445a      	add	r2, fp
 8003a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80a2 	beq.w	8003bcc <_svfiprintf_r+0x1c8>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a92:	f10a 0a01 	add.w	sl, sl, #1
 8003a96:	9304      	str	r3, [sp, #16]
 8003a98:	9307      	str	r3, [sp, #28]
 8003a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003aa0:	4654      	mov	r4, sl
 8003aa2:	2205      	movs	r2, #5
 8003aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa8:	4851      	ldr	r0, [pc, #324]	; (8003bf0 <_svfiprintf_r+0x1ec>)
 8003aaa:	f7fc fbb1 	bl	8000210 <memchr>
 8003aae:	9a04      	ldr	r2, [sp, #16]
 8003ab0:	b9d8      	cbnz	r0, 8003aea <_svfiprintf_r+0xe6>
 8003ab2:	06d0      	lsls	r0, r2, #27
 8003ab4:	bf44      	itt	mi
 8003ab6:	2320      	movmi	r3, #32
 8003ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003abc:	0711      	lsls	r1, r2, #28
 8003abe:	bf44      	itt	mi
 8003ac0:	232b      	movmi	r3, #43	; 0x2b
 8003ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aca:	2b2a      	cmp	r3, #42	; 0x2a
 8003acc:	d015      	beq.n	8003afa <_svfiprintf_r+0xf6>
 8003ace:	9a07      	ldr	r2, [sp, #28]
 8003ad0:	4654      	mov	r4, sl
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f04f 0c0a 	mov.w	ip, #10
 8003ad8:	4621      	mov	r1, r4
 8003ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ade:	3b30      	subs	r3, #48	; 0x30
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d94e      	bls.n	8003b82 <_svfiprintf_r+0x17e>
 8003ae4:	b1b0      	cbz	r0, 8003b14 <_svfiprintf_r+0x110>
 8003ae6:	9207      	str	r2, [sp, #28]
 8003ae8:	e014      	b.n	8003b14 <_svfiprintf_r+0x110>
 8003aea:	eba0 0308 	sub.w	r3, r0, r8
 8003aee:	fa09 f303 	lsl.w	r3, r9, r3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	9304      	str	r3, [sp, #16]
 8003af6:	46a2      	mov	sl, r4
 8003af8:	e7d2      	b.n	8003aa0 <_svfiprintf_r+0x9c>
 8003afa:	9b03      	ldr	r3, [sp, #12]
 8003afc:	1d19      	adds	r1, r3, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	9103      	str	r1, [sp, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bfbb      	ittet	lt
 8003b06:	425b      	neglt	r3, r3
 8003b08:	f042 0202 	orrlt.w	r2, r2, #2
 8003b0c:	9307      	strge	r3, [sp, #28]
 8003b0e:	9307      	strlt	r3, [sp, #28]
 8003b10:	bfb8      	it	lt
 8003b12:	9204      	strlt	r2, [sp, #16]
 8003b14:	7823      	ldrb	r3, [r4, #0]
 8003b16:	2b2e      	cmp	r3, #46	; 0x2e
 8003b18:	d10c      	bne.n	8003b34 <_svfiprintf_r+0x130>
 8003b1a:	7863      	ldrb	r3, [r4, #1]
 8003b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1e:	d135      	bne.n	8003b8c <_svfiprintf_r+0x188>
 8003b20:	9b03      	ldr	r3, [sp, #12]
 8003b22:	1d1a      	adds	r2, r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	9203      	str	r2, [sp, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bfb8      	it	lt
 8003b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b30:	3402      	adds	r4, #2
 8003b32:	9305      	str	r3, [sp, #20]
 8003b34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c00 <_svfiprintf_r+0x1fc>
 8003b38:	7821      	ldrb	r1, [r4, #0]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	4650      	mov	r0, sl
 8003b3e:	f7fc fb67 	bl	8000210 <memchr>
 8003b42:	b140      	cbz	r0, 8003b56 <_svfiprintf_r+0x152>
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	eba0 000a 	sub.w	r0, r0, sl
 8003b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b4e:	9b04      	ldr	r3, [sp, #16]
 8003b50:	4303      	orrs	r3, r0
 8003b52:	3401      	adds	r4, #1
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5a:	4826      	ldr	r0, [pc, #152]	; (8003bf4 <_svfiprintf_r+0x1f0>)
 8003b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b60:	2206      	movs	r2, #6
 8003b62:	f7fc fb55 	bl	8000210 <memchr>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d038      	beq.n	8003bdc <_svfiprintf_r+0x1d8>
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <_svfiprintf_r+0x1f4>)
 8003b6c:	bb1b      	cbnz	r3, 8003bb6 <_svfiprintf_r+0x1b2>
 8003b6e:	9b03      	ldr	r3, [sp, #12]
 8003b70:	3307      	adds	r3, #7
 8003b72:	f023 0307 	bic.w	r3, r3, #7
 8003b76:	3308      	adds	r3, #8
 8003b78:	9303      	str	r3, [sp, #12]
 8003b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b7c:	4433      	add	r3, r6
 8003b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b80:	e767      	b.n	8003a52 <_svfiprintf_r+0x4e>
 8003b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b86:	460c      	mov	r4, r1
 8003b88:	2001      	movs	r0, #1
 8003b8a:	e7a5      	b.n	8003ad8 <_svfiprintf_r+0xd4>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	3401      	adds	r4, #1
 8003b90:	9305      	str	r3, [sp, #20]
 8003b92:	4619      	mov	r1, r3
 8003b94:	f04f 0c0a 	mov.w	ip, #10
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b9e:	3a30      	subs	r2, #48	; 0x30
 8003ba0:	2a09      	cmp	r2, #9
 8003ba2:	d903      	bls.n	8003bac <_svfiprintf_r+0x1a8>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0c5      	beq.n	8003b34 <_svfiprintf_r+0x130>
 8003ba8:	9105      	str	r1, [sp, #20]
 8003baa:	e7c3      	b.n	8003b34 <_svfiprintf_r+0x130>
 8003bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e7f0      	b.n	8003b98 <_svfiprintf_r+0x194>
 8003bb6:	ab03      	add	r3, sp, #12
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	462a      	mov	r2, r5
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <_svfiprintf_r+0x1f8>)
 8003bbe:	a904      	add	r1, sp, #16
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f3af 8000 	nop.w
 8003bc6:	1c42      	adds	r2, r0, #1
 8003bc8:	4606      	mov	r6, r0
 8003bca:	d1d6      	bne.n	8003b7a <_svfiprintf_r+0x176>
 8003bcc:	89ab      	ldrh	r3, [r5, #12]
 8003bce:	065b      	lsls	r3, r3, #25
 8003bd0:	f53f af2c 	bmi.w	8003a2c <_svfiprintf_r+0x28>
 8003bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bd6:	b01d      	add	sp, #116	; 0x74
 8003bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bdc:	ab03      	add	r3, sp, #12
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	462a      	mov	r2, r5
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <_svfiprintf_r+0x1f8>)
 8003be4:	a904      	add	r1, sp, #16
 8003be6:	4638      	mov	r0, r7
 8003be8:	f000 f87a 	bl	8003ce0 <_printf_i>
 8003bec:	e7eb      	b.n	8003bc6 <_svfiprintf_r+0x1c2>
 8003bee:	bf00      	nop
 8003bf0:	08005604 	.word	0x08005604
 8003bf4:	0800560e 	.word	0x0800560e
 8003bf8:	00000000 	.word	0x00000000
 8003bfc:	0800394d 	.word	0x0800394d
 8003c00:	0800560a 	.word	0x0800560a

08003c04 <_printf_common>:
 8003c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c08:	4616      	mov	r6, r2
 8003c0a:	4699      	mov	r9, r3
 8003c0c:	688a      	ldr	r2, [r1, #8]
 8003c0e:	690b      	ldr	r3, [r1, #16]
 8003c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bfb8      	it	lt
 8003c18:	4613      	movlt	r3, r2
 8003c1a:	6033      	str	r3, [r6, #0]
 8003c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c20:	4607      	mov	r7, r0
 8003c22:	460c      	mov	r4, r1
 8003c24:	b10a      	cbz	r2, 8003c2a <_printf_common+0x26>
 8003c26:	3301      	adds	r3, #1
 8003c28:	6033      	str	r3, [r6, #0]
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	0699      	lsls	r1, r3, #26
 8003c2e:	bf42      	ittt	mi
 8003c30:	6833      	ldrmi	r3, [r6, #0]
 8003c32:	3302      	addmi	r3, #2
 8003c34:	6033      	strmi	r3, [r6, #0]
 8003c36:	6825      	ldr	r5, [r4, #0]
 8003c38:	f015 0506 	ands.w	r5, r5, #6
 8003c3c:	d106      	bne.n	8003c4c <_printf_common+0x48>
 8003c3e:	f104 0a19 	add.w	sl, r4, #25
 8003c42:	68e3      	ldr	r3, [r4, #12]
 8003c44:	6832      	ldr	r2, [r6, #0]
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	42ab      	cmp	r3, r5
 8003c4a:	dc26      	bgt.n	8003c9a <_printf_common+0x96>
 8003c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c50:	1e13      	subs	r3, r2, #0
 8003c52:	6822      	ldr	r2, [r4, #0]
 8003c54:	bf18      	it	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	0692      	lsls	r2, r2, #26
 8003c5a:	d42b      	bmi.n	8003cb4 <_printf_common+0xb0>
 8003c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d01e      	beq.n	8003ca8 <_printf_common+0xa4>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	68e5      	ldr	r5, [r4, #12]
 8003c6e:	6832      	ldr	r2, [r6, #0]
 8003c70:	f003 0306 	and.w	r3, r3, #6
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	bf08      	it	eq
 8003c78:	1aad      	subeq	r5, r5, r2
 8003c7a:	68a3      	ldr	r3, [r4, #8]
 8003c7c:	6922      	ldr	r2, [r4, #16]
 8003c7e:	bf0c      	ite	eq
 8003c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c84:	2500      	movne	r5, #0
 8003c86:	4293      	cmp	r3, r2
 8003c88:	bfc4      	itt	gt
 8003c8a:	1a9b      	subgt	r3, r3, r2
 8003c8c:	18ed      	addgt	r5, r5, r3
 8003c8e:	2600      	movs	r6, #0
 8003c90:	341a      	adds	r4, #26
 8003c92:	42b5      	cmp	r5, r6
 8003c94:	d11a      	bne.n	8003ccc <_printf_common+0xc8>
 8003c96:	2000      	movs	r0, #0
 8003c98:	e008      	b.n	8003cac <_printf_common+0xa8>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4652      	mov	r2, sl
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	47c0      	blx	r8
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d103      	bne.n	8003cb0 <_printf_common+0xac>
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	e7c6      	b.n	8003c42 <_printf_common+0x3e>
 8003cb4:	18e1      	adds	r1, r4, r3
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	2030      	movs	r0, #48	; 0x30
 8003cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cbe:	4422      	add	r2, r4
 8003cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cc8:	3302      	adds	r3, #2
 8003cca:	e7c7      	b.n	8003c5c <_printf_common+0x58>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	4622      	mov	r2, r4
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	47c0      	blx	r8
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d0e6      	beq.n	8003ca8 <_printf_common+0xa4>
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7d9      	b.n	8003c92 <_printf_common+0x8e>
	...

08003ce0 <_printf_i>:
 8003ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	4691      	mov	r9, r2
 8003ce8:	7e27      	ldrb	r7, [r4, #24]
 8003cea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cec:	2f78      	cmp	r7, #120	; 0x78
 8003cee:	4680      	mov	r8, r0
 8003cf0:	469a      	mov	sl, r3
 8003cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cf6:	d807      	bhi.n	8003d08 <_printf_i+0x28>
 8003cf8:	2f62      	cmp	r7, #98	; 0x62
 8003cfa:	d80a      	bhi.n	8003d12 <_printf_i+0x32>
 8003cfc:	2f00      	cmp	r7, #0
 8003cfe:	f000 80d8 	beq.w	8003eb2 <_printf_i+0x1d2>
 8003d02:	2f58      	cmp	r7, #88	; 0x58
 8003d04:	f000 80a3 	beq.w	8003e4e <_printf_i+0x16e>
 8003d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d10:	e03a      	b.n	8003d88 <_printf_i+0xa8>
 8003d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d16:	2b15      	cmp	r3, #21
 8003d18:	d8f6      	bhi.n	8003d08 <_printf_i+0x28>
 8003d1a:	a001      	add	r0, pc, #4	; (adr r0, 8003d20 <_printf_i+0x40>)
 8003d1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d20:	08003d79 	.word	0x08003d79
 8003d24:	08003d8d 	.word	0x08003d8d
 8003d28:	08003d09 	.word	0x08003d09
 8003d2c:	08003d09 	.word	0x08003d09
 8003d30:	08003d09 	.word	0x08003d09
 8003d34:	08003d09 	.word	0x08003d09
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003d09 	.word	0x08003d09
 8003d40:	08003d09 	.word	0x08003d09
 8003d44:	08003d09 	.word	0x08003d09
 8003d48:	08003d09 	.word	0x08003d09
 8003d4c:	08003e99 	.word	0x08003e99
 8003d50:	08003dbd 	.word	0x08003dbd
 8003d54:	08003e7b 	.word	0x08003e7b
 8003d58:	08003d09 	.word	0x08003d09
 8003d5c:	08003d09 	.word	0x08003d09
 8003d60:	08003ebb 	.word	0x08003ebb
 8003d64:	08003d09 	.word	0x08003d09
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003d09 	.word	0x08003d09
 8003d70:	08003d09 	.word	0x08003d09
 8003d74:	08003e83 	.word	0x08003e83
 8003d78:	680b      	ldr	r3, [r1, #0]
 8003d7a:	1d1a      	adds	r2, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	600a      	str	r2, [r1, #0]
 8003d80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0a3      	b.n	8003ed4 <_printf_i+0x1f4>
 8003d8c:	6825      	ldr	r5, [r4, #0]
 8003d8e:	6808      	ldr	r0, [r1, #0]
 8003d90:	062e      	lsls	r6, r5, #24
 8003d92:	f100 0304 	add.w	r3, r0, #4
 8003d96:	d50a      	bpl.n	8003dae <_printf_i+0xce>
 8003d98:	6805      	ldr	r5, [r0, #0]
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	da03      	bge.n	8003da8 <_printf_i+0xc8>
 8003da0:	232d      	movs	r3, #45	; 0x2d
 8003da2:	426d      	negs	r5, r5
 8003da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da8:	485e      	ldr	r0, [pc, #376]	; (8003f24 <_printf_i+0x244>)
 8003daa:	230a      	movs	r3, #10
 8003dac:	e019      	b.n	8003de2 <_printf_i+0x102>
 8003dae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003db2:	6805      	ldr	r5, [r0, #0]
 8003db4:	600b      	str	r3, [r1, #0]
 8003db6:	bf18      	it	ne
 8003db8:	b22d      	sxthne	r5, r5
 8003dba:	e7ef      	b.n	8003d9c <_printf_i+0xbc>
 8003dbc:	680b      	ldr	r3, [r1, #0]
 8003dbe:	6825      	ldr	r5, [r4, #0]
 8003dc0:	1d18      	adds	r0, r3, #4
 8003dc2:	6008      	str	r0, [r1, #0]
 8003dc4:	0628      	lsls	r0, r5, #24
 8003dc6:	d501      	bpl.n	8003dcc <_printf_i+0xec>
 8003dc8:	681d      	ldr	r5, [r3, #0]
 8003dca:	e002      	b.n	8003dd2 <_printf_i+0xf2>
 8003dcc:	0669      	lsls	r1, r5, #25
 8003dce:	d5fb      	bpl.n	8003dc8 <_printf_i+0xe8>
 8003dd0:	881d      	ldrh	r5, [r3, #0]
 8003dd2:	4854      	ldr	r0, [pc, #336]	; (8003f24 <_printf_i+0x244>)
 8003dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2308      	moveq	r3, #8
 8003dda:	230a      	movne	r3, #10
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003de2:	6866      	ldr	r6, [r4, #4]
 8003de4:	60a6      	str	r6, [r4, #8]
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	bfa2      	ittt	ge
 8003dea:	6821      	ldrge	r1, [r4, #0]
 8003dec:	f021 0104 	bicge.w	r1, r1, #4
 8003df0:	6021      	strge	r1, [r4, #0]
 8003df2:	b90d      	cbnz	r5, 8003df8 <_printf_i+0x118>
 8003df4:	2e00      	cmp	r6, #0
 8003df6:	d04d      	beq.n	8003e94 <_printf_i+0x1b4>
 8003df8:	4616      	mov	r6, r2
 8003dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8003e02:	5dc7      	ldrb	r7, [r0, r7]
 8003e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e08:	462f      	mov	r7, r5
 8003e0a:	42bb      	cmp	r3, r7
 8003e0c:	460d      	mov	r5, r1
 8003e0e:	d9f4      	bls.n	8003dfa <_printf_i+0x11a>
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d10b      	bne.n	8003e2c <_printf_i+0x14c>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	07df      	lsls	r7, r3, #31
 8003e18:	d508      	bpl.n	8003e2c <_printf_i+0x14c>
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	6861      	ldr	r1, [r4, #4]
 8003e1e:	4299      	cmp	r1, r3
 8003e20:	bfde      	ittt	le
 8003e22:	2330      	movle	r3, #48	; 0x30
 8003e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e2c:	1b92      	subs	r2, r2, r6
 8003e2e:	6122      	str	r2, [r4, #16]
 8003e30:	f8cd a000 	str.w	sl, [sp]
 8003e34:	464b      	mov	r3, r9
 8003e36:	aa03      	add	r2, sp, #12
 8003e38:	4621      	mov	r1, r4
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	f7ff fee2 	bl	8003c04 <_printf_common>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d14c      	bne.n	8003ede <_printf_i+0x1fe>
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	b004      	add	sp, #16
 8003e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4e:	4835      	ldr	r0, [pc, #212]	; (8003f24 <_printf_i+0x244>)
 8003e50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	680e      	ldr	r6, [r1, #0]
 8003e58:	061f      	lsls	r7, r3, #24
 8003e5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e5e:	600e      	str	r6, [r1, #0]
 8003e60:	d514      	bpl.n	8003e8c <_printf_i+0x1ac>
 8003e62:	07d9      	lsls	r1, r3, #31
 8003e64:	bf44      	itt	mi
 8003e66:	f043 0320 	orrmi.w	r3, r3, #32
 8003e6a:	6023      	strmi	r3, [r4, #0]
 8003e6c:	b91d      	cbnz	r5, 8003e76 <_printf_i+0x196>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f023 0320 	bic.w	r3, r3, #32
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	2310      	movs	r3, #16
 8003e78:	e7b0      	b.n	8003ddc <_printf_i+0xfc>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	f043 0320 	orr.w	r3, r3, #32
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	2378      	movs	r3, #120	; 0x78
 8003e84:	4828      	ldr	r0, [pc, #160]	; (8003f28 <_printf_i+0x248>)
 8003e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e8a:	e7e3      	b.n	8003e54 <_printf_i+0x174>
 8003e8c:	065e      	lsls	r6, r3, #25
 8003e8e:	bf48      	it	mi
 8003e90:	b2ad      	uxthmi	r5, r5
 8003e92:	e7e6      	b.n	8003e62 <_printf_i+0x182>
 8003e94:	4616      	mov	r6, r2
 8003e96:	e7bb      	b.n	8003e10 <_printf_i+0x130>
 8003e98:	680b      	ldr	r3, [r1, #0]
 8003e9a:	6826      	ldr	r6, [r4, #0]
 8003e9c:	6960      	ldr	r0, [r4, #20]
 8003e9e:	1d1d      	adds	r5, r3, #4
 8003ea0:	600d      	str	r5, [r1, #0]
 8003ea2:	0635      	lsls	r5, r6, #24
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	d501      	bpl.n	8003eac <_printf_i+0x1cc>
 8003ea8:	6018      	str	r0, [r3, #0]
 8003eaa:	e002      	b.n	8003eb2 <_printf_i+0x1d2>
 8003eac:	0671      	lsls	r1, r6, #25
 8003eae:	d5fb      	bpl.n	8003ea8 <_printf_i+0x1c8>
 8003eb0:	8018      	strh	r0, [r3, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6123      	str	r3, [r4, #16]
 8003eb6:	4616      	mov	r6, r2
 8003eb8:	e7ba      	b.n	8003e30 <_printf_i+0x150>
 8003eba:	680b      	ldr	r3, [r1, #0]
 8003ebc:	1d1a      	adds	r2, r3, #4
 8003ebe:	600a      	str	r2, [r1, #0]
 8003ec0:	681e      	ldr	r6, [r3, #0]
 8003ec2:	6862      	ldr	r2, [r4, #4]
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7fc f9a2 	bl	8000210 <memchr>
 8003ecc:	b108      	cbz	r0, 8003ed2 <_printf_i+0x1f2>
 8003ece:	1b80      	subs	r0, r0, r6
 8003ed0:	6060      	str	r0, [r4, #4]
 8003ed2:	6863      	ldr	r3, [r4, #4]
 8003ed4:	6123      	str	r3, [r4, #16]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003edc:	e7a8      	b.n	8003e30 <_printf_i+0x150>
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	47d0      	blx	sl
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d0ab      	beq.n	8003e44 <_printf_i+0x164>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	079b      	lsls	r3, r3, #30
 8003ef0:	d413      	bmi.n	8003f1a <_printf_i+0x23a>
 8003ef2:	68e0      	ldr	r0, [r4, #12]
 8003ef4:	9b03      	ldr	r3, [sp, #12]
 8003ef6:	4298      	cmp	r0, r3
 8003ef8:	bfb8      	it	lt
 8003efa:	4618      	movlt	r0, r3
 8003efc:	e7a4      	b.n	8003e48 <_printf_i+0x168>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4632      	mov	r2, r6
 8003f02:	4649      	mov	r1, r9
 8003f04:	4640      	mov	r0, r8
 8003f06:	47d0      	blx	sl
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d09b      	beq.n	8003e44 <_printf_i+0x164>
 8003f0c:	3501      	adds	r5, #1
 8003f0e:	68e3      	ldr	r3, [r4, #12]
 8003f10:	9903      	ldr	r1, [sp, #12]
 8003f12:	1a5b      	subs	r3, r3, r1
 8003f14:	42ab      	cmp	r3, r5
 8003f16:	dcf2      	bgt.n	8003efe <_printf_i+0x21e>
 8003f18:	e7eb      	b.n	8003ef2 <_printf_i+0x212>
 8003f1a:	2500      	movs	r5, #0
 8003f1c:	f104 0619 	add.w	r6, r4, #25
 8003f20:	e7f5      	b.n	8003f0e <_printf_i+0x22e>
 8003f22:	bf00      	nop
 8003f24:	08005615 	.word	0x08005615
 8003f28:	08005626 	.word	0x08005626

08003f2c <__retarget_lock_acquire_recursive>:
 8003f2c:	4770      	bx	lr

08003f2e <__retarget_lock_release_recursive>:
 8003f2e:	4770      	bx	lr

08003f30 <memcpy>:
 8003f30:	440a      	add	r2, r1
 8003f32:	4291      	cmp	r1, r2
 8003f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f38:	d100      	bne.n	8003f3c <memcpy+0xc>
 8003f3a:	4770      	bx	lr
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f46:	4291      	cmp	r1, r2
 8003f48:	d1f9      	bne.n	8003f3e <memcpy+0xe>
 8003f4a:	bd10      	pop	{r4, pc}

08003f4c <memmove>:
 8003f4c:	4288      	cmp	r0, r1
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	eb01 0402 	add.w	r4, r1, r2
 8003f54:	d902      	bls.n	8003f5c <memmove+0x10>
 8003f56:	4284      	cmp	r4, r0
 8003f58:	4623      	mov	r3, r4
 8003f5a:	d807      	bhi.n	8003f6c <memmove+0x20>
 8003f5c:	1e43      	subs	r3, r0, #1
 8003f5e:	42a1      	cmp	r1, r4
 8003f60:	d008      	beq.n	8003f74 <memmove+0x28>
 8003f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f6a:	e7f8      	b.n	8003f5e <memmove+0x12>
 8003f6c:	4402      	add	r2, r0
 8003f6e:	4601      	mov	r1, r0
 8003f70:	428a      	cmp	r2, r1
 8003f72:	d100      	bne.n	8003f76 <memmove+0x2a>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f7e:	e7f7      	b.n	8003f70 <memmove+0x24>

08003f80 <_realloc_r>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	4607      	mov	r7, r0
 8003f84:	4614      	mov	r4, r2
 8003f86:	460e      	mov	r6, r1
 8003f88:	b921      	cbnz	r1, 8003f94 <_realloc_r+0x14>
 8003f8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f8e:	4611      	mov	r1, r2
 8003f90:	f7ff bc46 	b.w	8003820 <_malloc_r>
 8003f94:	b922      	cbnz	r2, 8003fa0 <_realloc_r+0x20>
 8003f96:	f7ff fbf3 	bl	8003780 <_free_r>
 8003f9a:	4625      	mov	r5, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	f000 f814 	bl	8003fcc <_malloc_usable_size_r>
 8003fa4:	42a0      	cmp	r0, r4
 8003fa6:	d20f      	bcs.n	8003fc8 <_realloc_r+0x48>
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4638      	mov	r0, r7
 8003fac:	f7ff fc38 	bl	8003820 <_malloc_r>
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d0f2      	beq.n	8003f9c <_realloc_r+0x1c>
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4622      	mov	r2, r4
 8003fba:	f7ff ffb9 	bl	8003f30 <memcpy>
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f7ff fbdd 	bl	8003780 <_free_r>
 8003fc6:	e7e9      	b.n	8003f9c <_realloc_r+0x1c>
 8003fc8:	4635      	mov	r5, r6
 8003fca:	e7e7      	b.n	8003f9c <_realloc_r+0x1c>

08003fcc <_malloc_usable_size_r>:
 8003fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd0:	1f18      	subs	r0, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bfbc      	itt	lt
 8003fd6:	580b      	ldrlt	r3, [r1, r0]
 8003fd8:	18c0      	addlt	r0, r0, r3
 8003fda:	4770      	bx	lr
 8003fdc:	0000      	movs	r0, r0
	...

08003fe0 <log10>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	ed2d 8b02 	vpush	{d8}
 8003fe6:	ec55 4b10 	vmov	r4, r5, d0
 8003fea:	f000 f8f1 	bl	80041d0 <__ieee754_log10>
 8003fee:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <log10+0x88>)
 8003ff0:	eeb0 8a40 	vmov.f32	s16, s0
 8003ff4:	eef0 8a60 	vmov.f32	s17, s1
 8003ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	d01a      	beq.n	8004036 <log10+0x56>
 8004000:	4622      	mov	r2, r4
 8004002:	462b      	mov	r3, r5
 8004004:	4620      	mov	r0, r4
 8004006:	4629      	mov	r1, r5
 8004008:	f7fc fda8 	bl	8000b5c <__aeabi_dcmpun>
 800400c:	b998      	cbnz	r0, 8004036 <log10+0x56>
 800400e:	2200      	movs	r2, #0
 8004010:	2300      	movs	r3, #0
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	f7fc fd83 	bl	8000b20 <__aeabi_dcmple>
 800401a:	b160      	cbz	r0, 8004036 <log10+0x56>
 800401c:	2200      	movs	r2, #0
 800401e:	2300      	movs	r3, #0
 8004020:	4620      	mov	r0, r4
 8004022:	4629      	mov	r1, r5
 8004024:	f7fc fd68 	bl	8000af8 <__aeabi_dcmpeq>
 8004028:	b160      	cbz	r0, 8004044 <log10+0x64>
 800402a:	f7ff fb6f 	bl	800370c <__errno>
 800402e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8004060 <log10+0x80>
 8004032:	2322      	movs	r3, #34	; 0x22
 8004034:	6003      	str	r3, [r0, #0]
 8004036:	eeb0 0a48 	vmov.f32	s0, s16
 800403a:	eef0 0a68 	vmov.f32	s1, s17
 800403e:	ecbd 8b02 	vpop	{d8}
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	f7ff fb62 	bl	800370c <__errno>
 8004048:	ecbd 8b02 	vpop	{d8}
 800404c:	2321      	movs	r3, #33	; 0x21
 800404e:	6003      	str	r3, [r0, #0]
 8004050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004054:	4805      	ldr	r0, [pc, #20]	; (800406c <log10+0x8c>)
 8004056:	f000 bf33 	b.w	8004ec0 <nan>
 800405a:	bf00      	nop
 800405c:	f3af 8000 	nop.w
 8004060:	00000000 	.word	0x00000000
 8004064:	fff00000 	.word	0xfff00000
 8004068:	200000a4 	.word	0x200000a4
 800406c:	08005609 	.word	0x08005609

08004070 <pow>:
 8004070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004074:	ec59 8b10 	vmov	r8, r9, d0
 8004078:	ec57 6b11 	vmov	r6, r7, d1
 800407c:	f000 f934 	bl	80042e8 <__ieee754_pow>
 8004080:	4b4e      	ldr	r3, [pc, #312]	; (80041bc <pow+0x14c>)
 8004082:	f993 3000 	ldrsb.w	r3, [r3]
 8004086:	3301      	adds	r3, #1
 8004088:	ec55 4b10 	vmov	r4, r5, d0
 800408c:	d015      	beq.n	80040ba <pow+0x4a>
 800408e:	4632      	mov	r2, r6
 8004090:	463b      	mov	r3, r7
 8004092:	4630      	mov	r0, r6
 8004094:	4639      	mov	r1, r7
 8004096:	f7fc fd61 	bl	8000b5c <__aeabi_dcmpun>
 800409a:	b970      	cbnz	r0, 80040ba <pow+0x4a>
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	4640      	mov	r0, r8
 80040a2:	4649      	mov	r1, r9
 80040a4:	f7fc fd5a 	bl	8000b5c <__aeabi_dcmpun>
 80040a8:	2200      	movs	r2, #0
 80040aa:	2300      	movs	r3, #0
 80040ac:	b148      	cbz	r0, 80040c2 <pow+0x52>
 80040ae:	4630      	mov	r0, r6
 80040b0:	4639      	mov	r1, r7
 80040b2:	f7fc fd21 	bl	8000af8 <__aeabi_dcmpeq>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d17d      	bne.n	80041b6 <pow+0x146>
 80040ba:	ec45 4b10 	vmov	d0, r4, r5
 80040be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	f7fc fd17 	bl	8000af8 <__aeabi_dcmpeq>
 80040ca:	b1e0      	cbz	r0, 8004106 <pow+0x96>
 80040cc:	2200      	movs	r2, #0
 80040ce:	2300      	movs	r3, #0
 80040d0:	4630      	mov	r0, r6
 80040d2:	4639      	mov	r1, r7
 80040d4:	f7fc fd10 	bl	8000af8 <__aeabi_dcmpeq>
 80040d8:	2800      	cmp	r0, #0
 80040da:	d16c      	bne.n	80041b6 <pow+0x146>
 80040dc:	ec47 6b10 	vmov	d0, r6, r7
 80040e0:	f000 fee1 	bl	8004ea6 <finite>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d0e8      	beq.n	80040ba <pow+0x4a>
 80040e8:	2200      	movs	r2, #0
 80040ea:	2300      	movs	r3, #0
 80040ec:	4630      	mov	r0, r6
 80040ee:	4639      	mov	r1, r7
 80040f0:	f7fc fd0c 	bl	8000b0c <__aeabi_dcmplt>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d0e0      	beq.n	80040ba <pow+0x4a>
 80040f8:	f7ff fb08 	bl	800370c <__errno>
 80040fc:	2321      	movs	r3, #33	; 0x21
 80040fe:	6003      	str	r3, [r0, #0]
 8004100:	2400      	movs	r4, #0
 8004102:	4d2f      	ldr	r5, [pc, #188]	; (80041c0 <pow+0x150>)
 8004104:	e7d9      	b.n	80040ba <pow+0x4a>
 8004106:	ec45 4b10 	vmov	d0, r4, r5
 800410a:	f000 fecc 	bl	8004ea6 <finite>
 800410e:	bbb8      	cbnz	r0, 8004180 <pow+0x110>
 8004110:	ec49 8b10 	vmov	d0, r8, r9
 8004114:	f000 fec7 	bl	8004ea6 <finite>
 8004118:	b390      	cbz	r0, 8004180 <pow+0x110>
 800411a:	ec47 6b10 	vmov	d0, r6, r7
 800411e:	f000 fec2 	bl	8004ea6 <finite>
 8004122:	b368      	cbz	r0, 8004180 <pow+0x110>
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	4620      	mov	r0, r4
 800412a:	4629      	mov	r1, r5
 800412c:	f7fc fd16 	bl	8000b5c <__aeabi_dcmpun>
 8004130:	b160      	cbz	r0, 800414c <pow+0xdc>
 8004132:	f7ff faeb 	bl	800370c <__errno>
 8004136:	2321      	movs	r3, #33	; 0x21
 8004138:	6003      	str	r3, [r0, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	2300      	movs	r3, #0
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	f7fc fb9b 	bl	800087c <__aeabi_ddiv>
 8004146:	4604      	mov	r4, r0
 8004148:	460d      	mov	r5, r1
 800414a:	e7b6      	b.n	80040ba <pow+0x4a>
 800414c:	f7ff fade 	bl	800370c <__errno>
 8004150:	2322      	movs	r3, #34	; 0x22
 8004152:	6003      	str	r3, [r0, #0]
 8004154:	2200      	movs	r2, #0
 8004156:	2300      	movs	r3, #0
 8004158:	4640      	mov	r0, r8
 800415a:	4649      	mov	r1, r9
 800415c:	f7fc fcd6 	bl	8000b0c <__aeabi_dcmplt>
 8004160:	2400      	movs	r4, #0
 8004162:	b158      	cbz	r0, 800417c <pow+0x10c>
 8004164:	ec47 6b10 	vmov	d0, r6, r7
 8004168:	f000 feb2 	bl	8004ed0 <rint>
 800416c:	4632      	mov	r2, r6
 800416e:	ec51 0b10 	vmov	r0, r1, d0
 8004172:	463b      	mov	r3, r7
 8004174:	f7fc fcc0 	bl	8000af8 <__aeabi_dcmpeq>
 8004178:	2800      	cmp	r0, #0
 800417a:	d0c2      	beq.n	8004102 <pow+0x92>
 800417c:	4d11      	ldr	r5, [pc, #68]	; (80041c4 <pow+0x154>)
 800417e:	e79c      	b.n	80040ba <pow+0x4a>
 8004180:	2200      	movs	r2, #0
 8004182:	2300      	movs	r3, #0
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc fcb6 	bl	8000af8 <__aeabi_dcmpeq>
 800418c:	2800      	cmp	r0, #0
 800418e:	d094      	beq.n	80040ba <pow+0x4a>
 8004190:	ec49 8b10 	vmov	d0, r8, r9
 8004194:	f000 fe87 	bl	8004ea6 <finite>
 8004198:	2800      	cmp	r0, #0
 800419a:	d08e      	beq.n	80040ba <pow+0x4a>
 800419c:	ec47 6b10 	vmov	d0, r6, r7
 80041a0:	f000 fe81 	bl	8004ea6 <finite>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d088      	beq.n	80040ba <pow+0x4a>
 80041a8:	f7ff fab0 	bl	800370c <__errno>
 80041ac:	2322      	movs	r3, #34	; 0x22
 80041ae:	6003      	str	r3, [r0, #0]
 80041b0:	2400      	movs	r4, #0
 80041b2:	2500      	movs	r5, #0
 80041b4:	e781      	b.n	80040ba <pow+0x4a>
 80041b6:	4d04      	ldr	r5, [pc, #16]	; (80041c8 <pow+0x158>)
 80041b8:	2400      	movs	r4, #0
 80041ba:	e77e      	b.n	80040ba <pow+0x4a>
 80041bc:	200000a4 	.word	0x200000a4
 80041c0:	fff00000 	.word	0xfff00000
 80041c4:	7ff00000 	.word	0x7ff00000
 80041c8:	3ff00000 	.word	0x3ff00000
 80041cc:	00000000 	.word	0x00000000

080041d0 <__ieee754_log10>:
 80041d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d4:	ec55 4b10 	vmov	r4, r5, d0
 80041d8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80041dc:	462b      	mov	r3, r5
 80041de:	da2f      	bge.n	8004240 <__ieee754_log10+0x70>
 80041e0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80041e4:	4322      	orrs	r2, r4
 80041e6:	d109      	bne.n	80041fc <__ieee754_log10+0x2c>
 80041e8:	493b      	ldr	r1, [pc, #236]	; (80042d8 <__ieee754_log10+0x108>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	2300      	movs	r3, #0
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7fc fb44 	bl	800087c <__aeabi_ddiv>
 80041f4:	ec41 0b10 	vmov	d0, r0, r1
 80041f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	da09      	bge.n	8004214 <__ieee754_log10+0x44>
 8004200:	ee10 2a10 	vmov	r2, s0
 8004204:	ee10 0a10 	vmov	r0, s0
 8004208:	4629      	mov	r1, r5
 800420a:	f7fc f855 	bl	80002b8 <__aeabi_dsub>
 800420e:	2200      	movs	r2, #0
 8004210:	2300      	movs	r3, #0
 8004212:	e7ed      	b.n	80041f0 <__ieee754_log10+0x20>
 8004214:	4b31      	ldr	r3, [pc, #196]	; (80042dc <__ieee754_log10+0x10c>)
 8004216:	2200      	movs	r2, #0
 8004218:	4629      	mov	r1, r5
 800421a:	ee10 0a10 	vmov	r0, s0
 800421e:	f7fc fa03 	bl	8000628 <__aeabi_dmul>
 8004222:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8004226:	4604      	mov	r4, r0
 8004228:	460d      	mov	r5, r1
 800422a:	460b      	mov	r3, r1
 800422c:	492c      	ldr	r1, [pc, #176]	; (80042e0 <__ieee754_log10+0x110>)
 800422e:	428b      	cmp	r3, r1
 8004230:	dd08      	ble.n	8004244 <__ieee754_log10+0x74>
 8004232:	4622      	mov	r2, r4
 8004234:	462b      	mov	r3, r5
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f7fc f83f 	bl	80002bc <__adddf3>
 800423e:	e7d9      	b.n	80041f4 <__ieee754_log10+0x24>
 8004240:	2200      	movs	r2, #0
 8004242:	e7f3      	b.n	800422c <__ieee754_log10+0x5c>
 8004244:	1518      	asrs	r0, r3, #20
 8004246:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800424a:	4410      	add	r0, r2
 800424c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8004250:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004254:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8004258:	f7fc f97c 	bl	8000554 <__aeabi_i2d>
 800425c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8004260:	3303      	adds	r3, #3
 8004262:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8004266:	ec45 4b10 	vmov	d0, r4, r5
 800426a:	4606      	mov	r6, r0
 800426c:	460f      	mov	r7, r1
 800426e:	f000 ff43 	bl	80050f8 <__ieee754_log>
 8004272:	a313      	add	r3, pc, #76	; (adr r3, 80042c0 <__ieee754_log10+0xf0>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	4630      	mov	r0, r6
 800427a:	4639      	mov	r1, r7
 800427c:	ec59 8b10 	vmov	r8, r9, d0
 8004280:	f7fc f9d2 	bl	8000628 <__aeabi_dmul>
 8004284:	a310      	add	r3, pc, #64	; (adr r3, 80042c8 <__ieee754_log10+0xf8>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	4604      	mov	r4, r0
 800428c:	460d      	mov	r5, r1
 800428e:	4640      	mov	r0, r8
 8004290:	4649      	mov	r1, r9
 8004292:	f7fc f9c9 	bl	8000628 <__aeabi_dmul>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4620      	mov	r0, r4
 800429c:	4629      	mov	r1, r5
 800429e:	f7fc f80d 	bl	80002bc <__adddf3>
 80042a2:	a30b      	add	r3, pc, #44	; (adr r3, 80042d0 <__ieee754_log10+0x100>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	4604      	mov	r4, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	4630      	mov	r0, r6
 80042ae:	4639      	mov	r1, r7
 80042b0:	f7fc f9ba 	bl	8000628 <__aeabi_dmul>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4620      	mov	r0, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	e7bd      	b.n	800423a <__ieee754_log10+0x6a>
 80042be:	bf00      	nop
 80042c0:	11f12b36 	.word	0x11f12b36
 80042c4:	3d59fef3 	.word	0x3d59fef3
 80042c8:	1526e50e 	.word	0x1526e50e
 80042cc:	3fdbcb7b 	.word	0x3fdbcb7b
 80042d0:	509f6000 	.word	0x509f6000
 80042d4:	3fd34413 	.word	0x3fd34413
 80042d8:	c3500000 	.word	0xc3500000
 80042dc:	43500000 	.word	0x43500000
 80042e0:	7fefffff 	.word	0x7fefffff
 80042e4:	00000000 	.word	0x00000000

080042e8 <__ieee754_pow>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	ed2d 8b06 	vpush	{d8-d10}
 80042f0:	b08d      	sub	sp, #52	; 0x34
 80042f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80042f6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80042fa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80042fe:	ea56 0100 	orrs.w	r1, r6, r0
 8004302:	ec53 2b10 	vmov	r2, r3, d0
 8004306:	f000 84d1 	beq.w	8004cac <__ieee754_pow+0x9c4>
 800430a:	497f      	ldr	r1, [pc, #508]	; (8004508 <__ieee754_pow+0x220>)
 800430c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004310:	428c      	cmp	r4, r1
 8004312:	ee10 8a10 	vmov	r8, s0
 8004316:	4699      	mov	r9, r3
 8004318:	dc09      	bgt.n	800432e <__ieee754_pow+0x46>
 800431a:	d103      	bne.n	8004324 <__ieee754_pow+0x3c>
 800431c:	b97a      	cbnz	r2, 800433e <__ieee754_pow+0x56>
 800431e:	42a6      	cmp	r6, r4
 8004320:	dd02      	ble.n	8004328 <__ieee754_pow+0x40>
 8004322:	e00c      	b.n	800433e <__ieee754_pow+0x56>
 8004324:	428e      	cmp	r6, r1
 8004326:	dc02      	bgt.n	800432e <__ieee754_pow+0x46>
 8004328:	428e      	cmp	r6, r1
 800432a:	d110      	bne.n	800434e <__ieee754_pow+0x66>
 800432c:	b178      	cbz	r0, 800434e <__ieee754_pow+0x66>
 800432e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004332:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004336:	ea54 0308 	orrs.w	r3, r4, r8
 800433a:	f000 84b7 	beq.w	8004cac <__ieee754_pow+0x9c4>
 800433e:	4873      	ldr	r0, [pc, #460]	; (800450c <__ieee754_pow+0x224>)
 8004340:	b00d      	add	sp, #52	; 0x34
 8004342:	ecbd 8b06 	vpop	{d8-d10}
 8004346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	f000 bdb9 	b.w	8004ec0 <nan>
 800434e:	f1b9 0f00 	cmp.w	r9, #0
 8004352:	da36      	bge.n	80043c2 <__ieee754_pow+0xda>
 8004354:	496e      	ldr	r1, [pc, #440]	; (8004510 <__ieee754_pow+0x228>)
 8004356:	428e      	cmp	r6, r1
 8004358:	dc51      	bgt.n	80043fe <__ieee754_pow+0x116>
 800435a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800435e:	428e      	cmp	r6, r1
 8004360:	f340 84af 	ble.w	8004cc2 <__ieee754_pow+0x9da>
 8004364:	1531      	asrs	r1, r6, #20
 8004366:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800436a:	2914      	cmp	r1, #20
 800436c:	dd0f      	ble.n	800438e <__ieee754_pow+0xa6>
 800436e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004372:	fa20 fc01 	lsr.w	ip, r0, r1
 8004376:	fa0c f101 	lsl.w	r1, ip, r1
 800437a:	4281      	cmp	r1, r0
 800437c:	f040 84a1 	bne.w	8004cc2 <__ieee754_pow+0x9da>
 8004380:	f00c 0c01 	and.w	ip, ip, #1
 8004384:	f1cc 0102 	rsb	r1, ip, #2
 8004388:	9100      	str	r1, [sp, #0]
 800438a:	b180      	cbz	r0, 80043ae <__ieee754_pow+0xc6>
 800438c:	e059      	b.n	8004442 <__ieee754_pow+0x15a>
 800438e:	2800      	cmp	r0, #0
 8004390:	d155      	bne.n	800443e <__ieee754_pow+0x156>
 8004392:	f1c1 0114 	rsb	r1, r1, #20
 8004396:	fa46 fc01 	asr.w	ip, r6, r1
 800439a:	fa0c f101 	lsl.w	r1, ip, r1
 800439e:	42b1      	cmp	r1, r6
 80043a0:	f040 848c 	bne.w	8004cbc <__ieee754_pow+0x9d4>
 80043a4:	f00c 0c01 	and.w	ip, ip, #1
 80043a8:	f1cc 0102 	rsb	r1, ip, #2
 80043ac:	9100      	str	r1, [sp, #0]
 80043ae:	4959      	ldr	r1, [pc, #356]	; (8004514 <__ieee754_pow+0x22c>)
 80043b0:	428e      	cmp	r6, r1
 80043b2:	d12d      	bne.n	8004410 <__ieee754_pow+0x128>
 80043b4:	2f00      	cmp	r7, #0
 80043b6:	da79      	bge.n	80044ac <__ieee754_pow+0x1c4>
 80043b8:	4956      	ldr	r1, [pc, #344]	; (8004514 <__ieee754_pow+0x22c>)
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7fc fa5e 	bl	800087c <__aeabi_ddiv>
 80043c0:	e016      	b.n	80043f0 <__ieee754_pow+0x108>
 80043c2:	2100      	movs	r1, #0
 80043c4:	9100      	str	r1, [sp, #0]
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d13b      	bne.n	8004442 <__ieee754_pow+0x15a>
 80043ca:	494f      	ldr	r1, [pc, #316]	; (8004508 <__ieee754_pow+0x220>)
 80043cc:	428e      	cmp	r6, r1
 80043ce:	d1ee      	bne.n	80043ae <__ieee754_pow+0xc6>
 80043d0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80043d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80043d8:	ea53 0308 	orrs.w	r3, r3, r8
 80043dc:	f000 8466 	beq.w	8004cac <__ieee754_pow+0x9c4>
 80043e0:	4b4d      	ldr	r3, [pc, #308]	; (8004518 <__ieee754_pow+0x230>)
 80043e2:	429c      	cmp	r4, r3
 80043e4:	dd0d      	ble.n	8004402 <__ieee754_pow+0x11a>
 80043e6:	2f00      	cmp	r7, #0
 80043e8:	f280 8464 	bge.w	8004cb4 <__ieee754_pow+0x9cc>
 80043ec:	2000      	movs	r0, #0
 80043ee:	2100      	movs	r1, #0
 80043f0:	ec41 0b10 	vmov	d0, r0, r1
 80043f4:	b00d      	add	sp, #52	; 0x34
 80043f6:	ecbd 8b06 	vpop	{d8-d10}
 80043fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fe:	2102      	movs	r1, #2
 8004400:	e7e0      	b.n	80043c4 <__ieee754_pow+0xdc>
 8004402:	2f00      	cmp	r7, #0
 8004404:	daf2      	bge.n	80043ec <__ieee754_pow+0x104>
 8004406:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800440a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800440e:	e7ef      	b.n	80043f0 <__ieee754_pow+0x108>
 8004410:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004414:	d104      	bne.n	8004420 <__ieee754_pow+0x138>
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	f7fc f905 	bl	8000628 <__aeabi_dmul>
 800441e:	e7e7      	b.n	80043f0 <__ieee754_pow+0x108>
 8004420:	493e      	ldr	r1, [pc, #248]	; (800451c <__ieee754_pow+0x234>)
 8004422:	428f      	cmp	r7, r1
 8004424:	d10d      	bne.n	8004442 <__ieee754_pow+0x15a>
 8004426:	f1b9 0f00 	cmp.w	r9, #0
 800442a:	db0a      	blt.n	8004442 <__ieee754_pow+0x15a>
 800442c:	ec43 2b10 	vmov	d0, r2, r3
 8004430:	b00d      	add	sp, #52	; 0x34
 8004432:	ecbd 8b06 	vpop	{d8-d10}
 8004436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f000 bc77 	b.w	8004d2c <__ieee754_sqrt>
 800443e:	2100      	movs	r1, #0
 8004440:	9100      	str	r1, [sp, #0]
 8004442:	ec43 2b10 	vmov	d0, r2, r3
 8004446:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800444a:	f000 fd23 	bl	8004e94 <fabs>
 800444e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004452:	ec51 0b10 	vmov	r0, r1, d0
 8004456:	f1b8 0f00 	cmp.w	r8, #0
 800445a:	d12a      	bne.n	80044b2 <__ieee754_pow+0x1ca>
 800445c:	b12c      	cbz	r4, 800446a <__ieee754_pow+0x182>
 800445e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004514 <__ieee754_pow+0x22c>
 8004462:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004466:	45e6      	cmp	lr, ip
 8004468:	d123      	bne.n	80044b2 <__ieee754_pow+0x1ca>
 800446a:	2f00      	cmp	r7, #0
 800446c:	da05      	bge.n	800447a <__ieee754_pow+0x192>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	2000      	movs	r0, #0
 8004474:	4927      	ldr	r1, [pc, #156]	; (8004514 <__ieee754_pow+0x22c>)
 8004476:	f7fc fa01 	bl	800087c <__aeabi_ddiv>
 800447a:	f1b9 0f00 	cmp.w	r9, #0
 800447e:	dab7      	bge.n	80043f0 <__ieee754_pow+0x108>
 8004480:	9b00      	ldr	r3, [sp, #0]
 8004482:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004486:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800448a:	4323      	orrs	r3, r4
 800448c:	d108      	bne.n	80044a0 <__ieee754_pow+0x1b8>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	f7fb ff0f 	bl	80002b8 <__aeabi_dsub>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	e78d      	b.n	80043bc <__ieee754_pow+0xd4>
 80044a0:	9b00      	ldr	r3, [sp, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d1a4      	bne.n	80043f0 <__ieee754_pow+0x108>
 80044a6:	4602      	mov	r2, r0
 80044a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	e79e      	b.n	80043f0 <__ieee754_pow+0x108>
 80044b2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80044b6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80044ba:	950a      	str	r5, [sp, #40]	; 0x28
 80044bc:	9d00      	ldr	r5, [sp, #0]
 80044be:	46ac      	mov	ip, r5
 80044c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80044c2:	ea5c 0505 	orrs.w	r5, ip, r5
 80044c6:	d0e4      	beq.n	8004492 <__ieee754_pow+0x1aa>
 80044c8:	4b15      	ldr	r3, [pc, #84]	; (8004520 <__ieee754_pow+0x238>)
 80044ca:	429e      	cmp	r6, r3
 80044cc:	f340 80fc 	ble.w	80046c8 <__ieee754_pow+0x3e0>
 80044d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80044d4:	429e      	cmp	r6, r3
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <__ieee754_pow+0x230>)
 80044d8:	dd07      	ble.n	80044ea <__ieee754_pow+0x202>
 80044da:	429c      	cmp	r4, r3
 80044dc:	dc0a      	bgt.n	80044f4 <__ieee754_pow+0x20c>
 80044de:	2f00      	cmp	r7, #0
 80044e0:	da84      	bge.n	80043ec <__ieee754_pow+0x104>
 80044e2:	a307      	add	r3, pc, #28	; (adr r3, 8004500 <__ieee754_pow+0x218>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	e795      	b.n	8004416 <__ieee754_pow+0x12e>
 80044ea:	429c      	cmp	r4, r3
 80044ec:	dbf7      	blt.n	80044de <__ieee754_pow+0x1f6>
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <__ieee754_pow+0x22c>)
 80044f0:	429c      	cmp	r4, r3
 80044f2:	dd17      	ble.n	8004524 <__ieee754_pow+0x23c>
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	dcf4      	bgt.n	80044e2 <__ieee754_pow+0x1fa>
 80044f8:	e778      	b.n	80043ec <__ieee754_pow+0x104>
 80044fa:	bf00      	nop
 80044fc:	f3af 8000 	nop.w
 8004500:	8800759c 	.word	0x8800759c
 8004504:	7e37e43c 	.word	0x7e37e43c
 8004508:	7ff00000 	.word	0x7ff00000
 800450c:	08005609 	.word	0x08005609
 8004510:	433fffff 	.word	0x433fffff
 8004514:	3ff00000 	.word	0x3ff00000
 8004518:	3fefffff 	.word	0x3fefffff
 800451c:	3fe00000 	.word	0x3fe00000
 8004520:	41e00000 	.word	0x41e00000
 8004524:	4b64      	ldr	r3, [pc, #400]	; (80046b8 <__ieee754_pow+0x3d0>)
 8004526:	2200      	movs	r2, #0
 8004528:	f7fb fec6 	bl	80002b8 <__aeabi_dsub>
 800452c:	a356      	add	r3, pc, #344	; (adr r3, 8004688 <__ieee754_pow+0x3a0>)
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	4604      	mov	r4, r0
 8004534:	460d      	mov	r5, r1
 8004536:	f7fc f877 	bl	8000628 <__aeabi_dmul>
 800453a:	a355      	add	r3, pc, #340	; (adr r3, 8004690 <__ieee754_pow+0x3a8>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	4606      	mov	r6, r0
 8004542:	460f      	mov	r7, r1
 8004544:	4620      	mov	r0, r4
 8004546:	4629      	mov	r1, r5
 8004548:	f7fc f86e 	bl	8000628 <__aeabi_dmul>
 800454c:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <__ieee754_pow+0x3d4>)
 800454e:	4682      	mov	sl, r0
 8004550:	468b      	mov	fp, r1
 8004552:	2200      	movs	r2, #0
 8004554:	4620      	mov	r0, r4
 8004556:	4629      	mov	r1, r5
 8004558:	f7fc f866 	bl	8000628 <__aeabi_dmul>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	a14d      	add	r1, pc, #308	; (adr r1, 8004698 <__ieee754_pow+0x3b0>)
 8004562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004566:	f7fb fea7 	bl	80002b8 <__aeabi_dsub>
 800456a:	4622      	mov	r2, r4
 800456c:	462b      	mov	r3, r5
 800456e:	f7fc f85b 	bl	8000628 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	2000      	movs	r0, #0
 8004578:	4951      	ldr	r1, [pc, #324]	; (80046c0 <__ieee754_pow+0x3d8>)
 800457a:	f7fb fe9d 	bl	80002b8 <__aeabi_dsub>
 800457e:	4622      	mov	r2, r4
 8004580:	4680      	mov	r8, r0
 8004582:	4689      	mov	r9, r1
 8004584:	462b      	mov	r3, r5
 8004586:	4620      	mov	r0, r4
 8004588:	4629      	mov	r1, r5
 800458a:	f7fc f84d 	bl	8000628 <__aeabi_dmul>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4640      	mov	r0, r8
 8004594:	4649      	mov	r1, r9
 8004596:	f7fc f847 	bl	8000628 <__aeabi_dmul>
 800459a:	a341      	add	r3, pc, #260	; (adr r3, 80046a0 <__ieee754_pow+0x3b8>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f7fc f842 	bl	8000628 <__aeabi_dmul>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4650      	mov	r0, sl
 80045aa:	4659      	mov	r1, fp
 80045ac:	f7fb fe84 	bl	80002b8 <__aeabi_dsub>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4680      	mov	r8, r0
 80045b6:	4689      	mov	r9, r1
 80045b8:	4630      	mov	r0, r6
 80045ba:	4639      	mov	r1, r7
 80045bc:	f7fb fe7e 	bl	80002bc <__adddf3>
 80045c0:	2400      	movs	r4, #0
 80045c2:	4632      	mov	r2, r6
 80045c4:	463b      	mov	r3, r7
 80045c6:	4620      	mov	r0, r4
 80045c8:	460d      	mov	r5, r1
 80045ca:	f7fb fe75 	bl	80002b8 <__aeabi_dsub>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4640      	mov	r0, r8
 80045d4:	4649      	mov	r1, r9
 80045d6:	f7fb fe6f 	bl	80002b8 <__aeabi_dsub>
 80045da:	9b00      	ldr	r3, [sp, #0]
 80045dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	4682      	mov	sl, r0
 80045e4:	468b      	mov	fp, r1
 80045e6:	f040 81f1 	bne.w	80049cc <__ieee754_pow+0x6e4>
 80045ea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80046a8 <__ieee754_pow+0x3c0>
 80045ee:	eeb0 8a47 	vmov.f32	s16, s14
 80045f2:	eef0 8a67 	vmov.f32	s17, s15
 80045f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045fa:	2600      	movs	r6, #0
 80045fc:	4632      	mov	r2, r6
 80045fe:	463b      	mov	r3, r7
 8004600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004604:	f7fb fe58 	bl	80002b8 <__aeabi_dsub>
 8004608:	4622      	mov	r2, r4
 800460a:	462b      	mov	r3, r5
 800460c:	f7fc f80c 	bl	8000628 <__aeabi_dmul>
 8004610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004614:	4680      	mov	r8, r0
 8004616:	4689      	mov	r9, r1
 8004618:	4650      	mov	r0, sl
 800461a:	4659      	mov	r1, fp
 800461c:	f7fc f804 	bl	8000628 <__aeabi_dmul>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4640      	mov	r0, r8
 8004626:	4649      	mov	r1, r9
 8004628:	f7fb fe48 	bl	80002bc <__adddf3>
 800462c:	4632      	mov	r2, r6
 800462e:	463b      	mov	r3, r7
 8004630:	4680      	mov	r8, r0
 8004632:	4689      	mov	r9, r1
 8004634:	4620      	mov	r0, r4
 8004636:	4629      	mov	r1, r5
 8004638:	f7fb fff6 	bl	8000628 <__aeabi_dmul>
 800463c:	460b      	mov	r3, r1
 800463e:	4604      	mov	r4, r0
 8004640:	460d      	mov	r5, r1
 8004642:	4602      	mov	r2, r0
 8004644:	4649      	mov	r1, r9
 8004646:	4640      	mov	r0, r8
 8004648:	f7fb fe38 	bl	80002bc <__adddf3>
 800464c:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <__ieee754_pow+0x3dc>)
 800464e:	4299      	cmp	r1, r3
 8004650:	ec45 4b19 	vmov	d9, r4, r5
 8004654:	4606      	mov	r6, r0
 8004656:	460f      	mov	r7, r1
 8004658:	468b      	mov	fp, r1
 800465a:	f340 82fe 	ble.w	8004c5a <__ieee754_pow+0x972>
 800465e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004662:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004666:	4303      	orrs	r3, r0
 8004668:	f000 81f0 	beq.w	8004a4c <__ieee754_pow+0x764>
 800466c:	a310      	add	r3, pc, #64	; (adr r3, 80046b0 <__ieee754_pow+0x3c8>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	ec51 0b18 	vmov	r0, r1, d8
 8004676:	f7fb ffd7 	bl	8000628 <__aeabi_dmul>
 800467a:	a30d      	add	r3, pc, #52	; (adr r3, 80046b0 <__ieee754_pow+0x3c8>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	e6cb      	b.n	800441a <__ieee754_pow+0x132>
 8004682:	bf00      	nop
 8004684:	f3af 8000 	nop.w
 8004688:	60000000 	.word	0x60000000
 800468c:	3ff71547 	.word	0x3ff71547
 8004690:	f85ddf44 	.word	0xf85ddf44
 8004694:	3e54ae0b 	.word	0x3e54ae0b
 8004698:	55555555 	.word	0x55555555
 800469c:	3fd55555 	.word	0x3fd55555
 80046a0:	652b82fe 	.word	0x652b82fe
 80046a4:	3ff71547 	.word	0x3ff71547
 80046a8:	00000000 	.word	0x00000000
 80046ac:	bff00000 	.word	0xbff00000
 80046b0:	8800759c 	.word	0x8800759c
 80046b4:	7e37e43c 	.word	0x7e37e43c
 80046b8:	3ff00000 	.word	0x3ff00000
 80046bc:	3fd00000 	.word	0x3fd00000
 80046c0:	3fe00000 	.word	0x3fe00000
 80046c4:	408fffff 	.word	0x408fffff
 80046c8:	4bd7      	ldr	r3, [pc, #860]	; (8004a28 <__ieee754_pow+0x740>)
 80046ca:	ea03 0309 	and.w	r3, r3, r9
 80046ce:	2200      	movs	r2, #0
 80046d0:	b92b      	cbnz	r3, 80046de <__ieee754_pow+0x3f6>
 80046d2:	4bd6      	ldr	r3, [pc, #856]	; (8004a2c <__ieee754_pow+0x744>)
 80046d4:	f7fb ffa8 	bl	8000628 <__aeabi_dmul>
 80046d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80046dc:	460c      	mov	r4, r1
 80046de:	1523      	asrs	r3, r4, #20
 80046e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046e4:	4413      	add	r3, r2
 80046e6:	9309      	str	r3, [sp, #36]	; 0x24
 80046e8:	4bd1      	ldr	r3, [pc, #836]	; (8004a30 <__ieee754_pow+0x748>)
 80046ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80046ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80046f2:	429c      	cmp	r4, r3
 80046f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80046f8:	dd08      	ble.n	800470c <__ieee754_pow+0x424>
 80046fa:	4bce      	ldr	r3, [pc, #824]	; (8004a34 <__ieee754_pow+0x74c>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	f340 8163 	ble.w	80049c8 <__ieee754_pow+0x6e0>
 8004702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004704:	3301      	adds	r3, #1
 8004706:	9309      	str	r3, [sp, #36]	; 0x24
 8004708:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800470c:	2400      	movs	r4, #0
 800470e:	00e3      	lsls	r3, r4, #3
 8004710:	930b      	str	r3, [sp, #44]	; 0x2c
 8004712:	4bc9      	ldr	r3, [pc, #804]	; (8004a38 <__ieee754_pow+0x750>)
 8004714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004718:	ed93 7b00 	vldr	d7, [r3]
 800471c:	4629      	mov	r1, r5
 800471e:	ec53 2b17 	vmov	r2, r3, d7
 8004722:	eeb0 8a47 	vmov.f32	s16, s14
 8004726:	eef0 8a67 	vmov.f32	s17, s15
 800472a:	4682      	mov	sl, r0
 800472c:	f7fb fdc4 	bl	80002b8 <__aeabi_dsub>
 8004730:	4652      	mov	r2, sl
 8004732:	4606      	mov	r6, r0
 8004734:	460f      	mov	r7, r1
 8004736:	462b      	mov	r3, r5
 8004738:	ec51 0b18 	vmov	r0, r1, d8
 800473c:	f7fb fdbe 	bl	80002bc <__adddf3>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	2000      	movs	r0, #0
 8004746:	49bd      	ldr	r1, [pc, #756]	; (8004a3c <__ieee754_pow+0x754>)
 8004748:	f7fc f898 	bl	800087c <__aeabi_ddiv>
 800474c:	ec41 0b19 	vmov	d9, r0, r1
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4630      	mov	r0, r6
 8004756:	4639      	mov	r1, r7
 8004758:	f7fb ff66 	bl	8000628 <__aeabi_dmul>
 800475c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004760:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004764:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004768:	2300      	movs	r3, #0
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004770:	46ab      	mov	fp, r5
 8004772:	106d      	asrs	r5, r5, #1
 8004774:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004778:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800477c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004780:	2200      	movs	r2, #0
 8004782:	4640      	mov	r0, r8
 8004784:	4649      	mov	r1, r9
 8004786:	4614      	mov	r4, r2
 8004788:	461d      	mov	r5, r3
 800478a:	f7fb ff4d 	bl	8000628 <__aeabi_dmul>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4630      	mov	r0, r6
 8004794:	4639      	mov	r1, r7
 8004796:	f7fb fd8f 	bl	80002b8 <__aeabi_dsub>
 800479a:	ec53 2b18 	vmov	r2, r3, d8
 800479e:	4606      	mov	r6, r0
 80047a0:	460f      	mov	r7, r1
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7fb fd87 	bl	80002b8 <__aeabi_dsub>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4650      	mov	r0, sl
 80047b0:	4659      	mov	r1, fp
 80047b2:	f7fb fd81 	bl	80002b8 <__aeabi_dsub>
 80047b6:	4642      	mov	r2, r8
 80047b8:	464b      	mov	r3, r9
 80047ba:	f7fb ff35 	bl	8000628 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4630      	mov	r0, r6
 80047c4:	4639      	mov	r1, r7
 80047c6:	f7fb fd77 	bl	80002b8 <__aeabi_dsub>
 80047ca:	ec53 2b19 	vmov	r2, r3, d9
 80047ce:	f7fb ff2b 	bl	8000628 <__aeabi_dmul>
 80047d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047d6:	ec41 0b18 	vmov	d8, r0, r1
 80047da:	4610      	mov	r0, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	f7fb ff23 	bl	8000628 <__aeabi_dmul>
 80047e2:	a37d      	add	r3, pc, #500	; (adr r3, 80049d8 <__ieee754_pow+0x6f0>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	4604      	mov	r4, r0
 80047ea:	460d      	mov	r5, r1
 80047ec:	f7fb ff1c 	bl	8000628 <__aeabi_dmul>
 80047f0:	a37b      	add	r3, pc, #492	; (adr r3, 80049e0 <__ieee754_pow+0x6f8>)
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f7fb fd61 	bl	80002bc <__adddf3>
 80047fa:	4622      	mov	r2, r4
 80047fc:	462b      	mov	r3, r5
 80047fe:	f7fb ff13 	bl	8000628 <__aeabi_dmul>
 8004802:	a379      	add	r3, pc, #484	; (adr r3, 80049e8 <__ieee754_pow+0x700>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fb fd58 	bl	80002bc <__adddf3>
 800480c:	4622      	mov	r2, r4
 800480e:	462b      	mov	r3, r5
 8004810:	f7fb ff0a 	bl	8000628 <__aeabi_dmul>
 8004814:	a376      	add	r3, pc, #472	; (adr r3, 80049f0 <__ieee754_pow+0x708>)
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f7fb fd4f 	bl	80002bc <__adddf3>
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	f7fb ff01 	bl	8000628 <__aeabi_dmul>
 8004826:	a374      	add	r3, pc, #464	; (adr r3, 80049f8 <__ieee754_pow+0x710>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fd46 	bl	80002bc <__adddf3>
 8004830:	4622      	mov	r2, r4
 8004832:	462b      	mov	r3, r5
 8004834:	f7fb fef8 	bl	8000628 <__aeabi_dmul>
 8004838:	a371      	add	r3, pc, #452	; (adr r3, 8004a00 <__ieee754_pow+0x718>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fd3d 	bl	80002bc <__adddf3>
 8004842:	4622      	mov	r2, r4
 8004844:	4606      	mov	r6, r0
 8004846:	460f      	mov	r7, r1
 8004848:	462b      	mov	r3, r5
 800484a:	4620      	mov	r0, r4
 800484c:	4629      	mov	r1, r5
 800484e:	f7fb feeb 	bl	8000628 <__aeabi_dmul>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4630      	mov	r0, r6
 8004858:	4639      	mov	r1, r7
 800485a:	f7fb fee5 	bl	8000628 <__aeabi_dmul>
 800485e:	4642      	mov	r2, r8
 8004860:	4604      	mov	r4, r0
 8004862:	460d      	mov	r5, r1
 8004864:	464b      	mov	r3, r9
 8004866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800486a:	f7fb fd27 	bl	80002bc <__adddf3>
 800486e:	ec53 2b18 	vmov	r2, r3, d8
 8004872:	f7fb fed9 	bl	8000628 <__aeabi_dmul>
 8004876:	4622      	mov	r2, r4
 8004878:	462b      	mov	r3, r5
 800487a:	f7fb fd1f 	bl	80002bc <__adddf3>
 800487e:	4642      	mov	r2, r8
 8004880:	4682      	mov	sl, r0
 8004882:	468b      	mov	fp, r1
 8004884:	464b      	mov	r3, r9
 8004886:	4640      	mov	r0, r8
 8004888:	4649      	mov	r1, r9
 800488a:	f7fb fecd 	bl	8000628 <__aeabi_dmul>
 800488e:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <__ieee754_pow+0x758>)
 8004890:	2200      	movs	r2, #0
 8004892:	4606      	mov	r6, r0
 8004894:	460f      	mov	r7, r1
 8004896:	f7fb fd11 	bl	80002bc <__adddf3>
 800489a:	4652      	mov	r2, sl
 800489c:	465b      	mov	r3, fp
 800489e:	f7fb fd0d 	bl	80002bc <__adddf3>
 80048a2:	9c04      	ldr	r4, [sp, #16]
 80048a4:	460d      	mov	r5, r1
 80048a6:	4622      	mov	r2, r4
 80048a8:	460b      	mov	r3, r1
 80048aa:	4640      	mov	r0, r8
 80048ac:	4649      	mov	r1, r9
 80048ae:	f7fb febb 	bl	8000628 <__aeabi_dmul>
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <__ieee754_pow+0x758>)
 80048b4:	4680      	mov	r8, r0
 80048b6:	4689      	mov	r9, r1
 80048b8:	2200      	movs	r2, #0
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fb fcfb 	bl	80002b8 <__aeabi_dsub>
 80048c2:	4632      	mov	r2, r6
 80048c4:	463b      	mov	r3, r7
 80048c6:	f7fb fcf7 	bl	80002b8 <__aeabi_dsub>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4650      	mov	r0, sl
 80048d0:	4659      	mov	r1, fp
 80048d2:	f7fb fcf1 	bl	80002b8 <__aeabi_dsub>
 80048d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048da:	f7fb fea5 	bl	8000628 <__aeabi_dmul>
 80048de:	4622      	mov	r2, r4
 80048e0:	4606      	mov	r6, r0
 80048e2:	460f      	mov	r7, r1
 80048e4:	462b      	mov	r3, r5
 80048e6:	ec51 0b18 	vmov	r0, r1, d8
 80048ea:	f7fb fe9d 	bl	8000628 <__aeabi_dmul>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f7fb fce1 	bl	80002bc <__adddf3>
 80048fa:	4606      	mov	r6, r0
 80048fc:	460f      	mov	r7, r1
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4640      	mov	r0, r8
 8004904:	4649      	mov	r1, r9
 8004906:	f7fb fcd9 	bl	80002bc <__adddf3>
 800490a:	9c04      	ldr	r4, [sp, #16]
 800490c:	a33e      	add	r3, pc, #248	; (adr r3, 8004a08 <__ieee754_pow+0x720>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	4620      	mov	r0, r4
 8004914:	460d      	mov	r5, r1
 8004916:	f7fb fe87 	bl	8000628 <__aeabi_dmul>
 800491a:	4642      	mov	r2, r8
 800491c:	ec41 0b18 	vmov	d8, r0, r1
 8004920:	464b      	mov	r3, r9
 8004922:	4620      	mov	r0, r4
 8004924:	4629      	mov	r1, r5
 8004926:	f7fb fcc7 	bl	80002b8 <__aeabi_dsub>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4630      	mov	r0, r6
 8004930:	4639      	mov	r1, r7
 8004932:	f7fb fcc1 	bl	80002b8 <__aeabi_dsub>
 8004936:	a336      	add	r3, pc, #216	; (adr r3, 8004a10 <__ieee754_pow+0x728>)
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f7fb fe74 	bl	8000628 <__aeabi_dmul>
 8004940:	a335      	add	r3, pc, #212	; (adr r3, 8004a18 <__ieee754_pow+0x730>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	4606      	mov	r6, r0
 8004948:	460f      	mov	r7, r1
 800494a:	4620      	mov	r0, r4
 800494c:	4629      	mov	r1, r5
 800494e:	f7fb fe6b 	bl	8000628 <__aeabi_dmul>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f7fb fcaf 	bl	80002bc <__adddf3>
 800495e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004960:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <__ieee754_pow+0x75c>)
 8004962:	4413      	add	r3, r2
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fca8 	bl	80002bc <__adddf3>
 800496c:	4682      	mov	sl, r0
 800496e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004970:	468b      	mov	fp, r1
 8004972:	f7fb fdef 	bl	8000554 <__aeabi_i2d>
 8004976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004978:	4b33      	ldr	r3, [pc, #204]	; (8004a48 <__ieee754_pow+0x760>)
 800497a:	4413      	add	r3, r2
 800497c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004980:	4606      	mov	r6, r0
 8004982:	460f      	mov	r7, r1
 8004984:	4652      	mov	r2, sl
 8004986:	465b      	mov	r3, fp
 8004988:	ec51 0b18 	vmov	r0, r1, d8
 800498c:	f7fb fc96 	bl	80002bc <__adddf3>
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	f7fb fc92 	bl	80002bc <__adddf3>
 8004998:	4632      	mov	r2, r6
 800499a:	463b      	mov	r3, r7
 800499c:	f7fb fc8e 	bl	80002bc <__adddf3>
 80049a0:	9c04      	ldr	r4, [sp, #16]
 80049a2:	4632      	mov	r2, r6
 80049a4:	463b      	mov	r3, r7
 80049a6:	4620      	mov	r0, r4
 80049a8:	460d      	mov	r5, r1
 80049aa:	f7fb fc85 	bl	80002b8 <__aeabi_dsub>
 80049ae:	4642      	mov	r2, r8
 80049b0:	464b      	mov	r3, r9
 80049b2:	f7fb fc81 	bl	80002b8 <__aeabi_dsub>
 80049b6:	ec53 2b18 	vmov	r2, r3, d8
 80049ba:	f7fb fc7d 	bl	80002b8 <__aeabi_dsub>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4650      	mov	r0, sl
 80049c4:	4659      	mov	r1, fp
 80049c6:	e606      	b.n	80045d6 <__ieee754_pow+0x2ee>
 80049c8:	2401      	movs	r4, #1
 80049ca:	e6a0      	b.n	800470e <__ieee754_pow+0x426>
 80049cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004a20 <__ieee754_pow+0x738>
 80049d0:	e60d      	b.n	80045ee <__ieee754_pow+0x306>
 80049d2:	bf00      	nop
 80049d4:	f3af 8000 	nop.w
 80049d8:	4a454eef 	.word	0x4a454eef
 80049dc:	3fca7e28 	.word	0x3fca7e28
 80049e0:	93c9db65 	.word	0x93c9db65
 80049e4:	3fcd864a 	.word	0x3fcd864a
 80049e8:	a91d4101 	.word	0xa91d4101
 80049ec:	3fd17460 	.word	0x3fd17460
 80049f0:	518f264d 	.word	0x518f264d
 80049f4:	3fd55555 	.word	0x3fd55555
 80049f8:	db6fabff 	.word	0xdb6fabff
 80049fc:	3fdb6db6 	.word	0x3fdb6db6
 8004a00:	33333303 	.word	0x33333303
 8004a04:	3fe33333 	.word	0x3fe33333
 8004a08:	e0000000 	.word	0xe0000000
 8004a0c:	3feec709 	.word	0x3feec709
 8004a10:	dc3a03fd 	.word	0xdc3a03fd
 8004a14:	3feec709 	.word	0x3feec709
 8004a18:	145b01f5 	.word	0x145b01f5
 8004a1c:	be3e2fe0 	.word	0xbe3e2fe0
 8004a20:	00000000 	.word	0x00000000
 8004a24:	3ff00000 	.word	0x3ff00000
 8004a28:	7ff00000 	.word	0x7ff00000
 8004a2c:	43400000 	.word	0x43400000
 8004a30:	0003988e 	.word	0x0003988e
 8004a34:	000bb679 	.word	0x000bb679
 8004a38:	08005638 	.word	0x08005638
 8004a3c:	3ff00000 	.word	0x3ff00000
 8004a40:	40080000 	.word	0x40080000
 8004a44:	08005658 	.word	0x08005658
 8004a48:	08005648 	.word	0x08005648
 8004a4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8004d24 <__ieee754_pow+0xa3c>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	4640      	mov	r0, r8
 8004a54:	4649      	mov	r1, r9
 8004a56:	f7fb fc31 	bl	80002bc <__adddf3>
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	ec41 0b1a 	vmov	d10, r0, r1
 8004a60:	462b      	mov	r3, r5
 8004a62:	4630      	mov	r0, r6
 8004a64:	4639      	mov	r1, r7
 8004a66:	f7fb fc27 	bl	80002b8 <__aeabi_dsub>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	ec51 0b1a 	vmov	r0, r1, d10
 8004a72:	f7fc f869 	bl	8000b48 <__aeabi_dcmpgt>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	f47f adf8 	bne.w	800466c <__ieee754_pow+0x384>
 8004a7c:	4aa4      	ldr	r2, [pc, #656]	; (8004d10 <__ieee754_pow+0xa28>)
 8004a7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a82:	4293      	cmp	r3, r2
 8004a84:	f340 810b 	ble.w	8004c9e <__ieee754_pow+0x9b6>
 8004a88:	151b      	asrs	r3, r3, #20
 8004a8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004a8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004a92:	fa4a f303 	asr.w	r3, sl, r3
 8004a96:	445b      	add	r3, fp
 8004a98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004a9c:	4e9d      	ldr	r6, [pc, #628]	; (8004d14 <__ieee754_pow+0xa2c>)
 8004a9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004aa2:	4116      	asrs	r6, r2
 8004aa4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	ea23 0106 	bic.w	r1, r3, r6
 8004aae:	f1c2 0214 	rsb	r2, r2, #20
 8004ab2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004ab6:	fa4a fa02 	asr.w	sl, sl, r2
 8004aba:	f1bb 0f00 	cmp.w	fp, #0
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	bfb8      	it	lt
 8004ac8:	f1ca 0a00 	rsblt	sl, sl, #0
 8004acc:	f7fb fbf4 	bl	80002b8 <__aeabi_dsub>
 8004ad0:	ec41 0b19 	vmov	d9, r0, r1
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	ec51 0b19 	vmov	r0, r1, d9
 8004adc:	f7fb fbee 	bl	80002bc <__adddf3>
 8004ae0:	2400      	movs	r4, #0
 8004ae2:	a379      	add	r3, pc, #484	; (adr r3, 8004cc8 <__ieee754_pow+0x9e0>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	4620      	mov	r0, r4
 8004aea:	460d      	mov	r5, r1
 8004aec:	f7fb fd9c 	bl	8000628 <__aeabi_dmul>
 8004af0:	ec53 2b19 	vmov	r2, r3, d9
 8004af4:	4606      	mov	r6, r0
 8004af6:	460f      	mov	r7, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fbdc 	bl	80002b8 <__aeabi_dsub>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fb fbd6 	bl	80002b8 <__aeabi_dsub>
 8004b0c:	a370      	add	r3, pc, #448	; (adr r3, 8004cd0 <__ieee754_pow+0x9e8>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fd89 	bl	8000628 <__aeabi_dmul>
 8004b16:	a370      	add	r3, pc, #448	; (adr r3, 8004cd8 <__ieee754_pow+0x9f0>)
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	4680      	mov	r8, r0
 8004b1e:	4689      	mov	r9, r1
 8004b20:	4620      	mov	r0, r4
 8004b22:	4629      	mov	r1, r5
 8004b24:	f7fb fd80 	bl	8000628 <__aeabi_dmul>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4649      	mov	r1, r9
 8004b30:	f7fb fbc4 	bl	80002bc <__adddf3>
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	4639      	mov	r1, r7
 8004b40:	f7fb fbbc 	bl	80002bc <__adddf3>
 8004b44:	4632      	mov	r2, r6
 8004b46:	463b      	mov	r3, r7
 8004b48:	4680      	mov	r8, r0
 8004b4a:	4689      	mov	r9, r1
 8004b4c:	f7fb fbb4 	bl	80002b8 <__aeabi_dsub>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4620      	mov	r0, r4
 8004b56:	4629      	mov	r1, r5
 8004b58:	f7fb fbae 	bl	80002b8 <__aeabi_dsub>
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	4606      	mov	r6, r0
 8004b60:	460f      	mov	r7, r1
 8004b62:	464b      	mov	r3, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	4649      	mov	r1, r9
 8004b68:	f7fb fd5e 	bl	8000628 <__aeabi_dmul>
 8004b6c:	a35c      	add	r3, pc, #368	; (adr r3, 8004ce0 <__ieee754_pow+0x9f8>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	4604      	mov	r4, r0
 8004b74:	460d      	mov	r5, r1
 8004b76:	f7fb fd57 	bl	8000628 <__aeabi_dmul>
 8004b7a:	a35b      	add	r3, pc, #364	; (adr r3, 8004ce8 <__ieee754_pow+0xa00>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fb9a 	bl	80002b8 <__aeabi_dsub>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	f7fb fd4e 	bl	8000628 <__aeabi_dmul>
 8004b8c:	a358      	add	r3, pc, #352	; (adr r3, 8004cf0 <__ieee754_pow+0xa08>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fb93 	bl	80002bc <__adddf3>
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f7fb fd45 	bl	8000628 <__aeabi_dmul>
 8004b9e:	a356      	add	r3, pc, #344	; (adr r3, 8004cf8 <__ieee754_pow+0xa10>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fb88 	bl	80002b8 <__aeabi_dsub>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	f7fb fd3c 	bl	8000628 <__aeabi_dmul>
 8004bb0:	a353      	add	r3, pc, #332	; (adr r3, 8004d00 <__ieee754_pow+0xa18>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fb81 	bl	80002bc <__adddf3>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fd33 	bl	8000628 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	4649      	mov	r1, r9
 8004bca:	f7fb fb75 	bl	80002b8 <__aeabi_dsub>
 8004bce:	4604      	mov	r4, r0
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	4649      	mov	r1, r9
 8004bda:	f7fb fd25 	bl	8000628 <__aeabi_dmul>
 8004bde:	2200      	movs	r2, #0
 8004be0:	ec41 0b19 	vmov	d9, r0, r1
 8004be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004be8:	4620      	mov	r0, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	f7fb fb64 	bl	80002b8 <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	ec51 0b19 	vmov	r0, r1, d9
 8004bf8:	f7fb fe40 	bl	800087c <__aeabi_ddiv>
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	4604      	mov	r4, r0
 8004c00:	460d      	mov	r5, r1
 8004c02:	463b      	mov	r3, r7
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	f7fb fd0e 	bl	8000628 <__aeabi_dmul>
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	463b      	mov	r3, r7
 8004c10:	f7fb fb54 	bl	80002bc <__adddf3>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fb4c 	bl	80002b8 <__aeabi_dsub>
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	f7fb fb48 	bl	80002b8 <__aeabi_dsub>
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	493a      	ldr	r1, [pc, #232]	; (8004d18 <__ieee754_pow+0xa30>)
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f7fb fb42 	bl	80002b8 <__aeabi_dsub>
 8004c34:	e9cd 0100 	strd	r0, r1, [sp]
 8004c38:	9b01      	ldr	r3, [sp, #4]
 8004c3a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c42:	da2f      	bge.n	8004ca4 <__ieee754_pow+0x9bc>
 8004c44:	4650      	mov	r0, sl
 8004c46:	ed9d 0b00 	vldr	d0, [sp]
 8004c4a:	f000 f9cd 	bl	8004fe8 <scalbn>
 8004c4e:	ec51 0b10 	vmov	r0, r1, d0
 8004c52:	ec53 2b18 	vmov	r2, r3, d8
 8004c56:	f7ff bbe0 	b.w	800441a <__ieee754_pow+0x132>
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <__ieee754_pow+0xa34>)
 8004c5c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c60:	429e      	cmp	r6, r3
 8004c62:	f77f af0b 	ble.w	8004a7c <__ieee754_pow+0x794>
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <__ieee754_pow+0xa38>)
 8004c68:	440b      	add	r3, r1
 8004c6a:	4303      	orrs	r3, r0
 8004c6c:	d00b      	beq.n	8004c86 <__ieee754_pow+0x99e>
 8004c6e:	a326      	add	r3, pc, #152	; (adr r3, 8004d08 <__ieee754_pow+0xa20>)
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	ec51 0b18 	vmov	r0, r1, d8
 8004c78:	f7fb fcd6 	bl	8000628 <__aeabi_dmul>
 8004c7c:	a322      	add	r3, pc, #136	; (adr r3, 8004d08 <__ieee754_pow+0xa20>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7ff bbca 	b.w	800441a <__ieee754_pow+0x132>
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f7fb fb15 	bl	80002b8 <__aeabi_dsub>
 8004c8e:	4642      	mov	r2, r8
 8004c90:	464b      	mov	r3, r9
 8004c92:	f7fb ff4f 	bl	8000b34 <__aeabi_dcmpge>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f43f aef0 	beq.w	8004a7c <__ieee754_pow+0x794>
 8004c9c:	e7e7      	b.n	8004c6e <__ieee754_pow+0x986>
 8004c9e:	f04f 0a00 	mov.w	sl, #0
 8004ca2:	e717      	b.n	8004ad4 <__ieee754_pow+0x7ec>
 8004ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	e7d2      	b.n	8004c52 <__ieee754_pow+0x96a>
 8004cac:	491a      	ldr	r1, [pc, #104]	; (8004d18 <__ieee754_pow+0xa30>)
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7ff bb9e 	b.w	80043f0 <__ieee754_pow+0x108>
 8004cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cb8:	f7ff bb9a 	b.w	80043f0 <__ieee754_pow+0x108>
 8004cbc:	9000      	str	r0, [sp, #0]
 8004cbe:	f7ff bb76 	b.w	80043ae <__ieee754_pow+0xc6>
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f7ff bb60 	b.w	8004388 <__ieee754_pow+0xa0>
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	3fe62e43 	.word	0x3fe62e43
 8004cd0:	fefa39ef 	.word	0xfefa39ef
 8004cd4:	3fe62e42 	.word	0x3fe62e42
 8004cd8:	0ca86c39 	.word	0x0ca86c39
 8004cdc:	be205c61 	.word	0xbe205c61
 8004ce0:	72bea4d0 	.word	0x72bea4d0
 8004ce4:	3e663769 	.word	0x3e663769
 8004ce8:	c5d26bf1 	.word	0xc5d26bf1
 8004cec:	3ebbbd41 	.word	0x3ebbbd41
 8004cf0:	af25de2c 	.word	0xaf25de2c
 8004cf4:	3f11566a 	.word	0x3f11566a
 8004cf8:	16bebd93 	.word	0x16bebd93
 8004cfc:	3f66c16c 	.word	0x3f66c16c
 8004d00:	5555553e 	.word	0x5555553e
 8004d04:	3fc55555 	.word	0x3fc55555
 8004d08:	c2f8f359 	.word	0xc2f8f359
 8004d0c:	01a56e1f 	.word	0x01a56e1f
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	000fffff 	.word	0x000fffff
 8004d18:	3ff00000 	.word	0x3ff00000
 8004d1c:	4090cbff 	.word	0x4090cbff
 8004d20:	3f6f3400 	.word	0x3f6f3400
 8004d24:	652b82fe 	.word	0x652b82fe
 8004d28:	3c971547 	.word	0x3c971547

08004d2c <__ieee754_sqrt>:
 8004d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	ec55 4b10 	vmov	r4, r5, d0
 8004d34:	4e56      	ldr	r6, [pc, #344]	; (8004e90 <__ieee754_sqrt+0x164>)
 8004d36:	43ae      	bics	r6, r5
 8004d38:	ee10 0a10 	vmov	r0, s0
 8004d3c:	ee10 3a10 	vmov	r3, s0
 8004d40:	4629      	mov	r1, r5
 8004d42:	462a      	mov	r2, r5
 8004d44:	d110      	bne.n	8004d68 <__ieee754_sqrt+0x3c>
 8004d46:	ee10 2a10 	vmov	r2, s0
 8004d4a:	462b      	mov	r3, r5
 8004d4c:	f7fb fc6c 	bl	8000628 <__aeabi_dmul>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb fab0 	bl	80002bc <__adddf3>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	460d      	mov	r5, r1
 8004d60:	ec45 4b10 	vmov	d0, r4, r5
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	dc10      	bgt.n	8004d8e <__ieee754_sqrt+0x62>
 8004d6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004d70:	4330      	orrs	r0, r6
 8004d72:	d0f5      	beq.n	8004d60 <__ieee754_sqrt+0x34>
 8004d74:	b15d      	cbz	r5, 8004d8e <__ieee754_sqrt+0x62>
 8004d76:	ee10 2a10 	vmov	r2, s0
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	ee10 0a10 	vmov	r0, s0
 8004d80:	f7fb fa9a 	bl	80002b8 <__aeabi_dsub>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	f7fb fd78 	bl	800087c <__aeabi_ddiv>
 8004d8c:	e7e6      	b.n	8004d5c <__ieee754_sqrt+0x30>
 8004d8e:	1509      	asrs	r1, r1, #20
 8004d90:	d076      	beq.n	8004e80 <__ieee754_sqrt+0x154>
 8004d92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004d96:	07ce      	lsls	r6, r1, #31
 8004d98:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8004d9c:	bf5e      	ittt	pl
 8004d9e:	0fda      	lsrpl	r2, r3, #31
 8004da0:	005b      	lslpl	r3, r3, #1
 8004da2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8004da6:	0fda      	lsrs	r2, r3, #31
 8004da8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8004dac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004db0:	2000      	movs	r0, #0
 8004db2:	106d      	asrs	r5, r5, #1
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	f04f 0e16 	mov.w	lr, #22
 8004dba:	4684      	mov	ip, r0
 8004dbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc0:	eb0c 0401 	add.w	r4, ip, r1
 8004dc4:	4294      	cmp	r4, r2
 8004dc6:	bfde      	ittt	le
 8004dc8:	1b12      	suble	r2, r2, r4
 8004dca:	eb04 0c01 	addle.w	ip, r4, r1
 8004dce:	1840      	addle	r0, r0, r1
 8004dd0:	0052      	lsls	r2, r2, #1
 8004dd2:	f1be 0e01 	subs.w	lr, lr, #1
 8004dd6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004dda:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004dde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004de2:	d1ed      	bne.n	8004dc0 <__ieee754_sqrt+0x94>
 8004de4:	4671      	mov	r1, lr
 8004de6:	2720      	movs	r7, #32
 8004de8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004dec:	4562      	cmp	r2, ip
 8004dee:	eb04 060e 	add.w	r6, r4, lr
 8004df2:	dc02      	bgt.n	8004dfa <__ieee754_sqrt+0xce>
 8004df4:	d113      	bne.n	8004e1e <__ieee754_sqrt+0xf2>
 8004df6:	429e      	cmp	r6, r3
 8004df8:	d811      	bhi.n	8004e1e <__ieee754_sqrt+0xf2>
 8004dfa:	2e00      	cmp	r6, #0
 8004dfc:	eb06 0e04 	add.w	lr, r6, r4
 8004e00:	da43      	bge.n	8004e8a <__ieee754_sqrt+0x15e>
 8004e02:	f1be 0f00 	cmp.w	lr, #0
 8004e06:	db40      	blt.n	8004e8a <__ieee754_sqrt+0x15e>
 8004e08:	f10c 0801 	add.w	r8, ip, #1
 8004e0c:	eba2 020c 	sub.w	r2, r2, ip
 8004e10:	429e      	cmp	r6, r3
 8004e12:	bf88      	it	hi
 8004e14:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004e18:	1b9b      	subs	r3, r3, r6
 8004e1a:	4421      	add	r1, r4
 8004e1c:	46c4      	mov	ip, r8
 8004e1e:	0052      	lsls	r2, r2, #1
 8004e20:	3f01      	subs	r7, #1
 8004e22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004e26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004e2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004e2e:	d1dd      	bne.n	8004dec <__ieee754_sqrt+0xc0>
 8004e30:	4313      	orrs	r3, r2
 8004e32:	d006      	beq.n	8004e42 <__ieee754_sqrt+0x116>
 8004e34:	1c4c      	adds	r4, r1, #1
 8004e36:	bf13      	iteet	ne
 8004e38:	3101      	addne	r1, #1
 8004e3a:	3001      	addeq	r0, #1
 8004e3c:	4639      	moveq	r1, r7
 8004e3e:	f021 0101 	bicne.w	r1, r1, #1
 8004e42:	1043      	asrs	r3, r0, #1
 8004e44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004e48:	0849      	lsrs	r1, r1, #1
 8004e4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004e4e:	07c2      	lsls	r2, r0, #31
 8004e50:	bf48      	it	mi
 8004e52:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004e56:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	463d      	mov	r5, r7
 8004e5e:	e77f      	b.n	8004d60 <__ieee754_sqrt+0x34>
 8004e60:	0ada      	lsrs	r2, r3, #11
 8004e62:	3815      	subs	r0, #21
 8004e64:	055b      	lsls	r3, r3, #21
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	d0fa      	beq.n	8004e60 <__ieee754_sqrt+0x134>
 8004e6a:	02d7      	lsls	r7, r2, #11
 8004e6c:	d50a      	bpl.n	8004e84 <__ieee754_sqrt+0x158>
 8004e6e:	f1c1 0420 	rsb	r4, r1, #32
 8004e72:	fa23 f404 	lsr.w	r4, r3, r4
 8004e76:	1e4d      	subs	r5, r1, #1
 8004e78:	408b      	lsls	r3, r1
 8004e7a:	4322      	orrs	r2, r4
 8004e7c:	1b41      	subs	r1, r0, r5
 8004e7e:	e788      	b.n	8004d92 <__ieee754_sqrt+0x66>
 8004e80:	4608      	mov	r0, r1
 8004e82:	e7f0      	b.n	8004e66 <__ieee754_sqrt+0x13a>
 8004e84:	0052      	lsls	r2, r2, #1
 8004e86:	3101      	adds	r1, #1
 8004e88:	e7ef      	b.n	8004e6a <__ieee754_sqrt+0x13e>
 8004e8a:	46e0      	mov	r8, ip
 8004e8c:	e7be      	b.n	8004e0c <__ieee754_sqrt+0xe0>
 8004e8e:	bf00      	nop
 8004e90:	7ff00000 	.word	0x7ff00000

08004e94 <fabs>:
 8004e94:	ec51 0b10 	vmov	r0, r1, d0
 8004e98:	ee10 2a10 	vmov	r2, s0
 8004e9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ea0:	ec43 2b10 	vmov	d0, r2, r3
 8004ea4:	4770      	bx	lr

08004ea6 <finite>:
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	ed8d 0b00 	vstr	d0, [sp]
 8004eac:	9801      	ldr	r0, [sp, #4]
 8004eae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004eb2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004eb6:	0fc0      	lsrs	r0, r0, #31
 8004eb8:	b002      	add	sp, #8
 8004eba:	4770      	bx	lr
 8004ebc:	0000      	movs	r0, r0
	...

08004ec0 <nan>:
 8004ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004ec8 <nan+0x8>
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	7ff80000 	.word	0x7ff80000

08004ed0 <rint>:
 8004ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ed2:	ec51 0b10 	vmov	r0, r1, d0
 8004ed6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004eda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004ede:	2e13      	cmp	r6, #19
 8004ee0:	ee10 4a10 	vmov	r4, s0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004eea:	dc58      	bgt.n	8004f9e <rint+0xce>
 8004eec:	2e00      	cmp	r6, #0
 8004eee:	da2b      	bge.n	8004f48 <rint+0x78>
 8004ef0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004ef4:	4302      	orrs	r2, r0
 8004ef6:	d023      	beq.n	8004f40 <rint+0x70>
 8004ef8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004efc:	4302      	orrs	r2, r0
 8004efe:	4254      	negs	r4, r2
 8004f00:	4314      	orrs	r4, r2
 8004f02:	0c4b      	lsrs	r3, r1, #17
 8004f04:	0b24      	lsrs	r4, r4, #12
 8004f06:	045b      	lsls	r3, r3, #17
 8004f08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004f0c:	ea44 0103 	orr.w	r1, r4, r3
 8004f10:	4b32      	ldr	r3, [pc, #200]	; (8004fdc <rint+0x10c>)
 8004f12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004f16:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4639      	mov	r1, r7
 8004f22:	f7fb f9cb 	bl	80002bc <__adddf3>
 8004f26:	e9cd 0100 	strd	r0, r1, [sp]
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f30:	4632      	mov	r2, r6
 8004f32:	f7fb f9c1 	bl	80002b8 <__aeabi_dsub>
 8004f36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004f3e:	4639      	mov	r1, r7
 8004f40:	ec41 0b10 	vmov	d0, r0, r1
 8004f44:	b003      	add	sp, #12
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f48:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <rint+0x110>)
 8004f4a:	4132      	asrs	r2, r6
 8004f4c:	ea01 0702 	and.w	r7, r1, r2
 8004f50:	4307      	orrs	r7, r0
 8004f52:	d0f5      	beq.n	8004f40 <rint+0x70>
 8004f54:	0851      	lsrs	r1, r2, #1
 8004f56:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8004f5a:	4314      	orrs	r4, r2
 8004f5c:	d00c      	beq.n	8004f78 <rint+0xa8>
 8004f5e:	ea23 0201 	bic.w	r2, r3, r1
 8004f62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f66:	2e13      	cmp	r6, #19
 8004f68:	fa43 f606 	asr.w	r6, r3, r6
 8004f6c:	bf0c      	ite	eq
 8004f6e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004f72:	2400      	movne	r4, #0
 8004f74:	ea42 0306 	orr.w	r3, r2, r6
 8004f78:	4918      	ldr	r1, [pc, #96]	; (8004fdc <rint+0x10c>)
 8004f7a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004f7e:	4622      	mov	r2, r4
 8004f80:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f84:	4620      	mov	r0, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	f7fb f998 	bl	80002bc <__adddf3>
 8004f8c:	e9cd 0100 	strd	r0, r1, [sp]
 8004f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f94:	4622      	mov	r2, r4
 8004f96:	462b      	mov	r3, r5
 8004f98:	f7fb f98e 	bl	80002b8 <__aeabi_dsub>
 8004f9c:	e7d0      	b.n	8004f40 <rint+0x70>
 8004f9e:	2e33      	cmp	r6, #51	; 0x33
 8004fa0:	dd07      	ble.n	8004fb2 <rint+0xe2>
 8004fa2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004fa6:	d1cb      	bne.n	8004f40 <rint+0x70>
 8004fa8:	ee10 2a10 	vmov	r2, s0
 8004fac:	f7fb f986 	bl	80002bc <__adddf3>
 8004fb0:	e7c6      	b.n	8004f40 <rint+0x70>
 8004fb2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8004fb6:	f04f 36ff 	mov.w	r6, #4294967295
 8004fba:	40d6      	lsrs	r6, r2
 8004fbc:	4230      	tst	r0, r6
 8004fbe:	d0bf      	beq.n	8004f40 <rint+0x70>
 8004fc0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8004fc4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8004fc8:	bf1f      	itttt	ne
 8004fca:	ea24 0101 	bicne.w	r1, r4, r1
 8004fce:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004fd2:	fa44 f202 	asrne.w	r2, r4, r2
 8004fd6:	ea41 0402 	orrne.w	r4, r1, r2
 8004fda:	e7cd      	b.n	8004f78 <rint+0xa8>
 8004fdc:	08005668 	.word	0x08005668
 8004fe0:	000fffff 	.word	0x000fffff
 8004fe4:	00000000 	.word	0x00000000

08004fe8 <scalbn>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	ec55 4b10 	vmov	r4, r5, d0
 8004fee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	b99a      	cbnz	r2, 8005020 <scalbn+0x38>
 8004ff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004ffc:	4323      	orrs	r3, r4
 8004ffe:	d036      	beq.n	800506e <scalbn+0x86>
 8005000:	4b39      	ldr	r3, [pc, #228]	; (80050e8 <scalbn+0x100>)
 8005002:	4629      	mov	r1, r5
 8005004:	ee10 0a10 	vmov	r0, s0
 8005008:	2200      	movs	r2, #0
 800500a:	f7fb fb0d 	bl	8000628 <__aeabi_dmul>
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <scalbn+0x104>)
 8005010:	429e      	cmp	r6, r3
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	da10      	bge.n	800503a <scalbn+0x52>
 8005018:	a32b      	add	r3, pc, #172	; (adr r3, 80050c8 <scalbn+0xe0>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	e03a      	b.n	8005096 <scalbn+0xae>
 8005020:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005024:	428a      	cmp	r2, r1
 8005026:	d10c      	bne.n	8005042 <scalbn+0x5a>
 8005028:	ee10 2a10 	vmov	r2, s0
 800502c:	4620      	mov	r0, r4
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb f944 	bl	80002bc <__adddf3>
 8005034:	4604      	mov	r4, r0
 8005036:	460d      	mov	r5, r1
 8005038:	e019      	b.n	800506e <scalbn+0x86>
 800503a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800503e:	460b      	mov	r3, r1
 8005040:	3a36      	subs	r2, #54	; 0x36
 8005042:	4432      	add	r2, r6
 8005044:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005048:	428a      	cmp	r2, r1
 800504a:	dd08      	ble.n	800505e <scalbn+0x76>
 800504c:	2d00      	cmp	r5, #0
 800504e:	a120      	add	r1, pc, #128	; (adr r1, 80050d0 <scalbn+0xe8>)
 8005050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005054:	da1c      	bge.n	8005090 <scalbn+0xa8>
 8005056:	a120      	add	r1, pc, #128	; (adr r1, 80050d8 <scalbn+0xf0>)
 8005058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800505c:	e018      	b.n	8005090 <scalbn+0xa8>
 800505e:	2a00      	cmp	r2, #0
 8005060:	dd08      	ble.n	8005074 <scalbn+0x8c>
 8005062:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005066:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800506a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800506e:	ec45 4b10 	vmov	d0, r4, r5
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005078:	da19      	bge.n	80050ae <scalbn+0xc6>
 800507a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800507e:	429e      	cmp	r6, r3
 8005080:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005084:	dd0a      	ble.n	800509c <scalbn+0xb4>
 8005086:	a112      	add	r1, pc, #72	; (adr r1, 80050d0 <scalbn+0xe8>)
 8005088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e2      	bne.n	8005056 <scalbn+0x6e>
 8005090:	a30f      	add	r3, pc, #60	; (adr r3, 80050d0 <scalbn+0xe8>)
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f7fb fac7 	bl	8000628 <__aeabi_dmul>
 800509a:	e7cb      	b.n	8005034 <scalbn+0x4c>
 800509c:	a10a      	add	r1, pc, #40	; (adr r1, 80050c8 <scalbn+0xe0>)
 800509e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0b8      	beq.n	8005018 <scalbn+0x30>
 80050a6:	a10e      	add	r1, pc, #56	; (adr r1, 80050e0 <scalbn+0xf8>)
 80050a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ac:	e7b4      	b.n	8005018 <scalbn+0x30>
 80050ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050b2:	3236      	adds	r2, #54	; 0x36
 80050b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80050bc:	4620      	mov	r0, r4
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <scalbn+0x108>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	e7e8      	b.n	8005096 <scalbn+0xae>
 80050c4:	f3af 8000 	nop.w
 80050c8:	c2f8f359 	.word	0xc2f8f359
 80050cc:	01a56e1f 	.word	0x01a56e1f
 80050d0:	8800759c 	.word	0x8800759c
 80050d4:	7e37e43c 	.word	0x7e37e43c
 80050d8:	8800759c 	.word	0x8800759c
 80050dc:	fe37e43c 	.word	0xfe37e43c
 80050e0:	c2f8f359 	.word	0xc2f8f359
 80050e4:	81a56e1f 	.word	0x81a56e1f
 80050e8:	43500000 	.word	0x43500000
 80050ec:	ffff3cb0 	.word	0xffff3cb0
 80050f0:	3c900000 	.word	0x3c900000
 80050f4:	00000000 	.word	0x00000000

080050f8 <__ieee754_log>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	ec51 0b10 	vmov	r0, r1, d0
 8005100:	ed2d 8b04 	vpush	{d8-d9}
 8005104:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005108:	b083      	sub	sp, #12
 800510a:	460d      	mov	r5, r1
 800510c:	da29      	bge.n	8005162 <__ieee754_log+0x6a>
 800510e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005112:	4303      	orrs	r3, r0
 8005114:	ee10 2a10 	vmov	r2, s0
 8005118:	d10c      	bne.n	8005134 <__ieee754_log+0x3c>
 800511a:	49cf      	ldr	r1, [pc, #828]	; (8005458 <__ieee754_log+0x360>)
 800511c:	2200      	movs	r2, #0
 800511e:	2300      	movs	r3, #0
 8005120:	2000      	movs	r0, #0
 8005122:	f7fb fbab 	bl	800087c <__aeabi_ddiv>
 8005126:	ec41 0b10 	vmov	d0, r0, r1
 800512a:	b003      	add	sp, #12
 800512c:	ecbd 8b04 	vpop	{d8-d9}
 8005130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005134:	2900      	cmp	r1, #0
 8005136:	da05      	bge.n	8005144 <__ieee754_log+0x4c>
 8005138:	460b      	mov	r3, r1
 800513a:	f7fb f8bd 	bl	80002b8 <__aeabi_dsub>
 800513e:	2200      	movs	r2, #0
 8005140:	2300      	movs	r3, #0
 8005142:	e7ee      	b.n	8005122 <__ieee754_log+0x2a>
 8005144:	4bc5      	ldr	r3, [pc, #788]	; (800545c <__ieee754_log+0x364>)
 8005146:	2200      	movs	r2, #0
 8005148:	f7fb fa6e 	bl	8000628 <__aeabi_dmul>
 800514c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005150:	460d      	mov	r5, r1
 8005152:	4ac3      	ldr	r2, [pc, #780]	; (8005460 <__ieee754_log+0x368>)
 8005154:	4295      	cmp	r5, r2
 8005156:	dd06      	ble.n	8005166 <__ieee754_log+0x6e>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	f7fb f8ae 	bl	80002bc <__adddf3>
 8005160:	e7e1      	b.n	8005126 <__ieee754_log+0x2e>
 8005162:	2300      	movs	r3, #0
 8005164:	e7f5      	b.n	8005152 <__ieee754_log+0x5a>
 8005166:	152c      	asrs	r4, r5, #20
 8005168:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800516c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005170:	441c      	add	r4, r3
 8005172:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005176:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800517a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005182:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005186:	ea42 0105 	orr.w	r1, r2, r5
 800518a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800518e:	2200      	movs	r2, #0
 8005190:	4bb4      	ldr	r3, [pc, #720]	; (8005464 <__ieee754_log+0x36c>)
 8005192:	f7fb f891 	bl	80002b8 <__aeabi_dsub>
 8005196:	1cab      	adds	r3, r5, #2
 8005198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800519c:	2b02      	cmp	r3, #2
 800519e:	4682      	mov	sl, r0
 80051a0:	468b      	mov	fp, r1
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	dc53      	bgt.n	8005250 <__ieee754_log+0x158>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f7fb fca5 	bl	8000af8 <__aeabi_dcmpeq>
 80051ae:	b1d0      	cbz	r0, 80051e6 <__ieee754_log+0xee>
 80051b0:	2c00      	cmp	r4, #0
 80051b2:	f000 8122 	beq.w	80053fa <__ieee754_log+0x302>
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7fb f9cc 	bl	8000554 <__aeabi_i2d>
 80051bc:	a390      	add	r3, pc, #576	; (adr r3, 8005400 <__ieee754_log+0x308>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	4606      	mov	r6, r0
 80051c4:	460f      	mov	r7, r1
 80051c6:	f7fb fa2f 	bl	8000628 <__aeabi_dmul>
 80051ca:	a38f      	add	r3, pc, #572	; (adr r3, 8005408 <__ieee754_log+0x310>)
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	4604      	mov	r4, r0
 80051d2:	460d      	mov	r5, r1
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb fa26 	bl	8000628 <__aeabi_dmul>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4620      	mov	r0, r4
 80051e2:	4629      	mov	r1, r5
 80051e4:	e7ba      	b.n	800515c <__ieee754_log+0x64>
 80051e6:	a38a      	add	r3, pc, #552	; (adr r3, 8005410 <__ieee754_log+0x318>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	4650      	mov	r0, sl
 80051ee:	4659      	mov	r1, fp
 80051f0:	f7fb fa1a 	bl	8000628 <__aeabi_dmul>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	2000      	movs	r0, #0
 80051fa:	499b      	ldr	r1, [pc, #620]	; (8005468 <__ieee754_log+0x370>)
 80051fc:	f7fb f85c 	bl	80002b8 <__aeabi_dsub>
 8005200:	4652      	mov	r2, sl
 8005202:	4606      	mov	r6, r0
 8005204:	460f      	mov	r7, r1
 8005206:	465b      	mov	r3, fp
 8005208:	4650      	mov	r0, sl
 800520a:	4659      	mov	r1, fp
 800520c:	f7fb fa0c 	bl	8000628 <__aeabi_dmul>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4630      	mov	r0, r6
 8005216:	4639      	mov	r1, r7
 8005218:	f7fb fa06 	bl	8000628 <__aeabi_dmul>
 800521c:	4606      	mov	r6, r0
 800521e:	460f      	mov	r7, r1
 8005220:	b914      	cbnz	r4, 8005228 <__ieee754_log+0x130>
 8005222:	4632      	mov	r2, r6
 8005224:	463b      	mov	r3, r7
 8005226:	e0a2      	b.n	800536e <__ieee754_log+0x276>
 8005228:	4620      	mov	r0, r4
 800522a:	f7fb f993 	bl	8000554 <__aeabi_i2d>
 800522e:	a374      	add	r3, pc, #464	; (adr r3, 8005400 <__ieee754_log+0x308>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	4680      	mov	r8, r0
 8005236:	4689      	mov	r9, r1
 8005238:	f7fb f9f6 	bl	8000628 <__aeabi_dmul>
 800523c:	a372      	add	r3, pc, #456	; (adr r3, 8005408 <__ieee754_log+0x310>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	4604      	mov	r4, r0
 8005244:	460d      	mov	r5, r1
 8005246:	4640      	mov	r0, r8
 8005248:	4649      	mov	r1, r9
 800524a:	f7fb f9ed 	bl	8000628 <__aeabi_dmul>
 800524e:	e0a7      	b.n	80053a0 <__ieee754_log+0x2a8>
 8005250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005254:	f7fb f832 	bl	80002bc <__adddf3>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4650      	mov	r0, sl
 800525e:	4659      	mov	r1, fp
 8005260:	f7fb fb0c 	bl	800087c <__aeabi_ddiv>
 8005264:	ec41 0b18 	vmov	d8, r0, r1
 8005268:	4620      	mov	r0, r4
 800526a:	f7fb f973 	bl	8000554 <__aeabi_i2d>
 800526e:	ec53 2b18 	vmov	r2, r3, d8
 8005272:	ec41 0b19 	vmov	d9, r0, r1
 8005276:	ec51 0b18 	vmov	r0, r1, d8
 800527a:	f7fb f9d5 	bl	8000628 <__aeabi_dmul>
 800527e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005282:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4680      	mov	r8, r0
 800528e:	4689      	mov	r9, r1
 8005290:	f7fb f9ca 	bl	8000628 <__aeabi_dmul>
 8005294:	a360      	add	r3, pc, #384	; (adr r3, 8005418 <__ieee754_log+0x320>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	4606      	mov	r6, r0
 800529c:	460f      	mov	r7, r1
 800529e:	f7fb f9c3 	bl	8000628 <__aeabi_dmul>
 80052a2:	a35f      	add	r3, pc, #380	; (adr r3, 8005420 <__ieee754_log+0x328>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f7fb f808 	bl	80002bc <__adddf3>
 80052ac:	4632      	mov	r2, r6
 80052ae:	463b      	mov	r3, r7
 80052b0:	f7fb f9ba 	bl	8000628 <__aeabi_dmul>
 80052b4:	a35c      	add	r3, pc, #368	; (adr r3, 8005428 <__ieee754_log+0x330>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f7fa ffff 	bl	80002bc <__adddf3>
 80052be:	4632      	mov	r2, r6
 80052c0:	463b      	mov	r3, r7
 80052c2:	f7fb f9b1 	bl	8000628 <__aeabi_dmul>
 80052c6:	a35a      	add	r3, pc, #360	; (adr r3, 8005430 <__ieee754_log+0x338>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fa fff6 	bl	80002bc <__adddf3>
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	f7fb f9a8 	bl	8000628 <__aeabi_dmul>
 80052d8:	a357      	add	r3, pc, #348	; (adr r3, 8005438 <__ieee754_log+0x340>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	4680      	mov	r8, r0
 80052e0:	4689      	mov	r9, r1
 80052e2:	4630      	mov	r0, r6
 80052e4:	4639      	mov	r1, r7
 80052e6:	f7fb f99f 	bl	8000628 <__aeabi_dmul>
 80052ea:	a355      	add	r3, pc, #340	; (adr r3, 8005440 <__ieee754_log+0x348>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fa ffe4 	bl	80002bc <__adddf3>
 80052f4:	4632      	mov	r2, r6
 80052f6:	463b      	mov	r3, r7
 80052f8:	f7fb f996 	bl	8000628 <__aeabi_dmul>
 80052fc:	a352      	add	r3, pc, #328	; (adr r3, 8005448 <__ieee754_log+0x350>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fa ffdb 	bl	80002bc <__adddf3>
 8005306:	4632      	mov	r2, r6
 8005308:	463b      	mov	r3, r7
 800530a:	f7fb f98d 	bl	8000628 <__aeabi_dmul>
 800530e:	460b      	mov	r3, r1
 8005310:	4602      	mov	r2, r0
 8005312:	4649      	mov	r1, r9
 8005314:	4640      	mov	r0, r8
 8005316:	f7fa ffd1 	bl	80002bc <__adddf3>
 800531a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	3551      	adds	r5, #81	; 0x51
 8005322:	431d      	orrs	r5, r3
 8005324:	2d00      	cmp	r5, #0
 8005326:	4680      	mov	r8, r0
 8005328:	4689      	mov	r9, r1
 800532a:	dd48      	ble.n	80053be <__ieee754_log+0x2c6>
 800532c:	4b4e      	ldr	r3, [pc, #312]	; (8005468 <__ieee754_log+0x370>)
 800532e:	2200      	movs	r2, #0
 8005330:	4650      	mov	r0, sl
 8005332:	4659      	mov	r1, fp
 8005334:	f7fb f978 	bl	8000628 <__aeabi_dmul>
 8005338:	4652      	mov	r2, sl
 800533a:	465b      	mov	r3, fp
 800533c:	f7fb f974 	bl	8000628 <__aeabi_dmul>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	4640      	mov	r0, r8
 800534a:	4649      	mov	r1, r9
 800534c:	f7fa ffb6 	bl	80002bc <__adddf3>
 8005350:	ec53 2b18 	vmov	r2, r3, d8
 8005354:	f7fb f968 	bl	8000628 <__aeabi_dmul>
 8005358:	4680      	mov	r8, r0
 800535a:	4689      	mov	r9, r1
 800535c:	b964      	cbnz	r4, 8005378 <__ieee754_log+0x280>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4630      	mov	r0, r6
 8005364:	4639      	mov	r1, r7
 8005366:	f7fa ffa7 	bl	80002b8 <__aeabi_dsub>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4650      	mov	r0, sl
 8005370:	4659      	mov	r1, fp
 8005372:	f7fa ffa1 	bl	80002b8 <__aeabi_dsub>
 8005376:	e6d6      	b.n	8005126 <__ieee754_log+0x2e>
 8005378:	a321      	add	r3, pc, #132	; (adr r3, 8005400 <__ieee754_log+0x308>)
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	ec51 0b19 	vmov	r0, r1, d9
 8005382:	f7fb f951 	bl	8000628 <__aeabi_dmul>
 8005386:	a320      	add	r3, pc, #128	; (adr r3, 8005408 <__ieee754_log+0x310>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	4604      	mov	r4, r0
 800538e:	460d      	mov	r5, r1
 8005390:	ec51 0b19 	vmov	r0, r1, d9
 8005394:	f7fb f948 	bl	8000628 <__aeabi_dmul>
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	f7fa ff8e 	bl	80002bc <__adddf3>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4630      	mov	r0, r6
 80053a6:	4639      	mov	r1, r7
 80053a8:	f7fa ff86 	bl	80002b8 <__aeabi_dsub>
 80053ac:	4652      	mov	r2, sl
 80053ae:	465b      	mov	r3, fp
 80053b0:	f7fa ff82 	bl	80002b8 <__aeabi_dsub>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4620      	mov	r0, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	e7d9      	b.n	8005372 <__ieee754_log+0x27a>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4650      	mov	r0, sl
 80053c4:	4659      	mov	r1, fp
 80053c6:	f7fa ff77 	bl	80002b8 <__aeabi_dsub>
 80053ca:	ec53 2b18 	vmov	r2, r3, d8
 80053ce:	f7fb f92b 	bl	8000628 <__aeabi_dmul>
 80053d2:	4606      	mov	r6, r0
 80053d4:	460f      	mov	r7, r1
 80053d6:	2c00      	cmp	r4, #0
 80053d8:	f43f af23 	beq.w	8005222 <__ieee754_log+0x12a>
 80053dc:	a308      	add	r3, pc, #32	; (adr r3, 8005400 <__ieee754_log+0x308>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	ec51 0b19 	vmov	r0, r1, d9
 80053e6:	f7fb f91f 	bl	8000628 <__aeabi_dmul>
 80053ea:	a307      	add	r3, pc, #28	; (adr r3, 8005408 <__ieee754_log+0x310>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	4604      	mov	r4, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	ec51 0b19 	vmov	r0, r1, d9
 80053f8:	e727      	b.n	800524a <__ieee754_log+0x152>
 80053fa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005450 <__ieee754_log+0x358>
 80053fe:	e694      	b.n	800512a <__ieee754_log+0x32>
 8005400:	fee00000 	.word	0xfee00000
 8005404:	3fe62e42 	.word	0x3fe62e42
 8005408:	35793c76 	.word	0x35793c76
 800540c:	3dea39ef 	.word	0x3dea39ef
 8005410:	55555555 	.word	0x55555555
 8005414:	3fd55555 	.word	0x3fd55555
 8005418:	df3e5244 	.word	0xdf3e5244
 800541c:	3fc2f112 	.word	0x3fc2f112
 8005420:	96cb03de 	.word	0x96cb03de
 8005424:	3fc74664 	.word	0x3fc74664
 8005428:	94229359 	.word	0x94229359
 800542c:	3fd24924 	.word	0x3fd24924
 8005430:	55555593 	.word	0x55555593
 8005434:	3fe55555 	.word	0x3fe55555
 8005438:	d078c69f 	.word	0xd078c69f
 800543c:	3fc39a09 	.word	0x3fc39a09
 8005440:	1d8e78af 	.word	0x1d8e78af
 8005444:	3fcc71c5 	.word	0x3fcc71c5
 8005448:	9997fa04 	.word	0x9997fa04
 800544c:	3fd99999 	.word	0x3fd99999
	...
 8005458:	c3500000 	.word	0xc3500000
 800545c:	43500000 	.word	0x43500000
 8005460:	7fefffff 	.word	0x7fefffff
 8005464:	3ff00000 	.word	0x3ff00000
 8005468:	3fe00000 	.word	0x3fe00000

0800546c <_init>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	bf00      	nop
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr

08005478 <_fini>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	bf00      	nop
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr
