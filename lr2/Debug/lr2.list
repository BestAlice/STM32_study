
lr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080039b8  080039b8  000139b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b68  08003b68  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b70  08003b70  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  200000b0  08003c28  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003c28  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000548a  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011d0  00000000  00000000  0002556a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000488  00000000  00000000  00026740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00026bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205fb  00000000  00000000  00026fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006009  00000000  00000000  000475b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c54b2  00000000  00000000  0004d5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00112a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001558  00000000  00000000  00112ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000b0 	.word	0x200000b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800399c 	.word	0x0800399c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000b4 	.word	0x200000b4
 8000204:	0800399c 	.word	0x0800399c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b96e 	b.w	8000e24 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9d08      	ldr	r5, [sp, #32]
 8000b66:	4604      	mov	r4, r0
 8000b68:	468c      	mov	ip, r1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8083 	bne.w	8000c76 <__udivmoddi4+0x116>
 8000b70:	428a      	cmp	r2, r1
 8000b72:	4617      	mov	r7, r2
 8000b74:	d947      	bls.n	8000c06 <__udivmoddi4+0xa6>
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	b142      	cbz	r2, 8000b8e <__udivmoddi4+0x2e>
 8000b7c:	f1c2 0020 	rsb	r0, r2, #32
 8000b80:	fa24 f000 	lsr.w	r0, r4, r0
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4097      	lsls	r7, r2
 8000b88:	ea40 0c01 	orr.w	ip, r0, r1
 8000b8c:	4094      	lsls	r4, r2
 8000b8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b92:	0c23      	lsrs	r3, r4, #16
 8000b94:	fbbc f6f8 	udiv	r6, ip, r8
 8000b98:	fa1f fe87 	uxth.w	lr, r7
 8000b9c:	fb08 c116 	mls	r1, r8, r6, ip
 8000ba0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba4:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x60>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb2:	f080 8119 	bcs.w	8000de8 <__udivmoddi4+0x288>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 8116 	bls.w	8000de8 <__udivmoddi4+0x288>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x8c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	f080 8105 	bcs.w	8000dec <__udivmoddi4+0x28c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f240 8102 	bls.w	8000dec <__udivmoddi4+0x28c>
 8000be8:	3802      	subs	r0, #2
 8000bea:	443c      	add	r4, r7
 8000bec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf0:	eba4 040e 	sub.w	r4, r4, lr
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa0>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	b902      	cbnz	r2, 8000c0a <__udivmoddi4+0xaa>
 8000c08:	deff      	udf	#255	; 0xff
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d150      	bne.n	8000cb4 <__udivmoddi4+0x154>
 8000c12:	1bcb      	subs	r3, r1, r7
 8000c14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c18:	fa1f f887 	uxth.w	r8, r7
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c22:	0c21      	lsrs	r1, r4, #16
 8000c24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0xe4>
 8000c34:	1879      	adds	r1, r7, r1
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0xe2>
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	f200 80e9 	bhi.w	8000e14 <__udivmoddi4+0x2b4>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1ac9      	subs	r1, r1, r3
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c50:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x10c>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x10a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80d9 	bhi.w	8000e1c <__udivmoddi4+0x2bc>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e7bf      	b.n	8000bf6 <__udivmoddi4+0x96>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0x12e>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	f000 80b1 	beq.w	8000de2 <__udivmoddi4+0x282>
 8000c80:	2600      	movs	r6, #0
 8000c82:	e9c5 0100 	strd	r0, r1, [r5]
 8000c86:	4630      	mov	r0, r6
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f683 	clz	r6, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d14a      	bne.n	8000d2c <__udivmoddi4+0x1cc>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0x140>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80b8 	bhi.w	8000e10 <__udivmoddi4+0x2b0>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	468c      	mov	ip, r1
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0a8      	beq.n	8000c00 <__udivmoddi4+0xa0>
 8000cae:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cb2:	e7a5      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000cb4:	f1c2 0320 	rsb	r3, r2, #32
 8000cb8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cbc:	4097      	lsls	r7, r2
 8000cbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000cc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc6:	40d9      	lsrs	r1, r3
 8000cc8:	4330      	orrs	r0, r6
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f108 	mul.w	r1, r6, r8
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x19c>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cee:	f080 808d 	bcs.w	8000e0c <__udivmoddi4+0x2ac>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 808a 	bls.w	8000e0c <__udivmoddi4+0x2ac>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b281      	uxth	r1, r0
 8000d00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb00 f308 	mul.w	r3, r0, r8
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x1c4>
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d1a:	d273      	bcs.n	8000e04 <__udivmoddi4+0x2a4>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d971      	bls.n	8000e04 <__udivmoddi4+0x2a4>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4439      	add	r1, r7
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d2a:	e778      	b.n	8000c1e <__udivmoddi4+0xbe>
 8000d2c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d30:	fa03 f406 	lsl.w	r4, r3, r6
 8000d34:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d38:	431c      	orrs	r4, r3
 8000d3a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d42:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d46:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	0c3b      	lsrs	r3, r7, #16
 8000d4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d52:	fa1f f884 	uxth.w	r8, r4
 8000d56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d5a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d62:	458a      	cmp	sl, r1
 8000d64:	fa02 f206 	lsl.w	r2, r2, r6
 8000d68:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x220>
 8000d6e:	1861      	adds	r1, r4, r1
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d74:	d248      	bcs.n	8000e08 <__udivmoddi4+0x2a8>
 8000d76:	458a      	cmp	sl, r1
 8000d78:	d946      	bls.n	8000e08 <__udivmoddi4+0x2a8>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4421      	add	r1, r4
 8000d80:	eba1 010a 	sub.w	r1, r1, sl
 8000d84:	b2bf      	uxth	r7, r7
 8000d86:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d8a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d92:	fb00 f808 	mul.w	r8, r0, r8
 8000d96:	45b8      	cmp	r8, r7
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x24a>
 8000d9a:	19e7      	adds	r7, r4, r7
 8000d9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da0:	d22e      	bcs.n	8000e00 <__udivmoddi4+0x2a0>
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d92c      	bls.n	8000e00 <__udivmoddi4+0x2a0>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4427      	add	r7, r4
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	eba7 0708 	sub.w	r7, r7, r8
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	454f      	cmp	r7, r9
 8000db8:	46c6      	mov	lr, r8
 8000dba:	4649      	mov	r1, r9
 8000dbc:	d31a      	bcc.n	8000df4 <__udivmoddi4+0x294>
 8000dbe:	d017      	beq.n	8000df0 <__udivmoddi4+0x290>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x27a>
 8000dc2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dca:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dce:	40f2      	lsrs	r2, r6
 8000dd0:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd4:	40f7      	lsrs	r7, r6
 8000dd6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	462e      	mov	r6, r5
 8000de4:	4628      	mov	r0, r5
 8000de6:	e70b      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000de8:	4606      	mov	r6, r0
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fd      	b.n	8000bec <__udivmoddi4+0x8c>
 8000df0:	4543      	cmp	r3, r8
 8000df2:	d2e5      	bcs.n	8000dc0 <__udivmoddi4+0x260>
 8000df4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	e7df      	b.n	8000dc0 <__udivmoddi4+0x260>
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7d2      	b.n	8000daa <__udivmoddi4+0x24a>
 8000e04:	4660      	mov	r0, ip
 8000e06:	e78d      	b.n	8000d24 <__udivmoddi4+0x1c4>
 8000e08:	4681      	mov	r9, r0
 8000e0a:	e7b9      	b.n	8000d80 <__udivmoddi4+0x220>
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	e775      	b.n	8000cfc <__udivmoddi4+0x19c>
 8000e10:	4630      	mov	r0, r6
 8000e12:	e74a      	b.n	8000caa <__udivmoddi4+0x14a>
 8000e14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e18:	4439      	add	r1, r7
 8000e1a:	e713      	b.n	8000c44 <__udivmoddi4+0xe4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	e724      	b.n	8000c6c <__udivmoddi4+0x10c>
 8000e22:	bf00      	nop

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <turn_off_LED>:
		{1,2,3,4,5,6,7,-1},
		{1,2,3,4,6,7,-1}
};


void turn_off_LED(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	for (int i = 0; i<4; i++){
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	e00e      	b.n	8000e52 <turn_off_LED+0x2a>
			HAL_GPIO_WritePin(section_port[i], section_pins[i], GPIO_PIN_SET);
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <turn_off_LED+0x64>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <turn_off_LED+0x68>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e44:	2201      	movs	r2, #1
 8000e46:	4619      	mov	r1, r3
 8000e48:	f000 fe36 	bl	8001ab8 <HAL_GPIO_WritePin>
	for (int i = 0; i<4; i++){
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	dded      	ble.n	8000e34 <turn_off_LED+0xc>
		}

	for (int i = 1; i<10; i++){
 8000e58:	2301      	movs	r3, #1
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	e00e      	b.n	8000e7c <turn_off_LED+0x54>
		HAL_GPIO_WritePin(segments_port[i], segments_pins[i], GPIO_PIN_SET);
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <turn_off_LED+0x6c>)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <turn_off_LED+0x70>)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f000 fe21 	bl	8001ab8 <HAL_GPIO_WritePin>
	for (int i = 1; i<10; i++){
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b09      	cmp	r3, #9
 8000e80:	dded      	ble.n	8000e5e <turn_off_LED+0x36>
	}
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000028 	.word	0x20000028
 8000e90:	080039cc 	.word	0x080039cc
 8000e94:	20000004 	.word	0x20000004
 8000e98:	080039b8 	.word	0x080039b8
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <set_digit>:

int set_digit(int number){
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	turn_off_LED();
 8000ea8:	f7ff ffbe 	bl	8000e28 <turn_off_LED>
	if (number < -999) number = -999;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000eb2:	dc01      	bgt.n	8000eb8 <set_digit+0x18>
 8000eb4:	4b60      	ldr	r3, [pc, #384]	; (8001038 <set_digit+0x198>)
 8000eb6:	607b      	str	r3, [r7, #4]
	if (number > 9999) number = 9999;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	dd02      	ble.n	8000ec8 <set_digit+0x28>
 8000ec2:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ec6:	607b      	str	r3, [r7, #4]

	int discharge = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
	if (number != 0){
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d014      	beq.n	8000efc <set_digit+0x5c>
		discharge = log10(abs(number));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bfb8      	it	lt
 8000ed8:	425b      	neglt	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fae6 	bl	80004ac <__aeabi_i2d>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	ec43 2b10 	vmov	d0, r2, r3
 8000ee8:	f001 fb12 	bl	8002510 <log10>
 8000eec:	ec53 2b10 	vmov	r2, r3, d0
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fdf4 	bl	8000ae0 <__aeabi_d2iz>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	617b      	str	r3, [r7, #20]
	}

	for (int section = 0; section<discharge+1; section++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e06d      	b.n	8000fde <set_digit+0x13e>
		turn_off_LED();
 8000f02:	f7ff ff91 	bl	8000e28 <turn_off_LED>
		HAL_GPIO_WritePin(section_port[section], section_pins[section], GPIO_PIN_RESET);
 8000f06:	4a4d      	ldr	r2, [pc, #308]	; (800103c <set_digit+0x19c>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f0e:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <set_digit+0x1a0>)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f000 fdcd 	bl	8001ab8 <HAL_GPIO_WritePin>

		int num = abs(number % (int)(pow(10,section+1))/ (int)pow(10,section));//
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fac2 	bl	80004ac <__aeabi_i2d>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	ec43 2b11 	vmov	d1, r2, r3
 8000f30:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 8001030 <set_digit+0x190>
 8000f34:	f001 fb34 	bl	80025a0 <pow>
 8000f38:	ec53 2b10 	vmov	r2, r3, d0
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fdce 	bl	8000ae0 <__aeabi_d2iz>
 8000f44:	4602      	mov	r2, r0
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f4c:	fb02 f201 	mul.w	r2, r2, r1
 8000f50:	1a9c      	subs	r4, r3, r2
 8000f52:	6938      	ldr	r0, [r7, #16]
 8000f54:	f7ff faaa 	bl	80004ac <__aeabi_i2d>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	ec43 2b11 	vmov	d1, r2, r3
 8000f60:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8001030 <set_digit+0x190>
 8000f64:	f001 fb1c 	bl	80025a0 <pow>
 8000f68:	ec53 2b10 	vmov	r2, r3, d0
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fdb6 	bl	8000ae0 <__aeabi_d2iz>
 8000f74:	4603      	mov	r3, r0
 8000f76:	fb94 f3f3 	sdiv	r3, r4, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bfb8      	it	lt
 8000f7e:	425b      	neglt	r3, r3
 8000f80:	60bb      	str	r3, [r7, #8]
		int i = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]

		while (numbers[num][i] != -1){
 8000f86:	e01a      	b.n	8000fbe <set_digit+0x11e>
			HAL_GPIO_WritePin(segments_port[numbers[num][i]], segments_pins[numbers[num][i]], GPIO_PIN_RESET);
 8000f88:	492e      	ldr	r1, [pc, #184]	; (8001044 <set_digit+0x1a4>)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	00da      	lsls	r2, r3, #3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f96:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <set_digit+0x1a8>)
 8000f98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f9c:	4929      	ldr	r1, [pc, #164]	; (8001044 <set_digit+0x1a4>)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	00da      	lsls	r2, r3, #3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000faa:	4a28      	ldr	r2, [pc, #160]	; (800104c <set_digit+0x1ac>)
 8000fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f000 fd80 	bl	8001ab8 <HAL_GPIO_WritePin>
			i++;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
		while (numbers[num][i] != -1){
 8000fbe:	4921      	ldr	r1, [pc, #132]	; (8001044 <set_digit+0x1a4>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	00da      	lsls	r2, r3, #3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d1da      	bne.n	8000f88 <set_digit+0xe8>
		}
		HAL_Delay(5);
 8000fd2:	2005      	movs	r0, #5
 8000fd4:	f000 faba 	bl	800154c <HAL_Delay>
	for (int section = 0; section<discharge+1; section++){
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	da8d      	bge.n	8000f02 <set_digit+0x62>

	}
	if (number < 0) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da1a      	bge.n	8001022 <set_digit+0x182>
		turn_off_LED();
 8000fec:	f7ff ff1c 	bl	8000e28 <turn_off_LED>
		HAL_GPIO_WritePin(section_port[discharge+1], section_pins[discharge+1], GPIO_PIN_RESET);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <set_digit+0x19c>)
 8000ff6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <set_digit+0x1a0>)
 8001000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	f000 fd56 	bl	8001ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segments_port[7], segments_pins[7], GPIO_PIN_RESET);
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <set_digit+0x1a8>)
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001014:	2200      	movs	r2, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd4e 	bl	8001ab8 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f000 fa95 	bl	800154c <HAL_Delay>
	}

	return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	f3af 8000 	nop.w
 8001030:	00000000 	.word	0x00000000
 8001034:	40240000 	.word	0x40240000
 8001038:	fffffc19 	.word	0xfffffc19
 800103c:	20000028 	.word	0x20000028
 8001040:	080039cc 	.word	0x080039cc
 8001044:	080039d4 	.word	0x080039d4
 8001048:	20000004 	.word	0x20000004
 800104c:	080039b8 	.word	0x080039b8

08001050 <check_red_button>:

int check_red_button() {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	static GPIO_PinState previous_red_status = GPIO_PIN_SET;
	GPIO_PinState current_red_status =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001056:	2120      	movs	r1, #32
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <check_red_button+0x3c>)
 800105a:	f000 fd15 	bl	8001a88 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	if (previous_red_status == GPIO_PIN_SET && current_red_status == GPIO_PIN_RESET) {
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <check_red_button+0x40>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <check_red_button+0x2a>
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d104      	bne.n	800107a <check_red_button+0x2a>
		previous_red_status = current_red_status;
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <check_red_button+0x40>)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	7013      	strb	r3, [r2, #0]
		return 1;
 8001076:	2301      	movs	r3, #1
 8001078:	e003      	b.n	8001082 <check_red_button+0x32>
	}
	previous_red_status = current_red_status;
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <check_red_button+0x40>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	7013      	strb	r3, [r2, #0]
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020800 	.word	0x40020800
 8001090:	20000038 	.word	0x20000038

08001094 <check_blue_button>:

int check_blue_button() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	static GPIO_PinState previous_blue_status = GPIO_PIN_SET;
	GPIO_PinState current_blue_status =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <check_blue_button+0x3c>)
 800109e:	f000 fcf3 	bl	8001a88 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	if (previous_blue_status == GPIO_PIN_SET && current_blue_status == GPIO_PIN_RESET) {
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <check_blue_button+0x40>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <check_blue_button+0x2a>
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d104      	bne.n	80010be <check_blue_button+0x2a>
		previous_blue_status = current_blue_status;
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <check_blue_button+0x40>)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	7013      	strb	r3, [r2, #0]
		return 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e003      	b.n	80010c6 <check_blue_button+0x32>
	}
	previous_blue_status = current_blue_status;
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <check_blue_button+0x40>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	7013      	strb	r3, [r2, #0]
	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020800 	.word	0x40020800
 80010d4:	20000039 	.word	0x20000039

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f000 f9c4 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f820 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f000 f87e 	bl	80011e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
  turn_off_LED();
 80010e8:	f7ff fe9e 	bl	8000e28 <turn_off_LED>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
	  if (check_red_button()) counter++;
 80010ec:	f7ff ffb0 	bl	8001050 <check_red_button>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <main+0x28>
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <main+0x48>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a08      	ldr	r2, [pc, #32]	; (8001120 <main+0x48>)
 80010fe:	6013      	str	r3, [r2, #0]
	  if (check_blue_button()) counter--;
 8001100:	f7ff ffc8 	bl	8001094 <check_blue_button>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <main+0x3c>
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <main+0x48>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	4a03      	ldr	r2, [pc, #12]	; (8001120 <main+0x48>)
 8001112:	6013      	str	r3, [r2, #0]

	  set_digit(counter);
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <main+0x48>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fec1 	bl	8000ea0 <set_digit>
	  if (check_red_button()) counter++;
 800111e:	e7e5      	b.n	80010ec <main+0x14>
 8001120:	20000000 	.word	0x20000000

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2234      	movs	r2, #52	; 0x34
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f001 f9e4 	bl	8002500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <SystemClock_Config+0xb8>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a22      	ldr	r2, [pc, #136]	; (80011dc <SystemClock_Config+0xb8>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <SystemClock_Config+0xb8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <SystemClock_Config+0xbc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001170:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <SystemClock_Config+0xbc>)
 8001172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <SystemClock_Config+0xbc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fee9 	bl	8001f70 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011a4:	f000 f8cc 	bl	8001340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fc92 	bl	8001aec <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011ce:	f000 f8b7 	bl	8001340 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3750      	adds	r7, #80	; 0x50
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b4b      	ldr	r3, [pc, #300]	; (800132c <MX_GPIO_Init+0x148>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a4a      	ldr	r2, [pc, #296]	; (800132c <MX_GPIO_Init+0x148>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <MX_GPIO_Init+0x148>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b44      	ldr	r3, [pc, #272]	; (800132c <MX_GPIO_Init+0x148>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a43      	ldr	r2, [pc, #268]	; (800132c <MX_GPIO_Init+0x148>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <MX_GPIO_Init+0x148>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <MX_GPIO_Init+0x148>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a3c      	ldr	r2, [pc, #240]	; (800132c <MX_GPIO_Init+0x148>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <MX_GPIO_Init+0x148>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <MX_GPIO_Init+0x148>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a35      	ldr	r2, [pc, #212]	; (800132c <MX_GPIO_Init+0x148>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_GPIO_Init+0x148>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800126a:	2200      	movs	r2, #0
 800126c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001270:	482f      	ldr	r0, [pc, #188]	; (8001330 <MX_GPIO_Init+0x14c>)
 8001272:	f000 fc21 	bl	8001ab8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f641 4110 	movw	r1, #7184	; 0x1c10
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <MX_GPIO_Init+0x150>)
 800127e:	f000 fc1b 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	210a      	movs	r1, #10
 8001286:	482c      	ldr	r0, [pc, #176]	; (8001338 <MX_GPIO_Init+0x154>)
 8001288:	f000 fc16 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2104      	movs	r1, #4
 8001290:	482a      	ldr	r0, [pc, #168]	; (800133c <MX_GPIO_Init+0x158>)
 8001292:	f000 fc11 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001296:	f649 4340 	movw	r3, #40000	; 0x9c40
 800129a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4820      	ldr	r0, [pc, #128]	; (8001330 <MX_GPIO_Init+0x14c>)
 80012b0:	f000 fa56 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012b4:	f641 4310 	movw	r3, #7184	; 0x1c10
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4819      	ldr	r0, [pc, #100]	; (8001334 <MX_GPIO_Init+0x150>)
 80012ce:	f000 fa47 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012d2:	2360      	movs	r3, #96	; 0x60
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <MX_GPIO_Init+0x150>)
 80012e6:	f000 fa3b 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80012ea:	230a      	movs	r3, #10
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <MX_GPIO_Init+0x154>)
 8001302:	f000 fa2d 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001306:	2304      	movs	r3, #4
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_GPIO_Init+0x158>)
 800131e:	f000 fa1f 	bl	8001760 <HAL_GPIO_Init>

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000
 8001334:	40020800 	.word	0x40020800
 8001338:	40020400 	.word	0x40020400
 800133c:	40020c00 	.word	0x40020c00

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 f890 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141a:	490e      	ldr	r1, [pc, #56]	; (8001454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001430:	4c0b      	ldr	r4, [pc, #44]	; (8001460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143e:	f7ff ffd7 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001442:	f001 f839 	bl	80024b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fe47 	bl	80010d8 <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001458:	08003b78 	.word	0x08003b78
  ldr r2, =_sbss
 800145c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001460:	200000d0 	.word	0x200000d0

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <HAL_Init+0x40>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_Init+0x40>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x40>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f931 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff ff56 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f93b 	bl	8001746 <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 f911 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000003c 	.word	0x2000003c
 8001504:	20000044 	.word	0x20000044
 8001508:	20000040 	.word	0x20000040

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000044 	.word	0x20000044
 8001530:	200000cc 	.word	0x200000cc

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200000cc 	.word	0x200000cc

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000044 	.word	0x20000044

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff47 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff5c 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffb0 	bl	80016b4 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e165      	b.n	8001a48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8154 	bne.w	8001a42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80ae 	beq.w	8001a42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a5c      	ldr	r2, [pc, #368]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4f      	ldr	r2, [pc, #316]	; (8001a68 <HAL_GPIO_Init+0x308>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d025      	beq.n	800197a <HAL_GPIO_Init+0x21a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4e      	ldr	r2, [pc, #312]	; (8001a6c <HAL_GPIO_Init+0x30c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <HAL_GPIO_Init+0x216>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4d      	ldr	r2, [pc, #308]	; (8001a70 <HAL_GPIO_Init+0x310>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x212>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_GPIO_Init+0x314>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_GPIO_Init+0x318>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x20a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <HAL_GPIO_Init+0x31c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x206>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <HAL_GPIO_Init+0x320>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x202>
 800195e:	2306      	movs	r3, #6
 8001960:	e00c      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001962:	2307      	movs	r3, #7
 8001964:	e00a      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001966:	2305      	movs	r3, #5
 8001968:	e008      	b.n	800197c <HAL_GPIO_Init+0x21c>
 800196a:	2304      	movs	r3, #4
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x21c>
 800196e:	2303      	movs	r3, #3
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x21c>
 800197a:	2300      	movs	r3, #0
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800198c:	4935      	ldr	r1, [pc, #212]	; (8001a64 <HAL_GPIO_Init+0x304>)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199a:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <HAL_GPIO_Init+0x324>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019be:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a3c:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3301      	adds	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	f67f ae96 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020c00 	.word	0x40020c00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40021400 	.word	0x40021400
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e001      	b.n	8001aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0cc      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d90c      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b65      	ldr	r3, [pc, #404]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b8      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	494d      	ldr	r1, [pc, #308]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d044      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d119      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e07f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e067      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 0203 	bic.w	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4934      	ldr	r1, [pc, #208]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bdc:	f7ff fcaa 	bl	8001534 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7ff fca6 	bl	8001534 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e04f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 020c 	and.w	r2, r3, #12
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1eb      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d20c      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e032      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4916      	ldr	r1, [pc, #88]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c72:	f000 f821 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc0a 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08003b14 	.word	0x08003b14
 8001cb0:	2000003c 	.word	0x2000003c
 8001cb4:	20000040 	.word	0x20000040

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cc0:	2600      	movs	r6, #0
 8001cc2:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001cc4:	2600      	movs	r6, #0
 8001cc6:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001cc8:	2600      	movs	r6, #0
 8001cca:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001ccc:	2600      	movs	r6, #0
 8001cce:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd4:	4ea3      	ldr	r6, [pc, #652]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001cd6:	68b6      	ldr	r6, [r6, #8]
 8001cd8:	f006 060c 	and.w	r6, r6, #12
 8001cdc:	2e0c      	cmp	r6, #12
 8001cde:	f200 8137 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x298>
 8001ce2:	f20f 0c08 	addw	ip, pc, #8
 8001ce6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001d21 	.word	0x08001d21
 8001cf0:	08001f51 	.word	0x08001f51
 8001cf4:	08001f51 	.word	0x08001f51
 8001cf8:	08001f51 	.word	0x08001f51
 8001cfc:	08001d27 	.word	0x08001d27
 8001d00:	08001f51 	.word	0x08001f51
 8001d04:	08001f51 	.word	0x08001f51
 8001d08:	08001f51 	.word	0x08001f51
 8001d0c:	08001d2d 	.word	0x08001d2d
 8001d10:	08001f51 	.word	0x08001f51
 8001d14:	08001f51 	.word	0x08001f51
 8001d18:	08001f51 	.word	0x08001f51
 8001d1c:	08001e43 	.word	0x08001e43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d20:	4b91      	ldr	r3, [pc, #580]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d22:	613b      	str	r3, [r7, #16]
       break;
 8001d24:	e117      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d26:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d28:	613b      	str	r3, [r7, #16]
      break;
 8001d2a:	e114      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d34:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d024      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d52:	f04f 0500 	mov.w	r5, #0
 8001d56:	ea02 0004 	and.w	r0, r2, r4
 8001d5a:	ea03 0105 	and.w	r1, r3, r5
 8001d5e:	4b83      	ldr	r3, [pc, #524]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d60:	fb03 f201 	mul.w	r2, r3, r1
 8001d64:	2300      	movs	r3, #0
 8001d66:	fb03 f300 	mul.w	r3, r3, r0
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a7f      	ldr	r2, [pc, #508]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d6e:	fba0 0102 	umull	r0, r1, r0, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	4619      	mov	r1, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	f7fe fed7 	bl	8000b30 <__aeabi_uldivmod>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4613      	mov	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e04c      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	461a      	mov	r2, r3
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	ea02 0800 	and.w	r8, r2, r0
 8001da4:	ea03 0901 	and.w	r9, r3, r1
 8001da8:	4640      	mov	r0, r8
 8001daa:	4649      	mov	r1, r9
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	014b      	lsls	r3, r1, #5
 8001db6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dba:	0142      	lsls	r2, r0, #5
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	ebb0 0008 	subs.w	r0, r0, r8
 8001dc4:	eb61 0109 	sbc.w	r1, r1, r9
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	018b      	lsls	r3, r1, #6
 8001dd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dd6:	0182      	lsls	r2, r0, #6
 8001dd8:	1a12      	subs	r2, r2, r0
 8001dda:	eb63 0301 	sbc.w	r3, r3, r1
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	00d9      	lsls	r1, r3, #3
 8001de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dec:	00d0      	lsls	r0, r2, #3
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	eb12 0208 	adds.w	r2, r2, r8
 8001df6:	eb43 0309 	adc.w	r3, r3, r9
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	0299      	lsls	r1, r3, #10
 8001e04:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e08:	0290      	lsls	r0, r2, #10
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f7fe fe89 	bl	8000b30 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4613      	mov	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e26:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	3301      	adds	r3, #1
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	613b      	str	r3, [r7, #16]
      break;
 8001e40:	e089      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e42:	4948      	ldr	r1, [pc, #288]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e44:	6849      	ldr	r1, [r1, #4]
 8001e46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e4a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e4c:	4945      	ldr	r1, [pc, #276]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e4e:	6849      	ldr	r1, [r1, #4]
 8001e50:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e54:	2900      	cmp	r1, #0
 8001e56:	d024      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e58:	4942      	ldr	r1, [pc, #264]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e5a:	6849      	ldr	r1, [r1, #4]
 8001e5c:	0989      	lsrs	r1, r1, #6
 8001e5e:	4608      	mov	r0, r1
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001e68:	f04f 0500 	mov.w	r5, #0
 8001e6c:	ea00 0204 	and.w	r2, r0, r4
 8001e70:	ea01 0305 	and.w	r3, r1, r5
 8001e74:	493d      	ldr	r1, [pc, #244]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001e76:	fb01 f003 	mul.w	r0, r1, r3
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	fb01 f102 	mul.w	r1, r1, r2
 8001e80:	1844      	adds	r4, r0, r1
 8001e82:	493a      	ldr	r1, [pc, #232]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001e84:	fba2 0101 	umull	r0, r1, r2, r1
 8001e88:	1863      	adds	r3, r4, r1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	f7fe fe4c 	bl	8000b30 <__aeabi_uldivmod>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e04a      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	099b      	lsrs	r3, r3, #6
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eb2:	f04f 0100 	mov.w	r1, #0
 8001eb6:	ea02 0400 	and.w	r4, r2, r0
 8001eba:	ea03 0501 	and.w	r5, r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	014b      	lsls	r3, r1, #5
 8001ecc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ed0:	0142      	lsls	r2, r0, #5
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	1b00      	subs	r0, r0, r4
 8001ed8:	eb61 0105 	sbc.w	r1, r1, r5
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	018b      	lsls	r3, r1, #6
 8001ee6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eea:	0182      	lsls	r2, r0, #6
 8001eec:	1a12      	subs	r2, r2, r0
 8001eee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	00d9      	lsls	r1, r3, #3
 8001efc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f00:	00d0      	lsls	r0, r2, #3
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	1912      	adds	r2, r2, r4
 8001f08:	eb45 0303 	adc.w	r3, r5, r3
 8001f0c:	f04f 0000 	mov.w	r0, #0
 8001f10:	f04f 0100 	mov.w	r1, #0
 8001f14:	0299      	lsls	r1, r3, #10
 8001f16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f1a:	0290      	lsls	r0, r2, #10
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	f7fe fe00 	bl	8000b30 <__aeabi_uldivmod>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4613      	mov	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	0f1b      	lsrs	r3, r3, #28
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	613b      	str	r3, [r7, #16]
      break;
 8001f4e:	e002      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001f52:	613b      	str	r3, [r7, #16]
      break;
 8001f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f56:	693b      	ldr	r3, [r7, #16]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	017d7840 	.word	0x017d7840

08001f70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e28d      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8083 	beq.w	8002096 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f90:	4b94      	ldr	r3, [pc, #592]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f9c:	4b91      	ldr	r3, [pc, #580]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa8:	4b8e      	ldr	r3, [pc, #568]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d112      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05b      	beq.n	8002094 <HAL_RCC_OscConfig+0x124>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d157      	bne.n	8002094 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e25a      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x90>
 8001ff2:	4b7c      	ldr	r3, [pc, #496]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7b      	ldr	r2, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xcc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xb4>
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a75      	ldr	r2, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b73      	ldr	r3, [pc, #460]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a72      	ldr	r2, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xcc>
 8002024:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6e      	ldr	r2, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6b      	ldr	r2, [pc, #428]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fa76 	bl	8001534 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fa72 	bl	8001534 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e21f      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xdc>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff fa62 	bl	8001534 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff fa5e 	bl	8001534 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e20b      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x104>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06f      	beq.n	8002182 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020a2:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d017      	beq.n	80020de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ae:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ba:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x186>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1d3      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_OscConfig+0x278>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff fa0b 	bl	8001534 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7ff fa07 	bl	8001534 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1b4      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4925      	ldr	r1, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x278>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff f9ea 	bl	8001534 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002164:	f7ff f9e6 	bl	8001534 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e193      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d036      	beq.n	80021fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff f9ca 	bl	8001534 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a4:	f7ff f9c6 	bl	8001534 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e173      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x234>
 80021c2:	e01b      	b.n	80021fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff f9b3 	bl	8001534 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	e00e      	b.n	80021f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff f9af 	bl	8001534 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d907      	bls.n	80021f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e15c      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000
 80021ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b8a      	ldr	r3, [pc, #552]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ea      	bne.n	80021d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8097 	beq.w	8002338 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b83      	ldr	r3, [pc, #524]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b7f      	ldr	r3, [pc, #508]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a7e      	ldr	r2, [pc, #504]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b7c      	ldr	r3, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b79      	ldr	r3, [pc, #484]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7ff f96f 	bl	8001534 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7ff f96b 	bl	8001534 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e118      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x31e>
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a65      	ldr	r2, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x358>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x340>
 8002296:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a60      	ldr	r2, [pc, #384]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b5e      	ldr	r3, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a5d      	ldr	r2, [pc, #372]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x358>
 80022b0:	4b5a      	ldr	r3, [pc, #360]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a59      	ldr	r2, [pc, #356]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a56      	ldr	r2, [pc, #344]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff f930 	bl	8001534 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7ff f92c 	bl	8001534 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0d7      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0ee      	beq.n	80022d8 <HAL_RCC_OscConfig+0x368>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7ff f91a 	bl	8001534 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7ff f916 	bl	8001534 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0c1      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	4b40      	ldr	r3, [pc, #256]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ee      	bne.n	8002304 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80ad 	beq.w	800249c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d060      	beq.n	8002410 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d145      	bne.n	80023e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b33      	ldr	r3, [pc, #204]	; (8002424 <HAL_RCC_OscConfig+0x4b4>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f8ea 	bl	8001534 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff f8e6 	bl	8001534 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e093      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	3b01      	subs	r3, #1
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	491b      	ldr	r1, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x4b4>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7ff f8bb 	bl	8001534 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff f8b7 	bl	8001534 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e064      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x452>
 80023e0:	e05c      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x4b4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff f8a4 	bl	8001534 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f8a0 	bl	8001534 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04d      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x480>
 800240e:	e045      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e040      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000
 8002424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_RCC_OscConfig+0x538>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d030      	beq.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d129      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d122      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800245e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d119      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	3b01      	subs	r3, #1
 8002472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d10f      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <__errno>:
 80024ac:	4b01      	ldr	r3, [pc, #4]	; (80024b4 <__errno+0x8>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000048 	.word	0x20000048

080024b8 <__libc_init_array>:
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	4d0d      	ldr	r5, [pc, #52]	; (80024f0 <__libc_init_array+0x38>)
 80024bc:	4c0d      	ldr	r4, [pc, #52]	; (80024f4 <__libc_init_array+0x3c>)
 80024be:	1b64      	subs	r4, r4, r5
 80024c0:	10a4      	asrs	r4, r4, #2
 80024c2:	2600      	movs	r6, #0
 80024c4:	42a6      	cmp	r6, r4
 80024c6:	d109      	bne.n	80024dc <__libc_init_array+0x24>
 80024c8:	4d0b      	ldr	r5, [pc, #44]	; (80024f8 <__libc_init_array+0x40>)
 80024ca:	4c0c      	ldr	r4, [pc, #48]	; (80024fc <__libc_init_array+0x44>)
 80024cc:	f001 fa66 	bl	800399c <_init>
 80024d0:	1b64      	subs	r4, r4, r5
 80024d2:	10a4      	asrs	r4, r4, #2
 80024d4:	2600      	movs	r6, #0
 80024d6:	42a6      	cmp	r6, r4
 80024d8:	d105      	bne.n	80024e6 <__libc_init_array+0x2e>
 80024da:	bd70      	pop	{r4, r5, r6, pc}
 80024dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e0:	4798      	blx	r3
 80024e2:	3601      	adds	r6, #1
 80024e4:	e7ee      	b.n	80024c4 <__libc_init_array+0xc>
 80024e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ea:	4798      	blx	r3
 80024ec:	3601      	adds	r6, #1
 80024ee:	e7f2      	b.n	80024d6 <__libc_init_array+0x1e>
 80024f0:	08003b70 	.word	0x08003b70
 80024f4:	08003b70 	.word	0x08003b70
 80024f8:	08003b70 	.word	0x08003b70
 80024fc:	08003b74 	.word	0x08003b74

08002500 <memset>:
 8002500:	4402      	add	r2, r0
 8002502:	4603      	mov	r3, r0
 8002504:	4293      	cmp	r3, r2
 8002506:	d100      	bne.n	800250a <memset+0xa>
 8002508:	4770      	bx	lr
 800250a:	f803 1b01 	strb.w	r1, [r3], #1
 800250e:	e7f9      	b.n	8002504 <memset+0x4>

08002510 <log10>:
 8002510:	b538      	push	{r3, r4, r5, lr}
 8002512:	ed2d 8b02 	vpush	{d8}
 8002516:	ec55 4b10 	vmov	r4, r5, d0
 800251a:	f000 f8f1 	bl	8002700 <__ieee754_log10>
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <log10+0x88>)
 8002520:	eeb0 8a40 	vmov.f32	s16, s0
 8002524:	eef0 8a60 	vmov.f32	s17, s1
 8002528:	f993 3000 	ldrsb.w	r3, [r3]
 800252c:	3301      	adds	r3, #1
 800252e:	d01a      	beq.n	8002566 <log10+0x56>
 8002530:	4622      	mov	r2, r4
 8002532:	462b      	mov	r3, r5
 8002534:	4620      	mov	r0, r4
 8002536:	4629      	mov	r1, r5
 8002538:	f7fe fabc 	bl	8000ab4 <__aeabi_dcmpun>
 800253c:	b998      	cbnz	r0, 8002566 <log10+0x56>
 800253e:	2200      	movs	r2, #0
 8002540:	2300      	movs	r3, #0
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fe fa97 	bl	8000a78 <__aeabi_dcmple>
 800254a:	b160      	cbz	r0, 8002566 <log10+0x56>
 800254c:	2200      	movs	r2, #0
 800254e:	2300      	movs	r3, #0
 8002550:	4620      	mov	r0, r4
 8002552:	4629      	mov	r1, r5
 8002554:	f7fe fa7c 	bl	8000a50 <__aeabi_dcmpeq>
 8002558:	b160      	cbz	r0, 8002574 <log10+0x64>
 800255a:	f7ff ffa7 	bl	80024ac <__errno>
 800255e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8002590 <log10+0x80>
 8002562:	2322      	movs	r3, #34	; 0x22
 8002564:	6003      	str	r3, [r0, #0]
 8002566:	eeb0 0a48 	vmov.f32	s0, s16
 800256a:	eef0 0a68 	vmov.f32	s1, s17
 800256e:	ecbd 8b02 	vpop	{d8}
 8002572:	bd38      	pop	{r3, r4, r5, pc}
 8002574:	f7ff ff9a 	bl	80024ac <__errno>
 8002578:	ecbd 8b02 	vpop	{d8}
 800257c:	2321      	movs	r3, #33	; 0x21
 800257e:	6003      	str	r3, [r0, #0]
 8002580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <log10+0x8c>)
 8002586:	f000 bf33 	b.w	80033f0 <nan>
 800258a:	bf00      	nop
 800258c:	f3af 8000 	nop.w
 8002590:	00000000 	.word	0x00000000
 8002594:	fff00000 	.word	0xfff00000
 8002598:	200000ac 	.word	0x200000ac
 800259c:	08003b24 	.word	0x08003b24

080025a0 <pow>:
 80025a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025a4:	ec59 8b10 	vmov	r8, r9, d0
 80025a8:	ec57 6b11 	vmov	r6, r7, d1
 80025ac:	f000 f934 	bl	8002818 <__ieee754_pow>
 80025b0:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <pow+0x14c>)
 80025b2:	f993 3000 	ldrsb.w	r3, [r3]
 80025b6:	3301      	adds	r3, #1
 80025b8:	ec55 4b10 	vmov	r4, r5, d0
 80025bc:	d015      	beq.n	80025ea <pow+0x4a>
 80025be:	4632      	mov	r2, r6
 80025c0:	463b      	mov	r3, r7
 80025c2:	4630      	mov	r0, r6
 80025c4:	4639      	mov	r1, r7
 80025c6:	f7fe fa75 	bl	8000ab4 <__aeabi_dcmpun>
 80025ca:	b970      	cbnz	r0, 80025ea <pow+0x4a>
 80025cc:	4642      	mov	r2, r8
 80025ce:	464b      	mov	r3, r9
 80025d0:	4640      	mov	r0, r8
 80025d2:	4649      	mov	r1, r9
 80025d4:	f7fe fa6e 	bl	8000ab4 <__aeabi_dcmpun>
 80025d8:	2200      	movs	r2, #0
 80025da:	2300      	movs	r3, #0
 80025dc:	b148      	cbz	r0, 80025f2 <pow+0x52>
 80025de:	4630      	mov	r0, r6
 80025e0:	4639      	mov	r1, r7
 80025e2:	f7fe fa35 	bl	8000a50 <__aeabi_dcmpeq>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d17d      	bne.n	80026e6 <pow+0x146>
 80025ea:	ec45 4b10 	vmov	d0, r4, r5
 80025ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025f2:	4640      	mov	r0, r8
 80025f4:	4649      	mov	r1, r9
 80025f6:	f7fe fa2b 	bl	8000a50 <__aeabi_dcmpeq>
 80025fa:	b1e0      	cbz	r0, 8002636 <pow+0x96>
 80025fc:	2200      	movs	r2, #0
 80025fe:	2300      	movs	r3, #0
 8002600:	4630      	mov	r0, r6
 8002602:	4639      	mov	r1, r7
 8002604:	f7fe fa24 	bl	8000a50 <__aeabi_dcmpeq>
 8002608:	2800      	cmp	r0, #0
 800260a:	d16c      	bne.n	80026e6 <pow+0x146>
 800260c:	ec47 6b10 	vmov	d0, r6, r7
 8002610:	f000 fee1 	bl	80033d6 <finite>
 8002614:	2800      	cmp	r0, #0
 8002616:	d0e8      	beq.n	80025ea <pow+0x4a>
 8002618:	2200      	movs	r2, #0
 800261a:	2300      	movs	r3, #0
 800261c:	4630      	mov	r0, r6
 800261e:	4639      	mov	r1, r7
 8002620:	f7fe fa20 	bl	8000a64 <__aeabi_dcmplt>
 8002624:	2800      	cmp	r0, #0
 8002626:	d0e0      	beq.n	80025ea <pow+0x4a>
 8002628:	f7ff ff40 	bl	80024ac <__errno>
 800262c:	2321      	movs	r3, #33	; 0x21
 800262e:	6003      	str	r3, [r0, #0]
 8002630:	2400      	movs	r4, #0
 8002632:	4d2f      	ldr	r5, [pc, #188]	; (80026f0 <pow+0x150>)
 8002634:	e7d9      	b.n	80025ea <pow+0x4a>
 8002636:	ec45 4b10 	vmov	d0, r4, r5
 800263a:	f000 fecc 	bl	80033d6 <finite>
 800263e:	bbb8      	cbnz	r0, 80026b0 <pow+0x110>
 8002640:	ec49 8b10 	vmov	d0, r8, r9
 8002644:	f000 fec7 	bl	80033d6 <finite>
 8002648:	b390      	cbz	r0, 80026b0 <pow+0x110>
 800264a:	ec47 6b10 	vmov	d0, r6, r7
 800264e:	f000 fec2 	bl	80033d6 <finite>
 8002652:	b368      	cbz	r0, 80026b0 <pow+0x110>
 8002654:	4622      	mov	r2, r4
 8002656:	462b      	mov	r3, r5
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7fe fa2a 	bl	8000ab4 <__aeabi_dcmpun>
 8002660:	b160      	cbz	r0, 800267c <pow+0xdc>
 8002662:	f7ff ff23 	bl	80024ac <__errno>
 8002666:	2321      	movs	r3, #33	; 0x21
 8002668:	6003      	str	r3, [r0, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	2300      	movs	r3, #0
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe f8af 	bl	80007d4 <__aeabi_ddiv>
 8002676:	4604      	mov	r4, r0
 8002678:	460d      	mov	r5, r1
 800267a:	e7b6      	b.n	80025ea <pow+0x4a>
 800267c:	f7ff ff16 	bl	80024ac <__errno>
 8002680:	2322      	movs	r3, #34	; 0x22
 8002682:	6003      	str	r3, [r0, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	2300      	movs	r3, #0
 8002688:	4640      	mov	r0, r8
 800268a:	4649      	mov	r1, r9
 800268c:	f7fe f9ea 	bl	8000a64 <__aeabi_dcmplt>
 8002690:	2400      	movs	r4, #0
 8002692:	b158      	cbz	r0, 80026ac <pow+0x10c>
 8002694:	ec47 6b10 	vmov	d0, r6, r7
 8002698:	f000 feb2 	bl	8003400 <rint>
 800269c:	4632      	mov	r2, r6
 800269e:	ec51 0b10 	vmov	r0, r1, d0
 80026a2:	463b      	mov	r3, r7
 80026a4:	f7fe f9d4 	bl	8000a50 <__aeabi_dcmpeq>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0c2      	beq.n	8002632 <pow+0x92>
 80026ac:	4d11      	ldr	r5, [pc, #68]	; (80026f4 <pow+0x154>)
 80026ae:	e79c      	b.n	80025ea <pow+0x4a>
 80026b0:	2200      	movs	r2, #0
 80026b2:	2300      	movs	r3, #0
 80026b4:	4620      	mov	r0, r4
 80026b6:	4629      	mov	r1, r5
 80026b8:	f7fe f9ca 	bl	8000a50 <__aeabi_dcmpeq>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d094      	beq.n	80025ea <pow+0x4a>
 80026c0:	ec49 8b10 	vmov	d0, r8, r9
 80026c4:	f000 fe87 	bl	80033d6 <finite>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d08e      	beq.n	80025ea <pow+0x4a>
 80026cc:	ec47 6b10 	vmov	d0, r6, r7
 80026d0:	f000 fe81 	bl	80033d6 <finite>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d088      	beq.n	80025ea <pow+0x4a>
 80026d8:	f7ff fee8 	bl	80024ac <__errno>
 80026dc:	2322      	movs	r3, #34	; 0x22
 80026de:	6003      	str	r3, [r0, #0]
 80026e0:	2400      	movs	r4, #0
 80026e2:	2500      	movs	r5, #0
 80026e4:	e781      	b.n	80025ea <pow+0x4a>
 80026e6:	4d04      	ldr	r5, [pc, #16]	; (80026f8 <pow+0x158>)
 80026e8:	2400      	movs	r4, #0
 80026ea:	e77e      	b.n	80025ea <pow+0x4a>
 80026ec:	200000ac 	.word	0x200000ac
 80026f0:	fff00000 	.word	0xfff00000
 80026f4:	7ff00000 	.word	0x7ff00000
 80026f8:	3ff00000 	.word	0x3ff00000
 80026fc:	00000000 	.word	0x00000000

08002700 <__ieee754_log10>:
 8002700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002704:	ec55 4b10 	vmov	r4, r5, d0
 8002708:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800270c:	462b      	mov	r3, r5
 800270e:	da2f      	bge.n	8002770 <__ieee754_log10+0x70>
 8002710:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8002714:	4322      	orrs	r2, r4
 8002716:	d109      	bne.n	800272c <__ieee754_log10+0x2c>
 8002718:	493b      	ldr	r1, [pc, #236]	; (8002808 <__ieee754_log10+0x108>)
 800271a:	2200      	movs	r2, #0
 800271c:	2300      	movs	r3, #0
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe f858 	bl	80007d4 <__aeabi_ddiv>
 8002724:	ec41 0b10 	vmov	d0, r0, r1
 8002728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800272c:	2d00      	cmp	r5, #0
 800272e:	da09      	bge.n	8002744 <__ieee754_log10+0x44>
 8002730:	ee10 2a10 	vmov	r2, s0
 8002734:	ee10 0a10 	vmov	r0, s0
 8002738:	4629      	mov	r1, r5
 800273a:	f7fd fd69 	bl	8000210 <__aeabi_dsub>
 800273e:	2200      	movs	r2, #0
 8002740:	2300      	movs	r3, #0
 8002742:	e7ed      	b.n	8002720 <__ieee754_log10+0x20>
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <__ieee754_log10+0x10c>)
 8002746:	2200      	movs	r2, #0
 8002748:	4629      	mov	r1, r5
 800274a:	ee10 0a10 	vmov	r0, s0
 800274e:	f7fd ff17 	bl	8000580 <__aeabi_dmul>
 8002752:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8002756:	4604      	mov	r4, r0
 8002758:	460d      	mov	r5, r1
 800275a:	460b      	mov	r3, r1
 800275c:	492c      	ldr	r1, [pc, #176]	; (8002810 <__ieee754_log10+0x110>)
 800275e:	428b      	cmp	r3, r1
 8002760:	dd08      	ble.n	8002774 <__ieee754_log10+0x74>
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	4620      	mov	r0, r4
 8002768:	4629      	mov	r1, r5
 800276a:	f7fd fd53 	bl	8000214 <__adddf3>
 800276e:	e7d9      	b.n	8002724 <__ieee754_log10+0x24>
 8002770:	2200      	movs	r2, #0
 8002772:	e7f3      	b.n	800275c <__ieee754_log10+0x5c>
 8002774:	1518      	asrs	r0, r3, #20
 8002776:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800277a:	4410      	add	r0, r2
 800277c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8002780:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002784:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8002788:	f7fd fe90 	bl	80004ac <__aeabi_i2d>
 800278c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8002790:	3303      	adds	r3, #3
 8002792:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8002796:	ec45 4b10 	vmov	d0, r4, r5
 800279a:	4606      	mov	r6, r0
 800279c:	460f      	mov	r7, r1
 800279e:	f000 ff43 	bl	8003628 <__ieee754_log>
 80027a2:	a313      	add	r3, pc, #76	; (adr r3, 80027f0 <__ieee754_log10+0xf0>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	4630      	mov	r0, r6
 80027aa:	4639      	mov	r1, r7
 80027ac:	ec59 8b10 	vmov	r8, r9, d0
 80027b0:	f7fd fee6 	bl	8000580 <__aeabi_dmul>
 80027b4:	a310      	add	r3, pc, #64	; (adr r3, 80027f8 <__ieee754_log10+0xf8>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	4604      	mov	r4, r0
 80027bc:	460d      	mov	r5, r1
 80027be:	4640      	mov	r0, r8
 80027c0:	4649      	mov	r1, r9
 80027c2:	f7fd fedd 	bl	8000580 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7fd fd21 	bl	8000214 <__adddf3>
 80027d2:	a30b      	add	r3, pc, #44	; (adr r3, 8002800 <__ieee754_log10+0x100>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	4604      	mov	r4, r0
 80027da:	460d      	mov	r5, r1
 80027dc:	4630      	mov	r0, r6
 80027de:	4639      	mov	r1, r7
 80027e0:	f7fd fece 	bl	8000580 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	e7bd      	b.n	800276a <__ieee754_log10+0x6a>
 80027ee:	bf00      	nop
 80027f0:	11f12b36 	.word	0x11f12b36
 80027f4:	3d59fef3 	.word	0x3d59fef3
 80027f8:	1526e50e 	.word	0x1526e50e
 80027fc:	3fdbcb7b 	.word	0x3fdbcb7b
 8002800:	509f6000 	.word	0x509f6000
 8002804:	3fd34413 	.word	0x3fd34413
 8002808:	c3500000 	.word	0xc3500000
 800280c:	43500000 	.word	0x43500000
 8002810:	7fefffff 	.word	0x7fefffff
 8002814:	00000000 	.word	0x00000000

08002818 <__ieee754_pow>:
 8002818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281c:	ed2d 8b06 	vpush	{d8-d10}
 8002820:	b08d      	sub	sp, #52	; 0x34
 8002822:	ed8d 1b02 	vstr	d1, [sp, #8]
 8002826:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800282a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800282e:	ea56 0100 	orrs.w	r1, r6, r0
 8002832:	ec53 2b10 	vmov	r2, r3, d0
 8002836:	f000 84d1 	beq.w	80031dc <__ieee754_pow+0x9c4>
 800283a:	497f      	ldr	r1, [pc, #508]	; (8002a38 <__ieee754_pow+0x220>)
 800283c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002840:	428c      	cmp	r4, r1
 8002842:	ee10 8a10 	vmov	r8, s0
 8002846:	4699      	mov	r9, r3
 8002848:	dc09      	bgt.n	800285e <__ieee754_pow+0x46>
 800284a:	d103      	bne.n	8002854 <__ieee754_pow+0x3c>
 800284c:	b97a      	cbnz	r2, 800286e <__ieee754_pow+0x56>
 800284e:	42a6      	cmp	r6, r4
 8002850:	dd02      	ble.n	8002858 <__ieee754_pow+0x40>
 8002852:	e00c      	b.n	800286e <__ieee754_pow+0x56>
 8002854:	428e      	cmp	r6, r1
 8002856:	dc02      	bgt.n	800285e <__ieee754_pow+0x46>
 8002858:	428e      	cmp	r6, r1
 800285a:	d110      	bne.n	800287e <__ieee754_pow+0x66>
 800285c:	b178      	cbz	r0, 800287e <__ieee754_pow+0x66>
 800285e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002862:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002866:	ea54 0308 	orrs.w	r3, r4, r8
 800286a:	f000 84b7 	beq.w	80031dc <__ieee754_pow+0x9c4>
 800286e:	4873      	ldr	r0, [pc, #460]	; (8002a3c <__ieee754_pow+0x224>)
 8002870:	b00d      	add	sp, #52	; 0x34
 8002872:	ecbd 8b06 	vpop	{d8-d10}
 8002876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287a:	f000 bdb9 	b.w	80033f0 <nan>
 800287e:	f1b9 0f00 	cmp.w	r9, #0
 8002882:	da36      	bge.n	80028f2 <__ieee754_pow+0xda>
 8002884:	496e      	ldr	r1, [pc, #440]	; (8002a40 <__ieee754_pow+0x228>)
 8002886:	428e      	cmp	r6, r1
 8002888:	dc51      	bgt.n	800292e <__ieee754_pow+0x116>
 800288a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800288e:	428e      	cmp	r6, r1
 8002890:	f340 84af 	ble.w	80031f2 <__ieee754_pow+0x9da>
 8002894:	1531      	asrs	r1, r6, #20
 8002896:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800289a:	2914      	cmp	r1, #20
 800289c:	dd0f      	ble.n	80028be <__ieee754_pow+0xa6>
 800289e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80028a2:	fa20 fc01 	lsr.w	ip, r0, r1
 80028a6:	fa0c f101 	lsl.w	r1, ip, r1
 80028aa:	4281      	cmp	r1, r0
 80028ac:	f040 84a1 	bne.w	80031f2 <__ieee754_pow+0x9da>
 80028b0:	f00c 0c01 	and.w	ip, ip, #1
 80028b4:	f1cc 0102 	rsb	r1, ip, #2
 80028b8:	9100      	str	r1, [sp, #0]
 80028ba:	b180      	cbz	r0, 80028de <__ieee754_pow+0xc6>
 80028bc:	e059      	b.n	8002972 <__ieee754_pow+0x15a>
 80028be:	2800      	cmp	r0, #0
 80028c0:	d155      	bne.n	800296e <__ieee754_pow+0x156>
 80028c2:	f1c1 0114 	rsb	r1, r1, #20
 80028c6:	fa46 fc01 	asr.w	ip, r6, r1
 80028ca:	fa0c f101 	lsl.w	r1, ip, r1
 80028ce:	42b1      	cmp	r1, r6
 80028d0:	f040 848c 	bne.w	80031ec <__ieee754_pow+0x9d4>
 80028d4:	f00c 0c01 	and.w	ip, ip, #1
 80028d8:	f1cc 0102 	rsb	r1, ip, #2
 80028dc:	9100      	str	r1, [sp, #0]
 80028de:	4959      	ldr	r1, [pc, #356]	; (8002a44 <__ieee754_pow+0x22c>)
 80028e0:	428e      	cmp	r6, r1
 80028e2:	d12d      	bne.n	8002940 <__ieee754_pow+0x128>
 80028e4:	2f00      	cmp	r7, #0
 80028e6:	da79      	bge.n	80029dc <__ieee754_pow+0x1c4>
 80028e8:	4956      	ldr	r1, [pc, #344]	; (8002a44 <__ieee754_pow+0x22c>)
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fd ff72 	bl	80007d4 <__aeabi_ddiv>
 80028f0:	e016      	b.n	8002920 <__ieee754_pow+0x108>
 80028f2:	2100      	movs	r1, #0
 80028f4:	9100      	str	r1, [sp, #0]
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d13b      	bne.n	8002972 <__ieee754_pow+0x15a>
 80028fa:	494f      	ldr	r1, [pc, #316]	; (8002a38 <__ieee754_pow+0x220>)
 80028fc:	428e      	cmp	r6, r1
 80028fe:	d1ee      	bne.n	80028de <__ieee754_pow+0xc6>
 8002900:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002904:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002908:	ea53 0308 	orrs.w	r3, r3, r8
 800290c:	f000 8466 	beq.w	80031dc <__ieee754_pow+0x9c4>
 8002910:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <__ieee754_pow+0x230>)
 8002912:	429c      	cmp	r4, r3
 8002914:	dd0d      	ble.n	8002932 <__ieee754_pow+0x11a>
 8002916:	2f00      	cmp	r7, #0
 8002918:	f280 8464 	bge.w	80031e4 <__ieee754_pow+0x9cc>
 800291c:	2000      	movs	r0, #0
 800291e:	2100      	movs	r1, #0
 8002920:	ec41 0b10 	vmov	d0, r0, r1
 8002924:	b00d      	add	sp, #52	; 0x34
 8002926:	ecbd 8b06 	vpop	{d8-d10}
 800292a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800292e:	2102      	movs	r1, #2
 8002930:	e7e0      	b.n	80028f4 <__ieee754_pow+0xdc>
 8002932:	2f00      	cmp	r7, #0
 8002934:	daf2      	bge.n	800291c <__ieee754_pow+0x104>
 8002936:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800293a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800293e:	e7ef      	b.n	8002920 <__ieee754_pow+0x108>
 8002940:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002944:	d104      	bne.n	8002950 <__ieee754_pow+0x138>
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fd fe19 	bl	8000580 <__aeabi_dmul>
 800294e:	e7e7      	b.n	8002920 <__ieee754_pow+0x108>
 8002950:	493e      	ldr	r1, [pc, #248]	; (8002a4c <__ieee754_pow+0x234>)
 8002952:	428f      	cmp	r7, r1
 8002954:	d10d      	bne.n	8002972 <__ieee754_pow+0x15a>
 8002956:	f1b9 0f00 	cmp.w	r9, #0
 800295a:	db0a      	blt.n	8002972 <__ieee754_pow+0x15a>
 800295c:	ec43 2b10 	vmov	d0, r2, r3
 8002960:	b00d      	add	sp, #52	; 0x34
 8002962:	ecbd 8b06 	vpop	{d8-d10}
 8002966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296a:	f000 bc77 	b.w	800325c <__ieee754_sqrt>
 800296e:	2100      	movs	r1, #0
 8002970:	9100      	str	r1, [sp, #0]
 8002972:	ec43 2b10 	vmov	d0, r2, r3
 8002976:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800297a:	f000 fd23 	bl	80033c4 <fabs>
 800297e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002982:	ec51 0b10 	vmov	r0, r1, d0
 8002986:	f1b8 0f00 	cmp.w	r8, #0
 800298a:	d12a      	bne.n	80029e2 <__ieee754_pow+0x1ca>
 800298c:	b12c      	cbz	r4, 800299a <__ieee754_pow+0x182>
 800298e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002a44 <__ieee754_pow+0x22c>
 8002992:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8002996:	45e6      	cmp	lr, ip
 8002998:	d123      	bne.n	80029e2 <__ieee754_pow+0x1ca>
 800299a:	2f00      	cmp	r7, #0
 800299c:	da05      	bge.n	80029aa <__ieee754_pow+0x192>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	2000      	movs	r0, #0
 80029a4:	4927      	ldr	r1, [pc, #156]	; (8002a44 <__ieee754_pow+0x22c>)
 80029a6:	f7fd ff15 	bl	80007d4 <__aeabi_ddiv>
 80029aa:	f1b9 0f00 	cmp.w	r9, #0
 80029ae:	dab7      	bge.n	8002920 <__ieee754_pow+0x108>
 80029b0:	9b00      	ldr	r3, [sp, #0]
 80029b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80029b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80029ba:	4323      	orrs	r3, r4
 80029bc:	d108      	bne.n	80029d0 <__ieee754_pow+0x1b8>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fd fc23 	bl	8000210 <__aeabi_dsub>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	e78d      	b.n	80028ec <__ieee754_pow+0xd4>
 80029d0:	9b00      	ldr	r3, [sp, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d1a4      	bne.n	8002920 <__ieee754_pow+0x108>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	e79e      	b.n	8002920 <__ieee754_pow+0x108>
 80029e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80029e6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80029ea:	950a      	str	r5, [sp, #40]	; 0x28
 80029ec:	9d00      	ldr	r5, [sp, #0]
 80029ee:	46ac      	mov	ip, r5
 80029f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80029f2:	ea5c 0505 	orrs.w	r5, ip, r5
 80029f6:	d0e4      	beq.n	80029c2 <__ieee754_pow+0x1aa>
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <__ieee754_pow+0x238>)
 80029fa:	429e      	cmp	r6, r3
 80029fc:	f340 80fc 	ble.w	8002bf8 <__ieee754_pow+0x3e0>
 8002a00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002a04:	429e      	cmp	r6, r3
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <__ieee754_pow+0x230>)
 8002a08:	dd07      	ble.n	8002a1a <__ieee754_pow+0x202>
 8002a0a:	429c      	cmp	r4, r3
 8002a0c:	dc0a      	bgt.n	8002a24 <__ieee754_pow+0x20c>
 8002a0e:	2f00      	cmp	r7, #0
 8002a10:	da84      	bge.n	800291c <__ieee754_pow+0x104>
 8002a12:	a307      	add	r3, pc, #28	; (adr r3, 8002a30 <__ieee754_pow+0x218>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	e795      	b.n	8002946 <__ieee754_pow+0x12e>
 8002a1a:	429c      	cmp	r4, r3
 8002a1c:	dbf7      	blt.n	8002a0e <__ieee754_pow+0x1f6>
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__ieee754_pow+0x22c>)
 8002a20:	429c      	cmp	r4, r3
 8002a22:	dd17      	ble.n	8002a54 <__ieee754_pow+0x23c>
 8002a24:	2f00      	cmp	r7, #0
 8002a26:	dcf4      	bgt.n	8002a12 <__ieee754_pow+0x1fa>
 8002a28:	e778      	b.n	800291c <__ieee754_pow+0x104>
 8002a2a:	bf00      	nop
 8002a2c:	f3af 8000 	nop.w
 8002a30:	8800759c 	.word	0x8800759c
 8002a34:	7e37e43c 	.word	0x7e37e43c
 8002a38:	7ff00000 	.word	0x7ff00000
 8002a3c:	08003b24 	.word	0x08003b24
 8002a40:	433fffff 	.word	0x433fffff
 8002a44:	3ff00000 	.word	0x3ff00000
 8002a48:	3fefffff 	.word	0x3fefffff
 8002a4c:	3fe00000 	.word	0x3fe00000
 8002a50:	41e00000 	.word	0x41e00000
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <__ieee754_pow+0x3d0>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	f7fd fbda 	bl	8000210 <__aeabi_dsub>
 8002a5c:	a356      	add	r3, pc, #344	; (adr r3, 8002bb8 <__ieee754_pow+0x3a0>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	4604      	mov	r4, r0
 8002a64:	460d      	mov	r5, r1
 8002a66:	f7fd fd8b 	bl	8000580 <__aeabi_dmul>
 8002a6a:	a355      	add	r3, pc, #340	; (adr r3, 8002bc0 <__ieee754_pow+0x3a8>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	4606      	mov	r6, r0
 8002a72:	460f      	mov	r7, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fd82 	bl	8000580 <__aeabi_dmul>
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <__ieee754_pow+0x3d4>)
 8002a7e:	4682      	mov	sl, r0
 8002a80:	468b      	mov	fp, r1
 8002a82:	2200      	movs	r2, #0
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7fd fd7a 	bl	8000580 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	a14d      	add	r1, pc, #308	; (adr r1, 8002bc8 <__ieee754_pow+0x3b0>)
 8002a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a96:	f7fd fbbb 	bl	8000210 <__aeabi_dsub>
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	f7fd fd6f 	bl	8000580 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	4951      	ldr	r1, [pc, #324]	; (8002bf0 <__ieee754_pow+0x3d8>)
 8002aaa:	f7fd fbb1 	bl	8000210 <__aeabi_dsub>
 8002aae:	4622      	mov	r2, r4
 8002ab0:	4680      	mov	r8, r0
 8002ab2:	4689      	mov	r9, r1
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f7fd fd61 	bl	8000580 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4640      	mov	r0, r8
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	f7fd fd5b 	bl	8000580 <__aeabi_dmul>
 8002aca:	a341      	add	r3, pc, #260	; (adr r3, 8002bd0 <__ieee754_pow+0x3b8>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fd56 	bl	8000580 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4650      	mov	r0, sl
 8002ada:	4659      	mov	r1, fp
 8002adc:	f7fd fb98 	bl	8000210 <__aeabi_dsub>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4680      	mov	r8, r0
 8002ae6:	4689      	mov	r9, r1
 8002ae8:	4630      	mov	r0, r6
 8002aea:	4639      	mov	r1, r7
 8002aec:	f7fd fb92 	bl	8000214 <__adddf3>
 8002af0:	2400      	movs	r4, #0
 8002af2:	4632      	mov	r2, r6
 8002af4:	463b      	mov	r3, r7
 8002af6:	4620      	mov	r0, r4
 8002af8:	460d      	mov	r5, r1
 8002afa:	f7fd fb89 	bl	8000210 <__aeabi_dsub>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4640      	mov	r0, r8
 8002b04:	4649      	mov	r1, r9
 8002b06:	f7fd fb83 	bl	8000210 <__aeabi_dsub>
 8002b0a:	9b00      	ldr	r3, [sp, #0]
 8002b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	4313      	orrs	r3, r2
 8002b12:	4682      	mov	sl, r0
 8002b14:	468b      	mov	fp, r1
 8002b16:	f040 81f1 	bne.w	8002efc <__ieee754_pow+0x6e4>
 8002b1a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8002bd8 <__ieee754_pow+0x3c0>
 8002b1e:	eeb0 8a47 	vmov.f32	s16, s14
 8002b22:	eef0 8a67 	vmov.f32	s17, s15
 8002b26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	4632      	mov	r2, r6
 8002b2e:	463b      	mov	r3, r7
 8002b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b34:	f7fd fb6c 	bl	8000210 <__aeabi_dsub>
 8002b38:	4622      	mov	r2, r4
 8002b3a:	462b      	mov	r3, r5
 8002b3c:	f7fd fd20 	bl	8000580 <__aeabi_dmul>
 8002b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b44:	4680      	mov	r8, r0
 8002b46:	4689      	mov	r9, r1
 8002b48:	4650      	mov	r0, sl
 8002b4a:	4659      	mov	r1, fp
 8002b4c:	f7fd fd18 	bl	8000580 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f7fd fb5c 	bl	8000214 <__adddf3>
 8002b5c:	4632      	mov	r2, r6
 8002b5e:	463b      	mov	r3, r7
 8002b60:	4680      	mov	r8, r0
 8002b62:	4689      	mov	r9, r1
 8002b64:	4620      	mov	r0, r4
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7fd fd0a 	bl	8000580 <__aeabi_dmul>
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	4602      	mov	r2, r0
 8002b74:	4649      	mov	r1, r9
 8002b76:	4640      	mov	r0, r8
 8002b78:	f7fd fb4c 	bl	8000214 <__adddf3>
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <__ieee754_pow+0x3dc>)
 8002b7e:	4299      	cmp	r1, r3
 8002b80:	ec45 4b19 	vmov	d9, r4, r5
 8002b84:	4606      	mov	r6, r0
 8002b86:	460f      	mov	r7, r1
 8002b88:	468b      	mov	fp, r1
 8002b8a:	f340 82fe 	ble.w	800318a <__ieee754_pow+0x972>
 8002b8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002b92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002b96:	4303      	orrs	r3, r0
 8002b98:	f000 81f0 	beq.w	8002f7c <__ieee754_pow+0x764>
 8002b9c:	a310      	add	r3, pc, #64	; (adr r3, 8002be0 <__ieee754_pow+0x3c8>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	ec51 0b18 	vmov	r0, r1, d8
 8002ba6:	f7fd fceb 	bl	8000580 <__aeabi_dmul>
 8002baa:	a30d      	add	r3, pc, #52	; (adr r3, 8002be0 <__ieee754_pow+0x3c8>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	e6cb      	b.n	800294a <__ieee754_pow+0x132>
 8002bb2:	bf00      	nop
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	60000000 	.word	0x60000000
 8002bbc:	3ff71547 	.word	0x3ff71547
 8002bc0:	f85ddf44 	.word	0xf85ddf44
 8002bc4:	3e54ae0b 	.word	0x3e54ae0b
 8002bc8:	55555555 	.word	0x55555555
 8002bcc:	3fd55555 	.word	0x3fd55555
 8002bd0:	652b82fe 	.word	0x652b82fe
 8002bd4:	3ff71547 	.word	0x3ff71547
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	bff00000 	.word	0xbff00000
 8002be0:	8800759c 	.word	0x8800759c
 8002be4:	7e37e43c 	.word	0x7e37e43c
 8002be8:	3ff00000 	.word	0x3ff00000
 8002bec:	3fd00000 	.word	0x3fd00000
 8002bf0:	3fe00000 	.word	0x3fe00000
 8002bf4:	408fffff 	.word	0x408fffff
 8002bf8:	4bd7      	ldr	r3, [pc, #860]	; (8002f58 <__ieee754_pow+0x740>)
 8002bfa:	ea03 0309 	and.w	r3, r3, r9
 8002bfe:	2200      	movs	r2, #0
 8002c00:	b92b      	cbnz	r3, 8002c0e <__ieee754_pow+0x3f6>
 8002c02:	4bd6      	ldr	r3, [pc, #856]	; (8002f5c <__ieee754_pow+0x744>)
 8002c04:	f7fd fcbc 	bl	8000580 <__aeabi_dmul>
 8002c08:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	1523      	asrs	r3, r4, #20
 8002c10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002c14:	4413      	add	r3, r2
 8002c16:	9309      	str	r3, [sp, #36]	; 0x24
 8002c18:	4bd1      	ldr	r3, [pc, #836]	; (8002f60 <__ieee754_pow+0x748>)
 8002c1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002c1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002c22:	429c      	cmp	r4, r3
 8002c24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002c28:	dd08      	ble.n	8002c3c <__ieee754_pow+0x424>
 8002c2a:	4bce      	ldr	r3, [pc, #824]	; (8002f64 <__ieee754_pow+0x74c>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	f340 8163 	ble.w	8002ef8 <__ieee754_pow+0x6e0>
 8002c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c34:	3301      	adds	r3, #1
 8002c36:	9309      	str	r3, [sp, #36]	; 0x24
 8002c38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002c3c:	2400      	movs	r4, #0
 8002c3e:	00e3      	lsls	r3, r4, #3
 8002c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c42:	4bc9      	ldr	r3, [pc, #804]	; (8002f68 <__ieee754_pow+0x750>)
 8002c44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002c48:	ed93 7b00 	vldr	d7, [r3]
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	ec53 2b17 	vmov	r2, r3, d7
 8002c52:	eeb0 8a47 	vmov.f32	s16, s14
 8002c56:	eef0 8a67 	vmov.f32	s17, s15
 8002c5a:	4682      	mov	sl, r0
 8002c5c:	f7fd fad8 	bl	8000210 <__aeabi_dsub>
 8002c60:	4652      	mov	r2, sl
 8002c62:	4606      	mov	r6, r0
 8002c64:	460f      	mov	r7, r1
 8002c66:	462b      	mov	r3, r5
 8002c68:	ec51 0b18 	vmov	r0, r1, d8
 8002c6c:	f7fd fad2 	bl	8000214 <__adddf3>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	2000      	movs	r0, #0
 8002c76:	49bd      	ldr	r1, [pc, #756]	; (8002f6c <__ieee754_pow+0x754>)
 8002c78:	f7fd fdac 	bl	80007d4 <__aeabi_ddiv>
 8002c7c:	ec41 0b19 	vmov	d9, r0, r1
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4630      	mov	r0, r6
 8002c86:	4639      	mov	r1, r7
 8002c88:	f7fd fc7a 	bl	8000580 <__aeabi_dmul>
 8002c8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002c94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9304      	str	r3, [sp, #16]
 8002c9c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002ca0:	46ab      	mov	fp, r5
 8002ca2:	106d      	asrs	r5, r5, #1
 8002ca4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002ca8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002cac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4640      	mov	r0, r8
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	4614      	mov	r4, r2
 8002cb8:	461d      	mov	r5, r3
 8002cba:	f7fd fc61 	bl	8000580 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	4639      	mov	r1, r7
 8002cc6:	f7fd faa3 	bl	8000210 <__aeabi_dsub>
 8002cca:	ec53 2b18 	vmov	r2, r3, d8
 8002cce:	4606      	mov	r6, r0
 8002cd0:	460f      	mov	r7, r1
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd fa9b 	bl	8000210 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4650      	mov	r0, sl
 8002ce0:	4659      	mov	r1, fp
 8002ce2:	f7fd fa95 	bl	8000210 <__aeabi_dsub>
 8002ce6:	4642      	mov	r2, r8
 8002ce8:	464b      	mov	r3, r9
 8002cea:	f7fd fc49 	bl	8000580 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	f7fd fa8b 	bl	8000210 <__aeabi_dsub>
 8002cfa:	ec53 2b19 	vmov	r2, r3, d9
 8002cfe:	f7fd fc3f 	bl	8000580 <__aeabi_dmul>
 8002d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002d06:	ec41 0b18 	vmov	d8, r0, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd fc37 	bl	8000580 <__aeabi_dmul>
 8002d12:	a37d      	add	r3, pc, #500	; (adr r3, 8002f08 <__ieee754_pow+0x6f0>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	f7fd fc30 	bl	8000580 <__aeabi_dmul>
 8002d20:	a37b      	add	r3, pc, #492	; (adr r3, 8002f10 <__ieee754_pow+0x6f8>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f7fd fa75 	bl	8000214 <__adddf3>
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	462b      	mov	r3, r5
 8002d2e:	f7fd fc27 	bl	8000580 <__aeabi_dmul>
 8002d32:	a379      	add	r3, pc, #484	; (adr r3, 8002f18 <__ieee754_pow+0x700>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	f7fd fa6c 	bl	8000214 <__adddf3>
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	462b      	mov	r3, r5
 8002d40:	f7fd fc1e 	bl	8000580 <__aeabi_dmul>
 8002d44:	a376      	add	r3, pc, #472	; (adr r3, 8002f20 <__ieee754_pow+0x708>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f7fd fa63 	bl	8000214 <__adddf3>
 8002d4e:	4622      	mov	r2, r4
 8002d50:	462b      	mov	r3, r5
 8002d52:	f7fd fc15 	bl	8000580 <__aeabi_dmul>
 8002d56:	a374      	add	r3, pc, #464	; (adr r3, 8002f28 <__ieee754_pow+0x710>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fa5a 	bl	8000214 <__adddf3>
 8002d60:	4622      	mov	r2, r4
 8002d62:	462b      	mov	r3, r5
 8002d64:	f7fd fc0c 	bl	8000580 <__aeabi_dmul>
 8002d68:	a371      	add	r3, pc, #452	; (adr r3, 8002f30 <__ieee754_pow+0x718>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	f7fd fa51 	bl	8000214 <__adddf3>
 8002d72:	4622      	mov	r2, r4
 8002d74:	4606      	mov	r6, r0
 8002d76:	460f      	mov	r7, r1
 8002d78:	462b      	mov	r3, r5
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	f7fd fbff 	bl	8000580 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4630      	mov	r0, r6
 8002d88:	4639      	mov	r1, r7
 8002d8a:	f7fd fbf9 	bl	8000580 <__aeabi_dmul>
 8002d8e:	4642      	mov	r2, r8
 8002d90:	4604      	mov	r4, r0
 8002d92:	460d      	mov	r5, r1
 8002d94:	464b      	mov	r3, r9
 8002d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d9a:	f7fd fa3b 	bl	8000214 <__adddf3>
 8002d9e:	ec53 2b18 	vmov	r2, r3, d8
 8002da2:	f7fd fbed 	bl	8000580 <__aeabi_dmul>
 8002da6:	4622      	mov	r2, r4
 8002da8:	462b      	mov	r3, r5
 8002daa:	f7fd fa33 	bl	8000214 <__adddf3>
 8002dae:	4642      	mov	r2, r8
 8002db0:	4682      	mov	sl, r0
 8002db2:	468b      	mov	fp, r1
 8002db4:	464b      	mov	r3, r9
 8002db6:	4640      	mov	r0, r8
 8002db8:	4649      	mov	r1, r9
 8002dba:	f7fd fbe1 	bl	8000580 <__aeabi_dmul>
 8002dbe:	4b6c      	ldr	r3, [pc, #432]	; (8002f70 <__ieee754_pow+0x758>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4606      	mov	r6, r0
 8002dc4:	460f      	mov	r7, r1
 8002dc6:	f7fd fa25 	bl	8000214 <__adddf3>
 8002dca:	4652      	mov	r2, sl
 8002dcc:	465b      	mov	r3, fp
 8002dce:	f7fd fa21 	bl	8000214 <__adddf3>
 8002dd2:	9c04      	ldr	r4, [sp, #16]
 8002dd4:	460d      	mov	r5, r1
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4640      	mov	r0, r8
 8002ddc:	4649      	mov	r1, r9
 8002dde:	f7fd fbcf 	bl	8000580 <__aeabi_dmul>
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <__ieee754_pow+0x758>)
 8002de4:	4680      	mov	r8, r0
 8002de6:	4689      	mov	r9, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fa0f 	bl	8000210 <__aeabi_dsub>
 8002df2:	4632      	mov	r2, r6
 8002df4:	463b      	mov	r3, r7
 8002df6:	f7fd fa0b 	bl	8000210 <__aeabi_dsub>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4650      	mov	r0, sl
 8002e00:	4659      	mov	r1, fp
 8002e02:	f7fd fa05 	bl	8000210 <__aeabi_dsub>
 8002e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002e0a:	f7fd fbb9 	bl	8000580 <__aeabi_dmul>
 8002e0e:	4622      	mov	r2, r4
 8002e10:	4606      	mov	r6, r0
 8002e12:	460f      	mov	r7, r1
 8002e14:	462b      	mov	r3, r5
 8002e16:	ec51 0b18 	vmov	r0, r1, d8
 8002e1a:	f7fd fbb1 	bl	8000580 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4630      	mov	r0, r6
 8002e24:	4639      	mov	r1, r7
 8002e26:	f7fd f9f5 	bl	8000214 <__adddf3>
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	460f      	mov	r7, r1
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4640      	mov	r0, r8
 8002e34:	4649      	mov	r1, r9
 8002e36:	f7fd f9ed 	bl	8000214 <__adddf3>
 8002e3a:	9c04      	ldr	r4, [sp, #16]
 8002e3c:	a33e      	add	r3, pc, #248	; (adr r3, 8002f38 <__ieee754_pow+0x720>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	4620      	mov	r0, r4
 8002e44:	460d      	mov	r5, r1
 8002e46:	f7fd fb9b 	bl	8000580 <__aeabi_dmul>
 8002e4a:	4642      	mov	r2, r8
 8002e4c:	ec41 0b18 	vmov	d8, r0, r1
 8002e50:	464b      	mov	r3, r9
 8002e52:	4620      	mov	r0, r4
 8002e54:	4629      	mov	r1, r5
 8002e56:	f7fd f9db 	bl	8000210 <__aeabi_dsub>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4630      	mov	r0, r6
 8002e60:	4639      	mov	r1, r7
 8002e62:	f7fd f9d5 	bl	8000210 <__aeabi_dsub>
 8002e66:	a336      	add	r3, pc, #216	; (adr r3, 8002f40 <__ieee754_pow+0x728>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fb88 	bl	8000580 <__aeabi_dmul>
 8002e70:	a335      	add	r3, pc, #212	; (adr r3, 8002f48 <__ieee754_pow+0x730>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	4606      	mov	r6, r0
 8002e78:	460f      	mov	r7, r1
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	f7fd fb7f 	bl	8000580 <__aeabi_dmul>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4630      	mov	r0, r6
 8002e88:	4639      	mov	r1, r7
 8002e8a:	f7fd f9c3 	bl	8000214 <__adddf3>
 8002e8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <__ieee754_pow+0x75c>)
 8002e92:	4413      	add	r3, r2
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd f9bc 	bl	8000214 <__adddf3>
 8002e9c:	4682      	mov	sl, r0
 8002e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ea0:	468b      	mov	fp, r1
 8002ea2:	f7fd fb03 	bl	80004ac <__aeabi_i2d>
 8002ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ea8:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <__ieee754_pow+0x760>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	460f      	mov	r7, r1
 8002eb4:	4652      	mov	r2, sl
 8002eb6:	465b      	mov	r3, fp
 8002eb8:	ec51 0b18 	vmov	r0, r1, d8
 8002ebc:	f7fd f9aa 	bl	8000214 <__adddf3>
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	f7fd f9a6 	bl	8000214 <__adddf3>
 8002ec8:	4632      	mov	r2, r6
 8002eca:	463b      	mov	r3, r7
 8002ecc:	f7fd f9a2 	bl	8000214 <__adddf3>
 8002ed0:	9c04      	ldr	r4, [sp, #16]
 8002ed2:	4632      	mov	r2, r6
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	460d      	mov	r5, r1
 8002eda:	f7fd f999 	bl	8000210 <__aeabi_dsub>
 8002ede:	4642      	mov	r2, r8
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	f7fd f995 	bl	8000210 <__aeabi_dsub>
 8002ee6:	ec53 2b18 	vmov	r2, r3, d8
 8002eea:	f7fd f991 	bl	8000210 <__aeabi_dsub>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4650      	mov	r0, sl
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	e606      	b.n	8002b06 <__ieee754_pow+0x2ee>
 8002ef8:	2401      	movs	r4, #1
 8002efa:	e6a0      	b.n	8002c3e <__ieee754_pow+0x426>
 8002efc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8002f50 <__ieee754_pow+0x738>
 8002f00:	e60d      	b.n	8002b1e <__ieee754_pow+0x306>
 8002f02:	bf00      	nop
 8002f04:	f3af 8000 	nop.w
 8002f08:	4a454eef 	.word	0x4a454eef
 8002f0c:	3fca7e28 	.word	0x3fca7e28
 8002f10:	93c9db65 	.word	0x93c9db65
 8002f14:	3fcd864a 	.word	0x3fcd864a
 8002f18:	a91d4101 	.word	0xa91d4101
 8002f1c:	3fd17460 	.word	0x3fd17460
 8002f20:	518f264d 	.word	0x518f264d
 8002f24:	3fd55555 	.word	0x3fd55555
 8002f28:	db6fabff 	.word	0xdb6fabff
 8002f2c:	3fdb6db6 	.word	0x3fdb6db6
 8002f30:	33333303 	.word	0x33333303
 8002f34:	3fe33333 	.word	0x3fe33333
 8002f38:	e0000000 	.word	0xe0000000
 8002f3c:	3feec709 	.word	0x3feec709
 8002f40:	dc3a03fd 	.word	0xdc3a03fd
 8002f44:	3feec709 	.word	0x3feec709
 8002f48:	145b01f5 	.word	0x145b01f5
 8002f4c:	be3e2fe0 	.word	0xbe3e2fe0
 8002f50:	00000000 	.word	0x00000000
 8002f54:	3ff00000 	.word	0x3ff00000
 8002f58:	7ff00000 	.word	0x7ff00000
 8002f5c:	43400000 	.word	0x43400000
 8002f60:	0003988e 	.word	0x0003988e
 8002f64:	000bb679 	.word	0x000bb679
 8002f68:	08003b28 	.word	0x08003b28
 8002f6c:	3ff00000 	.word	0x3ff00000
 8002f70:	40080000 	.word	0x40080000
 8002f74:	08003b48 	.word	0x08003b48
 8002f78:	08003b38 	.word	0x08003b38
 8002f7c:	a3b5      	add	r3, pc, #724	; (adr r3, 8003254 <__ieee754_pow+0xa3c>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	4640      	mov	r0, r8
 8002f84:	4649      	mov	r1, r9
 8002f86:	f7fd f945 	bl	8000214 <__adddf3>
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	ec41 0b1a 	vmov	d10, r0, r1
 8002f90:	462b      	mov	r3, r5
 8002f92:	4630      	mov	r0, r6
 8002f94:	4639      	mov	r1, r7
 8002f96:	f7fd f93b 	bl	8000210 <__aeabi_dsub>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	ec51 0b1a 	vmov	r0, r1, d10
 8002fa2:	f7fd fd7d 	bl	8000aa0 <__aeabi_dcmpgt>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	f47f adf8 	bne.w	8002b9c <__ieee754_pow+0x384>
 8002fac:	4aa4      	ldr	r2, [pc, #656]	; (8003240 <__ieee754_pow+0xa28>)
 8002fae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	f340 810b 	ble.w	80031ce <__ieee754_pow+0x9b6>
 8002fb8:	151b      	asrs	r3, r3, #20
 8002fba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002fbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002fc2:	fa4a f303 	asr.w	r3, sl, r3
 8002fc6:	445b      	add	r3, fp
 8002fc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002fcc:	4e9d      	ldr	r6, [pc, #628]	; (8003244 <__ieee754_pow+0xa2c>)
 8002fce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002fd2:	4116      	asrs	r6, r2
 8002fd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002fd8:	2000      	movs	r0, #0
 8002fda:	ea23 0106 	bic.w	r1, r3, r6
 8002fde:	f1c2 0214 	rsb	r2, r2, #20
 8002fe2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002fe6:	fa4a fa02 	asr.w	sl, sl, r2
 8002fea:	f1bb 0f00 	cmp.w	fp, #0
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	bfb8      	it	lt
 8002ff8:	f1ca 0a00 	rsblt	sl, sl, #0
 8002ffc:	f7fd f908 	bl	8000210 <__aeabi_dsub>
 8003000:	ec41 0b19 	vmov	d9, r0, r1
 8003004:	4642      	mov	r2, r8
 8003006:	464b      	mov	r3, r9
 8003008:	ec51 0b19 	vmov	r0, r1, d9
 800300c:	f7fd f902 	bl	8000214 <__adddf3>
 8003010:	2400      	movs	r4, #0
 8003012:	a379      	add	r3, pc, #484	; (adr r3, 80031f8 <__ieee754_pow+0x9e0>)
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	4620      	mov	r0, r4
 800301a:	460d      	mov	r5, r1
 800301c:	f7fd fab0 	bl	8000580 <__aeabi_dmul>
 8003020:	ec53 2b19 	vmov	r2, r3, d9
 8003024:	4606      	mov	r6, r0
 8003026:	460f      	mov	r7, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd f8f0 	bl	8000210 <__aeabi_dsub>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4640      	mov	r0, r8
 8003036:	4649      	mov	r1, r9
 8003038:	f7fd f8ea 	bl	8000210 <__aeabi_dsub>
 800303c:	a370      	add	r3, pc, #448	; (adr r3, 8003200 <__ieee754_pow+0x9e8>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd fa9d 	bl	8000580 <__aeabi_dmul>
 8003046:	a370      	add	r3, pc, #448	; (adr r3, 8003208 <__ieee754_pow+0x9f0>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	4680      	mov	r8, r0
 800304e:	4689      	mov	r9, r1
 8003050:	4620      	mov	r0, r4
 8003052:	4629      	mov	r1, r5
 8003054:	f7fd fa94 	bl	8000580 <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4640      	mov	r0, r8
 800305e:	4649      	mov	r1, r9
 8003060:	f7fd f8d8 	bl	8000214 <__adddf3>
 8003064:	4604      	mov	r4, r0
 8003066:	460d      	mov	r5, r1
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4630      	mov	r0, r6
 800306e:	4639      	mov	r1, r7
 8003070:	f7fd f8d0 	bl	8000214 <__adddf3>
 8003074:	4632      	mov	r2, r6
 8003076:	463b      	mov	r3, r7
 8003078:	4680      	mov	r8, r0
 800307a:	4689      	mov	r9, r1
 800307c:	f7fd f8c8 	bl	8000210 <__aeabi_dsub>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4620      	mov	r0, r4
 8003086:	4629      	mov	r1, r5
 8003088:	f7fd f8c2 	bl	8000210 <__aeabi_dsub>
 800308c:	4642      	mov	r2, r8
 800308e:	4606      	mov	r6, r0
 8003090:	460f      	mov	r7, r1
 8003092:	464b      	mov	r3, r9
 8003094:	4640      	mov	r0, r8
 8003096:	4649      	mov	r1, r9
 8003098:	f7fd fa72 	bl	8000580 <__aeabi_dmul>
 800309c:	a35c      	add	r3, pc, #368	; (adr r3, 8003210 <__ieee754_pow+0x9f8>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	4604      	mov	r4, r0
 80030a4:	460d      	mov	r5, r1
 80030a6:	f7fd fa6b 	bl	8000580 <__aeabi_dmul>
 80030aa:	a35b      	add	r3, pc, #364	; (adr r3, 8003218 <__ieee754_pow+0xa00>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd f8ae 	bl	8000210 <__aeabi_dsub>
 80030b4:	4622      	mov	r2, r4
 80030b6:	462b      	mov	r3, r5
 80030b8:	f7fd fa62 	bl	8000580 <__aeabi_dmul>
 80030bc:	a358      	add	r3, pc, #352	; (adr r3, 8003220 <__ieee754_pow+0xa08>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f7fd f8a7 	bl	8000214 <__adddf3>
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	f7fd fa59 	bl	8000580 <__aeabi_dmul>
 80030ce:	a356      	add	r3, pc, #344	; (adr r3, 8003228 <__ieee754_pow+0xa10>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd f89c 	bl	8000210 <__aeabi_dsub>
 80030d8:	4622      	mov	r2, r4
 80030da:	462b      	mov	r3, r5
 80030dc:	f7fd fa50 	bl	8000580 <__aeabi_dmul>
 80030e0:	a353      	add	r3, pc, #332	; (adr r3, 8003230 <__ieee754_pow+0xa18>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd f895 	bl	8000214 <__adddf3>
 80030ea:	4622      	mov	r2, r4
 80030ec:	462b      	mov	r3, r5
 80030ee:	f7fd fa47 	bl	8000580 <__aeabi_dmul>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4640      	mov	r0, r8
 80030f8:	4649      	mov	r1, r9
 80030fa:	f7fd f889 	bl	8000210 <__aeabi_dsub>
 80030fe:	4604      	mov	r4, r0
 8003100:	460d      	mov	r5, r1
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4640      	mov	r0, r8
 8003108:	4649      	mov	r1, r9
 800310a:	f7fd fa39 	bl	8000580 <__aeabi_dmul>
 800310e:	2200      	movs	r2, #0
 8003110:	ec41 0b19 	vmov	d9, r0, r1
 8003114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003118:	4620      	mov	r0, r4
 800311a:	4629      	mov	r1, r5
 800311c:	f7fd f878 	bl	8000210 <__aeabi_dsub>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	ec51 0b19 	vmov	r0, r1, d9
 8003128:	f7fd fb54 	bl	80007d4 <__aeabi_ddiv>
 800312c:	4632      	mov	r2, r6
 800312e:	4604      	mov	r4, r0
 8003130:	460d      	mov	r5, r1
 8003132:	463b      	mov	r3, r7
 8003134:	4640      	mov	r0, r8
 8003136:	4649      	mov	r1, r9
 8003138:	f7fd fa22 	bl	8000580 <__aeabi_dmul>
 800313c:	4632      	mov	r2, r6
 800313e:	463b      	mov	r3, r7
 8003140:	f7fd f868 	bl	8000214 <__adddf3>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f860 	bl	8000210 <__aeabi_dsub>
 8003150:	4642      	mov	r2, r8
 8003152:	464b      	mov	r3, r9
 8003154:	f7fd f85c 	bl	8000210 <__aeabi_dsub>
 8003158:	460b      	mov	r3, r1
 800315a:	4602      	mov	r2, r0
 800315c:	493a      	ldr	r1, [pc, #232]	; (8003248 <__ieee754_pow+0xa30>)
 800315e:	2000      	movs	r0, #0
 8003160:	f7fd f856 	bl	8000210 <__aeabi_dsub>
 8003164:	e9cd 0100 	strd	r0, r1, [sp]
 8003168:	9b01      	ldr	r3, [sp, #4]
 800316a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800316e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003172:	da2f      	bge.n	80031d4 <__ieee754_pow+0x9bc>
 8003174:	4650      	mov	r0, sl
 8003176:	ed9d 0b00 	vldr	d0, [sp]
 800317a:	f000 f9cd 	bl	8003518 <scalbn>
 800317e:	ec51 0b10 	vmov	r0, r1, d0
 8003182:	ec53 2b18 	vmov	r2, r3, d8
 8003186:	f7ff bbe0 	b.w	800294a <__ieee754_pow+0x132>
 800318a:	4b30      	ldr	r3, [pc, #192]	; (800324c <__ieee754_pow+0xa34>)
 800318c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003190:	429e      	cmp	r6, r3
 8003192:	f77f af0b 	ble.w	8002fac <__ieee754_pow+0x794>
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <__ieee754_pow+0xa38>)
 8003198:	440b      	add	r3, r1
 800319a:	4303      	orrs	r3, r0
 800319c:	d00b      	beq.n	80031b6 <__ieee754_pow+0x99e>
 800319e:	a326      	add	r3, pc, #152	; (adr r3, 8003238 <__ieee754_pow+0xa20>)
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	ec51 0b18 	vmov	r0, r1, d8
 80031a8:	f7fd f9ea 	bl	8000580 <__aeabi_dmul>
 80031ac:	a322      	add	r3, pc, #136	; (adr r3, 8003238 <__ieee754_pow+0xa20>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7ff bbca 	b.w	800294a <__ieee754_pow+0x132>
 80031b6:	4622      	mov	r2, r4
 80031b8:	462b      	mov	r3, r5
 80031ba:	f7fd f829 	bl	8000210 <__aeabi_dsub>
 80031be:	4642      	mov	r2, r8
 80031c0:	464b      	mov	r3, r9
 80031c2:	f7fd fc63 	bl	8000a8c <__aeabi_dcmpge>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	f43f aef0 	beq.w	8002fac <__ieee754_pow+0x794>
 80031cc:	e7e7      	b.n	800319e <__ieee754_pow+0x986>
 80031ce:	f04f 0a00 	mov.w	sl, #0
 80031d2:	e717      	b.n	8003004 <__ieee754_pow+0x7ec>
 80031d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031d8:	4619      	mov	r1, r3
 80031da:	e7d2      	b.n	8003182 <__ieee754_pow+0x96a>
 80031dc:	491a      	ldr	r1, [pc, #104]	; (8003248 <__ieee754_pow+0xa30>)
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff bb9e 	b.w	8002920 <__ieee754_pow+0x108>
 80031e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031e8:	f7ff bb9a 	b.w	8002920 <__ieee754_pow+0x108>
 80031ec:	9000      	str	r0, [sp, #0]
 80031ee:	f7ff bb76 	b.w	80028de <__ieee754_pow+0xc6>
 80031f2:	2100      	movs	r1, #0
 80031f4:	f7ff bb60 	b.w	80028b8 <__ieee754_pow+0xa0>
 80031f8:	00000000 	.word	0x00000000
 80031fc:	3fe62e43 	.word	0x3fe62e43
 8003200:	fefa39ef 	.word	0xfefa39ef
 8003204:	3fe62e42 	.word	0x3fe62e42
 8003208:	0ca86c39 	.word	0x0ca86c39
 800320c:	be205c61 	.word	0xbe205c61
 8003210:	72bea4d0 	.word	0x72bea4d0
 8003214:	3e663769 	.word	0x3e663769
 8003218:	c5d26bf1 	.word	0xc5d26bf1
 800321c:	3ebbbd41 	.word	0x3ebbbd41
 8003220:	af25de2c 	.word	0xaf25de2c
 8003224:	3f11566a 	.word	0x3f11566a
 8003228:	16bebd93 	.word	0x16bebd93
 800322c:	3f66c16c 	.word	0x3f66c16c
 8003230:	5555553e 	.word	0x5555553e
 8003234:	3fc55555 	.word	0x3fc55555
 8003238:	c2f8f359 	.word	0xc2f8f359
 800323c:	01a56e1f 	.word	0x01a56e1f
 8003240:	3fe00000 	.word	0x3fe00000
 8003244:	000fffff 	.word	0x000fffff
 8003248:	3ff00000 	.word	0x3ff00000
 800324c:	4090cbff 	.word	0x4090cbff
 8003250:	3f6f3400 	.word	0x3f6f3400
 8003254:	652b82fe 	.word	0x652b82fe
 8003258:	3c971547 	.word	0x3c971547

0800325c <__ieee754_sqrt>:
 800325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003260:	ec55 4b10 	vmov	r4, r5, d0
 8003264:	4e56      	ldr	r6, [pc, #344]	; (80033c0 <__ieee754_sqrt+0x164>)
 8003266:	43ae      	bics	r6, r5
 8003268:	ee10 0a10 	vmov	r0, s0
 800326c:	ee10 3a10 	vmov	r3, s0
 8003270:	4629      	mov	r1, r5
 8003272:	462a      	mov	r2, r5
 8003274:	d110      	bne.n	8003298 <__ieee754_sqrt+0x3c>
 8003276:	ee10 2a10 	vmov	r2, s0
 800327a:	462b      	mov	r3, r5
 800327c:	f7fd f980 	bl	8000580 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4620      	mov	r0, r4
 8003286:	4629      	mov	r1, r5
 8003288:	f7fc ffc4 	bl	8000214 <__adddf3>
 800328c:	4604      	mov	r4, r0
 800328e:	460d      	mov	r5, r1
 8003290:	ec45 4b10 	vmov	d0, r4, r5
 8003294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003298:	2d00      	cmp	r5, #0
 800329a:	dc10      	bgt.n	80032be <__ieee754_sqrt+0x62>
 800329c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80032a0:	4330      	orrs	r0, r6
 80032a2:	d0f5      	beq.n	8003290 <__ieee754_sqrt+0x34>
 80032a4:	b15d      	cbz	r5, 80032be <__ieee754_sqrt+0x62>
 80032a6:	ee10 2a10 	vmov	r2, s0
 80032aa:	462b      	mov	r3, r5
 80032ac:	ee10 0a10 	vmov	r0, s0
 80032b0:	f7fc ffae 	bl	8000210 <__aeabi_dsub>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	f7fd fa8c 	bl	80007d4 <__aeabi_ddiv>
 80032bc:	e7e6      	b.n	800328c <__ieee754_sqrt+0x30>
 80032be:	1509      	asrs	r1, r1, #20
 80032c0:	d076      	beq.n	80033b0 <__ieee754_sqrt+0x154>
 80032c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80032c6:	07ce      	lsls	r6, r1, #31
 80032c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80032cc:	bf5e      	ittt	pl
 80032ce:	0fda      	lsrpl	r2, r3, #31
 80032d0:	005b      	lslpl	r3, r3, #1
 80032d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80032d6:	0fda      	lsrs	r2, r3, #31
 80032d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80032dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80032e0:	2000      	movs	r0, #0
 80032e2:	106d      	asrs	r5, r5, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	f04f 0e16 	mov.w	lr, #22
 80032ea:	4684      	mov	ip, r0
 80032ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032f0:	eb0c 0401 	add.w	r4, ip, r1
 80032f4:	4294      	cmp	r4, r2
 80032f6:	bfde      	ittt	le
 80032f8:	1b12      	suble	r2, r2, r4
 80032fa:	eb04 0c01 	addle.w	ip, r4, r1
 80032fe:	1840      	addle	r0, r0, r1
 8003300:	0052      	lsls	r2, r2, #1
 8003302:	f1be 0e01 	subs.w	lr, lr, #1
 8003306:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800330a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800330e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003312:	d1ed      	bne.n	80032f0 <__ieee754_sqrt+0x94>
 8003314:	4671      	mov	r1, lr
 8003316:	2720      	movs	r7, #32
 8003318:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800331c:	4562      	cmp	r2, ip
 800331e:	eb04 060e 	add.w	r6, r4, lr
 8003322:	dc02      	bgt.n	800332a <__ieee754_sqrt+0xce>
 8003324:	d113      	bne.n	800334e <__ieee754_sqrt+0xf2>
 8003326:	429e      	cmp	r6, r3
 8003328:	d811      	bhi.n	800334e <__ieee754_sqrt+0xf2>
 800332a:	2e00      	cmp	r6, #0
 800332c:	eb06 0e04 	add.w	lr, r6, r4
 8003330:	da43      	bge.n	80033ba <__ieee754_sqrt+0x15e>
 8003332:	f1be 0f00 	cmp.w	lr, #0
 8003336:	db40      	blt.n	80033ba <__ieee754_sqrt+0x15e>
 8003338:	f10c 0801 	add.w	r8, ip, #1
 800333c:	eba2 020c 	sub.w	r2, r2, ip
 8003340:	429e      	cmp	r6, r3
 8003342:	bf88      	it	hi
 8003344:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003348:	1b9b      	subs	r3, r3, r6
 800334a:	4421      	add	r1, r4
 800334c:	46c4      	mov	ip, r8
 800334e:	0052      	lsls	r2, r2, #1
 8003350:	3f01      	subs	r7, #1
 8003352:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003356:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800335a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800335e:	d1dd      	bne.n	800331c <__ieee754_sqrt+0xc0>
 8003360:	4313      	orrs	r3, r2
 8003362:	d006      	beq.n	8003372 <__ieee754_sqrt+0x116>
 8003364:	1c4c      	adds	r4, r1, #1
 8003366:	bf13      	iteet	ne
 8003368:	3101      	addne	r1, #1
 800336a:	3001      	addeq	r0, #1
 800336c:	4639      	moveq	r1, r7
 800336e:	f021 0101 	bicne.w	r1, r1, #1
 8003372:	1043      	asrs	r3, r0, #1
 8003374:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003378:	0849      	lsrs	r1, r1, #1
 800337a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800337e:	07c2      	lsls	r2, r0, #31
 8003380:	bf48      	it	mi
 8003382:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003386:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800338a:	460c      	mov	r4, r1
 800338c:	463d      	mov	r5, r7
 800338e:	e77f      	b.n	8003290 <__ieee754_sqrt+0x34>
 8003390:	0ada      	lsrs	r2, r3, #11
 8003392:	3815      	subs	r0, #21
 8003394:	055b      	lsls	r3, r3, #21
 8003396:	2a00      	cmp	r2, #0
 8003398:	d0fa      	beq.n	8003390 <__ieee754_sqrt+0x134>
 800339a:	02d7      	lsls	r7, r2, #11
 800339c:	d50a      	bpl.n	80033b4 <__ieee754_sqrt+0x158>
 800339e:	f1c1 0420 	rsb	r4, r1, #32
 80033a2:	fa23 f404 	lsr.w	r4, r3, r4
 80033a6:	1e4d      	subs	r5, r1, #1
 80033a8:	408b      	lsls	r3, r1
 80033aa:	4322      	orrs	r2, r4
 80033ac:	1b41      	subs	r1, r0, r5
 80033ae:	e788      	b.n	80032c2 <__ieee754_sqrt+0x66>
 80033b0:	4608      	mov	r0, r1
 80033b2:	e7f0      	b.n	8003396 <__ieee754_sqrt+0x13a>
 80033b4:	0052      	lsls	r2, r2, #1
 80033b6:	3101      	adds	r1, #1
 80033b8:	e7ef      	b.n	800339a <__ieee754_sqrt+0x13e>
 80033ba:	46e0      	mov	r8, ip
 80033bc:	e7be      	b.n	800333c <__ieee754_sqrt+0xe0>
 80033be:	bf00      	nop
 80033c0:	7ff00000 	.word	0x7ff00000

080033c4 <fabs>:
 80033c4:	ec51 0b10 	vmov	r0, r1, d0
 80033c8:	ee10 2a10 	vmov	r2, s0
 80033cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033d0:	ec43 2b10 	vmov	d0, r2, r3
 80033d4:	4770      	bx	lr

080033d6 <finite>:
 80033d6:	b082      	sub	sp, #8
 80033d8:	ed8d 0b00 	vstr	d0, [sp]
 80033dc:	9801      	ldr	r0, [sp, #4]
 80033de:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80033e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80033e6:	0fc0      	lsrs	r0, r0, #31
 80033e8:	b002      	add	sp, #8
 80033ea:	4770      	bx	lr
 80033ec:	0000      	movs	r0, r0
	...

080033f0 <nan>:
 80033f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80033f8 <nan+0x8>
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	00000000 	.word	0x00000000
 80033fc:	7ff80000 	.word	0x7ff80000

08003400 <rint>:
 8003400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003402:	ec51 0b10 	vmov	r0, r1, d0
 8003406:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800340a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800340e:	2e13      	cmp	r6, #19
 8003410:	ee10 4a10 	vmov	r4, s0
 8003414:	460b      	mov	r3, r1
 8003416:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800341a:	dc58      	bgt.n	80034ce <rint+0xce>
 800341c:	2e00      	cmp	r6, #0
 800341e:	da2b      	bge.n	8003478 <rint+0x78>
 8003420:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003424:	4302      	orrs	r2, r0
 8003426:	d023      	beq.n	8003470 <rint+0x70>
 8003428:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800342c:	4302      	orrs	r2, r0
 800342e:	4254      	negs	r4, r2
 8003430:	4314      	orrs	r4, r2
 8003432:	0c4b      	lsrs	r3, r1, #17
 8003434:	0b24      	lsrs	r4, r4, #12
 8003436:	045b      	lsls	r3, r3, #17
 8003438:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800343c:	ea44 0103 	orr.w	r1, r4, r3
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <rint+0x10c>)
 8003442:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003446:	e9d3 6700 	ldrd	r6, r7, [r3]
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4630      	mov	r0, r6
 8003450:	4639      	mov	r1, r7
 8003452:	f7fc fedf 	bl	8000214 <__adddf3>
 8003456:	e9cd 0100 	strd	r0, r1, [sp]
 800345a:	463b      	mov	r3, r7
 800345c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003460:	4632      	mov	r2, r6
 8003462:	f7fc fed5 	bl	8000210 <__aeabi_dsub>
 8003466:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800346a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800346e:	4639      	mov	r1, r7
 8003470:	ec41 0b10 	vmov	d0, r0, r1
 8003474:	b003      	add	sp, #12
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003478:	4a25      	ldr	r2, [pc, #148]	; (8003510 <rint+0x110>)
 800347a:	4132      	asrs	r2, r6
 800347c:	ea01 0702 	and.w	r7, r1, r2
 8003480:	4307      	orrs	r7, r0
 8003482:	d0f5      	beq.n	8003470 <rint+0x70>
 8003484:	0851      	lsrs	r1, r2, #1
 8003486:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800348a:	4314      	orrs	r4, r2
 800348c:	d00c      	beq.n	80034a8 <rint+0xa8>
 800348e:	ea23 0201 	bic.w	r2, r3, r1
 8003492:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003496:	2e13      	cmp	r6, #19
 8003498:	fa43 f606 	asr.w	r6, r3, r6
 800349c:	bf0c      	ite	eq
 800349e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80034a2:	2400      	movne	r4, #0
 80034a4:	ea42 0306 	orr.w	r3, r2, r6
 80034a8:	4918      	ldr	r1, [pc, #96]	; (800350c <rint+0x10c>)
 80034aa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80034ae:	4622      	mov	r2, r4
 80034b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fc feac 	bl	8000214 <__adddf3>
 80034bc:	e9cd 0100 	strd	r0, r1, [sp]
 80034c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034c4:	4622      	mov	r2, r4
 80034c6:	462b      	mov	r3, r5
 80034c8:	f7fc fea2 	bl	8000210 <__aeabi_dsub>
 80034cc:	e7d0      	b.n	8003470 <rint+0x70>
 80034ce:	2e33      	cmp	r6, #51	; 0x33
 80034d0:	dd07      	ble.n	80034e2 <rint+0xe2>
 80034d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80034d6:	d1cb      	bne.n	8003470 <rint+0x70>
 80034d8:	ee10 2a10 	vmov	r2, s0
 80034dc:	f7fc fe9a 	bl	8000214 <__adddf3>
 80034e0:	e7c6      	b.n	8003470 <rint+0x70>
 80034e2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80034e6:	f04f 36ff 	mov.w	r6, #4294967295
 80034ea:	40d6      	lsrs	r6, r2
 80034ec:	4230      	tst	r0, r6
 80034ee:	d0bf      	beq.n	8003470 <rint+0x70>
 80034f0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80034f4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80034f8:	bf1f      	itttt	ne
 80034fa:	ea24 0101 	bicne.w	r1, r4, r1
 80034fe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8003502:	fa44 f202 	asrne.w	r2, r4, r2
 8003506:	ea41 0402 	orrne.w	r4, r1, r2
 800350a:	e7cd      	b.n	80034a8 <rint+0xa8>
 800350c:	08003b58 	.word	0x08003b58
 8003510:	000fffff 	.word	0x000fffff
 8003514:	00000000 	.word	0x00000000

08003518 <scalbn>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	ec55 4b10 	vmov	r4, r5, d0
 800351e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003522:	4606      	mov	r6, r0
 8003524:	462b      	mov	r3, r5
 8003526:	b99a      	cbnz	r2, 8003550 <scalbn+0x38>
 8003528:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800352c:	4323      	orrs	r3, r4
 800352e:	d036      	beq.n	800359e <scalbn+0x86>
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <scalbn+0x100>)
 8003532:	4629      	mov	r1, r5
 8003534:	ee10 0a10 	vmov	r0, s0
 8003538:	2200      	movs	r2, #0
 800353a:	f7fd f821 	bl	8000580 <__aeabi_dmul>
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <scalbn+0x104>)
 8003540:	429e      	cmp	r6, r3
 8003542:	4604      	mov	r4, r0
 8003544:	460d      	mov	r5, r1
 8003546:	da10      	bge.n	800356a <scalbn+0x52>
 8003548:	a32b      	add	r3, pc, #172	; (adr r3, 80035f8 <scalbn+0xe0>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	e03a      	b.n	80035c6 <scalbn+0xae>
 8003550:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003554:	428a      	cmp	r2, r1
 8003556:	d10c      	bne.n	8003572 <scalbn+0x5a>
 8003558:	ee10 2a10 	vmov	r2, s0
 800355c:	4620      	mov	r0, r4
 800355e:	4629      	mov	r1, r5
 8003560:	f7fc fe58 	bl	8000214 <__adddf3>
 8003564:	4604      	mov	r4, r0
 8003566:	460d      	mov	r5, r1
 8003568:	e019      	b.n	800359e <scalbn+0x86>
 800356a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800356e:	460b      	mov	r3, r1
 8003570:	3a36      	subs	r2, #54	; 0x36
 8003572:	4432      	add	r2, r6
 8003574:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003578:	428a      	cmp	r2, r1
 800357a:	dd08      	ble.n	800358e <scalbn+0x76>
 800357c:	2d00      	cmp	r5, #0
 800357e:	a120      	add	r1, pc, #128	; (adr r1, 8003600 <scalbn+0xe8>)
 8003580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003584:	da1c      	bge.n	80035c0 <scalbn+0xa8>
 8003586:	a120      	add	r1, pc, #128	; (adr r1, 8003608 <scalbn+0xf0>)
 8003588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800358c:	e018      	b.n	80035c0 <scalbn+0xa8>
 800358e:	2a00      	cmp	r2, #0
 8003590:	dd08      	ble.n	80035a4 <scalbn+0x8c>
 8003592:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003596:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800359a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800359e:	ec45 4b10 	vmov	d0, r4, r5
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80035a8:	da19      	bge.n	80035de <scalbn+0xc6>
 80035aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80035ae:	429e      	cmp	r6, r3
 80035b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80035b4:	dd0a      	ble.n	80035cc <scalbn+0xb4>
 80035b6:	a112      	add	r1, pc, #72	; (adr r1, 8003600 <scalbn+0xe8>)
 80035b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e2      	bne.n	8003586 <scalbn+0x6e>
 80035c0:	a30f      	add	r3, pc, #60	; (adr r3, 8003600 <scalbn+0xe8>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fc ffdb 	bl	8000580 <__aeabi_dmul>
 80035ca:	e7cb      	b.n	8003564 <scalbn+0x4c>
 80035cc:	a10a      	add	r1, pc, #40	; (adr r1, 80035f8 <scalbn+0xe0>)
 80035ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0b8      	beq.n	8003548 <scalbn+0x30>
 80035d6:	a10e      	add	r1, pc, #56	; (adr r1, 8003610 <scalbn+0xf8>)
 80035d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035dc:	e7b4      	b.n	8003548 <scalbn+0x30>
 80035de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80035e2:	3236      	adds	r2, #54	; 0x36
 80035e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80035ec:	4620      	mov	r0, r4
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <scalbn+0x108>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	e7e8      	b.n	80035c6 <scalbn+0xae>
 80035f4:	f3af 8000 	nop.w
 80035f8:	c2f8f359 	.word	0xc2f8f359
 80035fc:	01a56e1f 	.word	0x01a56e1f
 8003600:	8800759c 	.word	0x8800759c
 8003604:	7e37e43c 	.word	0x7e37e43c
 8003608:	8800759c 	.word	0x8800759c
 800360c:	fe37e43c 	.word	0xfe37e43c
 8003610:	c2f8f359 	.word	0xc2f8f359
 8003614:	81a56e1f 	.word	0x81a56e1f
 8003618:	43500000 	.word	0x43500000
 800361c:	ffff3cb0 	.word	0xffff3cb0
 8003620:	3c900000 	.word	0x3c900000
 8003624:	00000000 	.word	0x00000000

08003628 <__ieee754_log>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	ec51 0b10 	vmov	r0, r1, d0
 8003630:	ed2d 8b04 	vpush	{d8-d9}
 8003634:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003638:	b083      	sub	sp, #12
 800363a:	460d      	mov	r5, r1
 800363c:	da29      	bge.n	8003692 <__ieee754_log+0x6a>
 800363e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003642:	4303      	orrs	r3, r0
 8003644:	ee10 2a10 	vmov	r2, s0
 8003648:	d10c      	bne.n	8003664 <__ieee754_log+0x3c>
 800364a:	49cf      	ldr	r1, [pc, #828]	; (8003988 <__ieee754_log+0x360>)
 800364c:	2200      	movs	r2, #0
 800364e:	2300      	movs	r3, #0
 8003650:	2000      	movs	r0, #0
 8003652:	f7fd f8bf 	bl	80007d4 <__aeabi_ddiv>
 8003656:	ec41 0b10 	vmov	d0, r0, r1
 800365a:	b003      	add	sp, #12
 800365c:	ecbd 8b04 	vpop	{d8-d9}
 8003660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003664:	2900      	cmp	r1, #0
 8003666:	da05      	bge.n	8003674 <__ieee754_log+0x4c>
 8003668:	460b      	mov	r3, r1
 800366a:	f7fc fdd1 	bl	8000210 <__aeabi_dsub>
 800366e:	2200      	movs	r2, #0
 8003670:	2300      	movs	r3, #0
 8003672:	e7ee      	b.n	8003652 <__ieee754_log+0x2a>
 8003674:	4bc5      	ldr	r3, [pc, #788]	; (800398c <__ieee754_log+0x364>)
 8003676:	2200      	movs	r2, #0
 8003678:	f7fc ff82 	bl	8000580 <__aeabi_dmul>
 800367c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003680:	460d      	mov	r5, r1
 8003682:	4ac3      	ldr	r2, [pc, #780]	; (8003990 <__ieee754_log+0x368>)
 8003684:	4295      	cmp	r5, r2
 8003686:	dd06      	ble.n	8003696 <__ieee754_log+0x6e>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	f7fc fdc2 	bl	8000214 <__adddf3>
 8003690:	e7e1      	b.n	8003656 <__ieee754_log+0x2e>
 8003692:	2300      	movs	r3, #0
 8003694:	e7f5      	b.n	8003682 <__ieee754_log+0x5a>
 8003696:	152c      	asrs	r4, r5, #20
 8003698:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800369c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80036a0:	441c      	add	r4, r3
 80036a2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80036a6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80036b2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80036b6:	ea42 0105 	orr.w	r1, r2, r5
 80036ba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80036be:	2200      	movs	r2, #0
 80036c0:	4bb4      	ldr	r3, [pc, #720]	; (8003994 <__ieee754_log+0x36c>)
 80036c2:	f7fc fda5 	bl	8000210 <__aeabi_dsub>
 80036c6:	1cab      	adds	r3, r5, #2
 80036c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	4682      	mov	sl, r0
 80036d0:	468b      	mov	fp, r1
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	dc53      	bgt.n	8003780 <__ieee754_log+0x158>
 80036d8:	2300      	movs	r3, #0
 80036da:	f7fd f9b9 	bl	8000a50 <__aeabi_dcmpeq>
 80036de:	b1d0      	cbz	r0, 8003716 <__ieee754_log+0xee>
 80036e0:	2c00      	cmp	r4, #0
 80036e2:	f000 8122 	beq.w	800392a <__ieee754_log+0x302>
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7fc fee0 	bl	80004ac <__aeabi_i2d>
 80036ec:	a390      	add	r3, pc, #576	; (adr r3, 8003930 <__ieee754_log+0x308>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	4606      	mov	r6, r0
 80036f4:	460f      	mov	r7, r1
 80036f6:	f7fc ff43 	bl	8000580 <__aeabi_dmul>
 80036fa:	a38f      	add	r3, pc, #572	; (adr r3, 8003938 <__ieee754_log+0x310>)
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	4604      	mov	r4, r0
 8003702:	460d      	mov	r5, r1
 8003704:	4630      	mov	r0, r6
 8003706:	4639      	mov	r1, r7
 8003708:	f7fc ff3a 	bl	8000580 <__aeabi_dmul>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4620      	mov	r0, r4
 8003712:	4629      	mov	r1, r5
 8003714:	e7ba      	b.n	800368c <__ieee754_log+0x64>
 8003716:	a38a      	add	r3, pc, #552	; (adr r3, 8003940 <__ieee754_log+0x318>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	4650      	mov	r0, sl
 800371e:	4659      	mov	r1, fp
 8003720:	f7fc ff2e 	bl	8000580 <__aeabi_dmul>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	2000      	movs	r0, #0
 800372a:	499b      	ldr	r1, [pc, #620]	; (8003998 <__ieee754_log+0x370>)
 800372c:	f7fc fd70 	bl	8000210 <__aeabi_dsub>
 8003730:	4652      	mov	r2, sl
 8003732:	4606      	mov	r6, r0
 8003734:	460f      	mov	r7, r1
 8003736:	465b      	mov	r3, fp
 8003738:	4650      	mov	r0, sl
 800373a:	4659      	mov	r1, fp
 800373c:	f7fc ff20 	bl	8000580 <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4630      	mov	r0, r6
 8003746:	4639      	mov	r1, r7
 8003748:	f7fc ff1a 	bl	8000580 <__aeabi_dmul>
 800374c:	4606      	mov	r6, r0
 800374e:	460f      	mov	r7, r1
 8003750:	b914      	cbnz	r4, 8003758 <__ieee754_log+0x130>
 8003752:	4632      	mov	r2, r6
 8003754:	463b      	mov	r3, r7
 8003756:	e0a2      	b.n	800389e <__ieee754_log+0x276>
 8003758:	4620      	mov	r0, r4
 800375a:	f7fc fea7 	bl	80004ac <__aeabi_i2d>
 800375e:	a374      	add	r3, pc, #464	; (adr r3, 8003930 <__ieee754_log+0x308>)
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	4680      	mov	r8, r0
 8003766:	4689      	mov	r9, r1
 8003768:	f7fc ff0a 	bl	8000580 <__aeabi_dmul>
 800376c:	a372      	add	r3, pc, #456	; (adr r3, 8003938 <__ieee754_log+0x310>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	4604      	mov	r4, r0
 8003774:	460d      	mov	r5, r1
 8003776:	4640      	mov	r0, r8
 8003778:	4649      	mov	r1, r9
 800377a:	f7fc ff01 	bl	8000580 <__aeabi_dmul>
 800377e:	e0a7      	b.n	80038d0 <__ieee754_log+0x2a8>
 8003780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003784:	f7fc fd46 	bl	8000214 <__adddf3>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4650      	mov	r0, sl
 800378e:	4659      	mov	r1, fp
 8003790:	f7fd f820 	bl	80007d4 <__aeabi_ddiv>
 8003794:	ec41 0b18 	vmov	d8, r0, r1
 8003798:	4620      	mov	r0, r4
 800379a:	f7fc fe87 	bl	80004ac <__aeabi_i2d>
 800379e:	ec53 2b18 	vmov	r2, r3, d8
 80037a2:	ec41 0b19 	vmov	d9, r0, r1
 80037a6:	ec51 0b18 	vmov	r0, r1, d8
 80037aa:	f7fc fee9 	bl	8000580 <__aeabi_dmul>
 80037ae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80037b2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4680      	mov	r8, r0
 80037be:	4689      	mov	r9, r1
 80037c0:	f7fc fede 	bl	8000580 <__aeabi_dmul>
 80037c4:	a360      	add	r3, pc, #384	; (adr r3, 8003948 <__ieee754_log+0x320>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	4606      	mov	r6, r0
 80037cc:	460f      	mov	r7, r1
 80037ce:	f7fc fed7 	bl	8000580 <__aeabi_dmul>
 80037d2:	a35f      	add	r3, pc, #380	; (adr r3, 8003950 <__ieee754_log+0x328>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f7fc fd1c 	bl	8000214 <__adddf3>
 80037dc:	4632      	mov	r2, r6
 80037de:	463b      	mov	r3, r7
 80037e0:	f7fc fece 	bl	8000580 <__aeabi_dmul>
 80037e4:	a35c      	add	r3, pc, #368	; (adr r3, 8003958 <__ieee754_log+0x330>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fc fd13 	bl	8000214 <__adddf3>
 80037ee:	4632      	mov	r2, r6
 80037f0:	463b      	mov	r3, r7
 80037f2:	f7fc fec5 	bl	8000580 <__aeabi_dmul>
 80037f6:	a35a      	add	r3, pc, #360	; (adr r3, 8003960 <__ieee754_log+0x338>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fc fd0a 	bl	8000214 <__adddf3>
 8003800:	4642      	mov	r2, r8
 8003802:	464b      	mov	r3, r9
 8003804:	f7fc febc 	bl	8000580 <__aeabi_dmul>
 8003808:	a357      	add	r3, pc, #348	; (adr r3, 8003968 <__ieee754_log+0x340>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	4680      	mov	r8, r0
 8003810:	4689      	mov	r9, r1
 8003812:	4630      	mov	r0, r6
 8003814:	4639      	mov	r1, r7
 8003816:	f7fc feb3 	bl	8000580 <__aeabi_dmul>
 800381a:	a355      	add	r3, pc, #340	; (adr r3, 8003970 <__ieee754_log+0x348>)
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f7fc fcf8 	bl	8000214 <__adddf3>
 8003824:	4632      	mov	r2, r6
 8003826:	463b      	mov	r3, r7
 8003828:	f7fc feaa 	bl	8000580 <__aeabi_dmul>
 800382c:	a352      	add	r3, pc, #328	; (adr r3, 8003978 <__ieee754_log+0x350>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f7fc fcef 	bl	8000214 <__adddf3>
 8003836:	4632      	mov	r2, r6
 8003838:	463b      	mov	r3, r7
 800383a:	f7fc fea1 	bl	8000580 <__aeabi_dmul>
 800383e:	460b      	mov	r3, r1
 8003840:	4602      	mov	r2, r0
 8003842:	4649      	mov	r1, r9
 8003844:	4640      	mov	r0, r8
 8003846:	f7fc fce5 	bl	8000214 <__adddf3>
 800384a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	3551      	adds	r5, #81	; 0x51
 8003852:	431d      	orrs	r5, r3
 8003854:	2d00      	cmp	r5, #0
 8003856:	4680      	mov	r8, r0
 8003858:	4689      	mov	r9, r1
 800385a:	dd48      	ble.n	80038ee <__ieee754_log+0x2c6>
 800385c:	4b4e      	ldr	r3, [pc, #312]	; (8003998 <__ieee754_log+0x370>)
 800385e:	2200      	movs	r2, #0
 8003860:	4650      	mov	r0, sl
 8003862:	4659      	mov	r1, fp
 8003864:	f7fc fe8c 	bl	8000580 <__aeabi_dmul>
 8003868:	4652      	mov	r2, sl
 800386a:	465b      	mov	r3, fp
 800386c:	f7fc fe88 	bl	8000580 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4606      	mov	r6, r0
 8003876:	460f      	mov	r7, r1
 8003878:	4640      	mov	r0, r8
 800387a:	4649      	mov	r1, r9
 800387c:	f7fc fcca 	bl	8000214 <__adddf3>
 8003880:	ec53 2b18 	vmov	r2, r3, d8
 8003884:	f7fc fe7c 	bl	8000580 <__aeabi_dmul>
 8003888:	4680      	mov	r8, r0
 800388a:	4689      	mov	r9, r1
 800388c:	b964      	cbnz	r4, 80038a8 <__ieee754_log+0x280>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4630      	mov	r0, r6
 8003894:	4639      	mov	r1, r7
 8003896:	f7fc fcbb 	bl	8000210 <__aeabi_dsub>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4650      	mov	r0, sl
 80038a0:	4659      	mov	r1, fp
 80038a2:	f7fc fcb5 	bl	8000210 <__aeabi_dsub>
 80038a6:	e6d6      	b.n	8003656 <__ieee754_log+0x2e>
 80038a8:	a321      	add	r3, pc, #132	; (adr r3, 8003930 <__ieee754_log+0x308>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	ec51 0b19 	vmov	r0, r1, d9
 80038b2:	f7fc fe65 	bl	8000580 <__aeabi_dmul>
 80038b6:	a320      	add	r3, pc, #128	; (adr r3, 8003938 <__ieee754_log+0x310>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	ec51 0b19 	vmov	r0, r1, d9
 80038c4:	f7fc fe5c 	bl	8000580 <__aeabi_dmul>
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	f7fc fca2 	bl	8000214 <__adddf3>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4630      	mov	r0, r6
 80038d6:	4639      	mov	r1, r7
 80038d8:	f7fc fc9a 	bl	8000210 <__aeabi_dsub>
 80038dc:	4652      	mov	r2, sl
 80038de:	465b      	mov	r3, fp
 80038e0:	f7fc fc96 	bl	8000210 <__aeabi_dsub>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4620      	mov	r0, r4
 80038ea:	4629      	mov	r1, r5
 80038ec:	e7d9      	b.n	80038a2 <__ieee754_log+0x27a>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4650      	mov	r0, sl
 80038f4:	4659      	mov	r1, fp
 80038f6:	f7fc fc8b 	bl	8000210 <__aeabi_dsub>
 80038fa:	ec53 2b18 	vmov	r2, r3, d8
 80038fe:	f7fc fe3f 	bl	8000580 <__aeabi_dmul>
 8003902:	4606      	mov	r6, r0
 8003904:	460f      	mov	r7, r1
 8003906:	2c00      	cmp	r4, #0
 8003908:	f43f af23 	beq.w	8003752 <__ieee754_log+0x12a>
 800390c:	a308      	add	r3, pc, #32	; (adr r3, 8003930 <__ieee754_log+0x308>)
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	ec51 0b19 	vmov	r0, r1, d9
 8003916:	f7fc fe33 	bl	8000580 <__aeabi_dmul>
 800391a:	a307      	add	r3, pc, #28	; (adr r3, 8003938 <__ieee754_log+0x310>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	4604      	mov	r4, r0
 8003922:	460d      	mov	r5, r1
 8003924:	ec51 0b19 	vmov	r0, r1, d9
 8003928:	e727      	b.n	800377a <__ieee754_log+0x152>
 800392a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003980 <__ieee754_log+0x358>
 800392e:	e694      	b.n	800365a <__ieee754_log+0x32>
 8003930:	fee00000 	.word	0xfee00000
 8003934:	3fe62e42 	.word	0x3fe62e42
 8003938:	35793c76 	.word	0x35793c76
 800393c:	3dea39ef 	.word	0x3dea39ef
 8003940:	55555555 	.word	0x55555555
 8003944:	3fd55555 	.word	0x3fd55555
 8003948:	df3e5244 	.word	0xdf3e5244
 800394c:	3fc2f112 	.word	0x3fc2f112
 8003950:	96cb03de 	.word	0x96cb03de
 8003954:	3fc74664 	.word	0x3fc74664
 8003958:	94229359 	.word	0x94229359
 800395c:	3fd24924 	.word	0x3fd24924
 8003960:	55555593 	.word	0x55555593
 8003964:	3fe55555 	.word	0x3fe55555
 8003968:	d078c69f 	.word	0xd078c69f
 800396c:	3fc39a09 	.word	0x3fc39a09
 8003970:	1d8e78af 	.word	0x1d8e78af
 8003974:	3fcc71c5 	.word	0x3fcc71c5
 8003978:	9997fa04 	.word	0x9997fa04
 800397c:	3fd99999 	.word	0x3fd99999
	...
 8003988:	c3500000 	.word	0xc3500000
 800398c:	43500000 	.word	0x43500000
 8003990:	7fefffff 	.word	0x7fefffff
 8003994:	3ff00000 	.word	0x3ff00000
 8003998:	3fe00000 	.word	0x3fe00000

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
