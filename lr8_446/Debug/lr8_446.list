
lr8_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008034  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008200  08008200  00018200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008270  08008270  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008278  08008278  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000094  08008314  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08008314  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d8c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bc  00000000  00000000  00033e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00037270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022706  00000000  00000000  00038330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014987  00000000  00000000  0005aa36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4fac  00000000  00000000  0006f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eec  00000000  00000000  001443bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000094 	.word	0x20000094
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080081e4 	.word	0x080081e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000098 	.word	0x20000098
 8000204:	080081e4 	.word	0x080081e4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b96e 	b.w	8000e24 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9d08      	ldr	r5, [sp, #32]
 8000b66:	4604      	mov	r4, r0
 8000b68:	468c      	mov	ip, r1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8083 	bne.w	8000c76 <__udivmoddi4+0x116>
 8000b70:	428a      	cmp	r2, r1
 8000b72:	4617      	mov	r7, r2
 8000b74:	d947      	bls.n	8000c06 <__udivmoddi4+0xa6>
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	b142      	cbz	r2, 8000b8e <__udivmoddi4+0x2e>
 8000b7c:	f1c2 0020 	rsb	r0, r2, #32
 8000b80:	fa24 f000 	lsr.w	r0, r4, r0
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4097      	lsls	r7, r2
 8000b88:	ea40 0c01 	orr.w	ip, r0, r1
 8000b8c:	4094      	lsls	r4, r2
 8000b8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b92:	0c23      	lsrs	r3, r4, #16
 8000b94:	fbbc f6f8 	udiv	r6, ip, r8
 8000b98:	fa1f fe87 	uxth.w	lr, r7
 8000b9c:	fb08 c116 	mls	r1, r8, r6, ip
 8000ba0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba4:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x60>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb2:	f080 8119 	bcs.w	8000de8 <__udivmoddi4+0x288>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 8116 	bls.w	8000de8 <__udivmoddi4+0x288>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x8c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	f080 8105 	bcs.w	8000dec <__udivmoddi4+0x28c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f240 8102 	bls.w	8000dec <__udivmoddi4+0x28c>
 8000be8:	3802      	subs	r0, #2
 8000bea:	443c      	add	r4, r7
 8000bec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf0:	eba4 040e 	sub.w	r4, r4, lr
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa0>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	b902      	cbnz	r2, 8000c0a <__udivmoddi4+0xaa>
 8000c08:	deff      	udf	#255	; 0xff
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d150      	bne.n	8000cb4 <__udivmoddi4+0x154>
 8000c12:	1bcb      	subs	r3, r1, r7
 8000c14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c18:	fa1f f887 	uxth.w	r8, r7
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c22:	0c21      	lsrs	r1, r4, #16
 8000c24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0xe4>
 8000c34:	1879      	adds	r1, r7, r1
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0xe2>
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	f200 80e9 	bhi.w	8000e14 <__udivmoddi4+0x2b4>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1ac9      	subs	r1, r1, r3
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c50:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x10c>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x10a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80d9 	bhi.w	8000e1c <__udivmoddi4+0x2bc>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e7bf      	b.n	8000bf6 <__udivmoddi4+0x96>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0x12e>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	f000 80b1 	beq.w	8000de2 <__udivmoddi4+0x282>
 8000c80:	2600      	movs	r6, #0
 8000c82:	e9c5 0100 	strd	r0, r1, [r5]
 8000c86:	4630      	mov	r0, r6
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f683 	clz	r6, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d14a      	bne.n	8000d2c <__udivmoddi4+0x1cc>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0x140>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80b8 	bhi.w	8000e10 <__udivmoddi4+0x2b0>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	468c      	mov	ip, r1
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0a8      	beq.n	8000c00 <__udivmoddi4+0xa0>
 8000cae:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cb2:	e7a5      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000cb4:	f1c2 0320 	rsb	r3, r2, #32
 8000cb8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cbc:	4097      	lsls	r7, r2
 8000cbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000cc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc6:	40d9      	lsrs	r1, r3
 8000cc8:	4330      	orrs	r0, r6
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f108 	mul.w	r1, r6, r8
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x19c>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cee:	f080 808d 	bcs.w	8000e0c <__udivmoddi4+0x2ac>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 808a 	bls.w	8000e0c <__udivmoddi4+0x2ac>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b281      	uxth	r1, r0
 8000d00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb00 f308 	mul.w	r3, r0, r8
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x1c4>
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d1a:	d273      	bcs.n	8000e04 <__udivmoddi4+0x2a4>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d971      	bls.n	8000e04 <__udivmoddi4+0x2a4>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4439      	add	r1, r7
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d2a:	e778      	b.n	8000c1e <__udivmoddi4+0xbe>
 8000d2c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d30:	fa03 f406 	lsl.w	r4, r3, r6
 8000d34:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d38:	431c      	orrs	r4, r3
 8000d3a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d42:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d46:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	0c3b      	lsrs	r3, r7, #16
 8000d4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d52:	fa1f f884 	uxth.w	r8, r4
 8000d56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d5a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d62:	458a      	cmp	sl, r1
 8000d64:	fa02 f206 	lsl.w	r2, r2, r6
 8000d68:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x220>
 8000d6e:	1861      	adds	r1, r4, r1
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d74:	d248      	bcs.n	8000e08 <__udivmoddi4+0x2a8>
 8000d76:	458a      	cmp	sl, r1
 8000d78:	d946      	bls.n	8000e08 <__udivmoddi4+0x2a8>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4421      	add	r1, r4
 8000d80:	eba1 010a 	sub.w	r1, r1, sl
 8000d84:	b2bf      	uxth	r7, r7
 8000d86:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d8a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d92:	fb00 f808 	mul.w	r8, r0, r8
 8000d96:	45b8      	cmp	r8, r7
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x24a>
 8000d9a:	19e7      	adds	r7, r4, r7
 8000d9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da0:	d22e      	bcs.n	8000e00 <__udivmoddi4+0x2a0>
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d92c      	bls.n	8000e00 <__udivmoddi4+0x2a0>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4427      	add	r7, r4
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	eba7 0708 	sub.w	r7, r7, r8
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	454f      	cmp	r7, r9
 8000db8:	46c6      	mov	lr, r8
 8000dba:	4649      	mov	r1, r9
 8000dbc:	d31a      	bcc.n	8000df4 <__udivmoddi4+0x294>
 8000dbe:	d017      	beq.n	8000df0 <__udivmoddi4+0x290>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x27a>
 8000dc2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dca:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dce:	40f2      	lsrs	r2, r6
 8000dd0:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd4:	40f7      	lsrs	r7, r6
 8000dd6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	462e      	mov	r6, r5
 8000de4:	4628      	mov	r0, r5
 8000de6:	e70b      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000de8:	4606      	mov	r6, r0
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fd      	b.n	8000bec <__udivmoddi4+0x8c>
 8000df0:	4543      	cmp	r3, r8
 8000df2:	d2e5      	bcs.n	8000dc0 <__udivmoddi4+0x260>
 8000df4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	e7df      	b.n	8000dc0 <__udivmoddi4+0x260>
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7d2      	b.n	8000daa <__udivmoddi4+0x24a>
 8000e04:	4660      	mov	r0, ip
 8000e06:	e78d      	b.n	8000d24 <__udivmoddi4+0x1c4>
 8000e08:	4681      	mov	r9, r0
 8000e0a:	e7b9      	b.n	8000d80 <__udivmoddi4+0x220>
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	e775      	b.n	8000cfc <__udivmoddi4+0x19c>
 8000e10:	4630      	mov	r0, r6
 8000e12:	e74a      	b.n	8000caa <__udivmoddi4+0x14a>
 8000e14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e18:	4439      	add	r1, r7
 8000e1a:	e713      	b.n	8000c44 <__udivmoddi4+0xe4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	e724      	b.n	8000c6c <__udivmoddi4+0x10c>
 8000e22:	bf00      	nop

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <check_red_button>:
outputData txData= {'rrrr',0,0, 'nnnn'};

HAL_StatusTypeDef  error_write;
HAL_StatusTypeDef error_read;

int check_red_button() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	static GPIO_PinState previous_red_status = GPIO_PIN_SET;
	GPIO_PinState current_red_status =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000e2e:	2120      	movs	r1, #32
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <check_red_button+0x3c>)
 8000e32:	f001 fcfd 	bl	8002830 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	if (previous_red_status == GPIO_PIN_SET && current_red_status == GPIO_PIN_RESET) {
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <check_red_button+0x40>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d107      	bne.n	8000e52 <check_red_button+0x2a>
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d104      	bne.n	8000e52 <check_red_button+0x2a>
		previous_red_status = current_red_status;
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <check_red_button+0x40>)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	7013      	strb	r3, [r2, #0]
		return 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e003      	b.n	8000e5a <check_red_button+0x32>
	}
	previous_red_status = current_red_status;
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <check_red_button+0x40>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	7013      	strb	r3, [r2, #0]
	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020800 	.word	0x40020800
 8000e68:	2000001c 	.word	0x2000001c

08000e6c <check_blue_button>:

int check_blue_button() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	static GPIO_PinState previous_blue_status = GPIO_PIN_SET;
	GPIO_PinState current_blue_status =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000e72:	2140      	movs	r1, #64	; 0x40
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <check_blue_button+0x3c>)
 8000e76:	f001 fcdb 	bl	8002830 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	if (previous_blue_status == GPIO_PIN_SET && current_blue_status == GPIO_PIN_RESET) {
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <check_blue_button+0x40>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d107      	bne.n	8000e96 <check_blue_button+0x2a>
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d104      	bne.n	8000e96 <check_blue_button+0x2a>
		previous_blue_status = current_blue_status;
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <check_blue_button+0x40>)
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	7013      	strb	r3, [r2, #0]
		return 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e003      	b.n	8000e9e <check_blue_button+0x32>
	}
	previous_blue_status = current_blue_status;
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <check_blue_button+0x40>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	7013      	strb	r3, [r2, #0]
	return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	2000001d 	.word	0x2000001d

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 fdd3 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f875 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 f9c5 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec2:	f000 f983 	bl	80011cc <MX_DMA_Init>
  MX_SPI2_Init();
 8000ec6:	f000 f8fd 	bl	80010c4 <MX_SPI2_Init>
  MX_TIM10_Init();
 8000eca:	f000 f931 	bl	8001130 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000ece:	f000 f953 	bl	8001178 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ed2:	f000 f8c9 	bl	8001068 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	4826      	ldr	r0, [pc, #152]	; (8000f78 <main+0xc8>)
 8000ede:	f001 fcbf 	bl	8002860 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim10);
 8000ee2:	4826      	ldr	r0, [pc, #152]	; (8000f7c <main+0xcc>)
 8000ee4:	f005 f9c6 	bl	8006274 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (check_red_button()) {
 8000ee8:	f7ff ff9e 	bl	8000e28 <check_red_button>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d022      	beq.n	8000f38 <main+0x88>
		HAL_UART_Receive_DMA(&huart2, &rxData, sizeof(rxData));
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	4922      	ldr	r1, [pc, #136]	; (8000f80 <main+0xd0>)
 8000ef6:	4823      	ldr	r0, [pc, #140]	; (8000f84 <main+0xd4>)
 8000ef8:	f005 fcdc 	bl	80068b4 <HAL_UART_Receive_DMA>
		++txData.flag;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <main+0xd8>)
 8000efe:	889b      	ldrh	r3, [r3, #4]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <main+0xd8>)
 8000f06:	809a      	strh	r2, [r3, #4]
		error_write = HAL_I2C_Mem_Write_DMA(&hi2c1, Adress_wr, rxData.addr, sizeof(rxData.addr) , &rxData.val, sizeof(rxData.val));
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <main+0xdc>)
 8000f0a:	8819      	ldrh	r1, [r3, #0]
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <main+0xd0>)
 8000f0e:	889a      	ldrh	r2, [r3, #4]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <main+0xe0>)
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	481e      	ldr	r0, [pc, #120]	; (8000f94 <main+0xe4>)
 8000f1c:	f001 fdfe 	bl	8002b1c <HAL_I2C_Mem_Write_DMA>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <main+0xe8>)
 8000f26:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f000 fe0b 	bl	8001b44 <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart2, &txData, sizeof(txData));
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4915      	ldr	r1, [pc, #84]	; (8000f88 <main+0xd8>)
 8000f32:	4814      	ldr	r0, [pc, #80]	; (8000f84 <main+0xd4>)
 8000f34:	f005 fc40 	bl	80067b8 <HAL_UART_Transmit_DMA>
	}
	if (check_blue_button()) {
 8000f38:	f7ff ff98 	bl	8000e6c <check_blue_button>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0d2      	beq.n	8000ee8 <main+0x38>
		HAL_UART_Receive_DMA(&huart2, &rxData, sizeof(rxData));
 8000f42:	220c      	movs	r2, #12
 8000f44:	490e      	ldr	r1, [pc, #56]	; (8000f80 <main+0xd0>)
 8000f46:	480f      	ldr	r0, [pc, #60]	; (8000f84 <main+0xd4>)
 8000f48:	f005 fcb4 	bl	80068b4 <HAL_UART_Receive_DMA>
		error_read = HAL_I2C_Mem_Read_DMA(&hi2c1, Adress_rd, rxData.addr, sizeof(rxData.addr), &txData.val, sizeof(txData.val));
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <main+0xec>)
 8000f4e:	8819      	ldrh	r1, [r3, #0]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <main+0xd0>)
 8000f52:	889a      	ldrh	r2, [r3, #4]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <main+0xf0>)
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <main+0xe4>)
 8000f60:	f001 ff3e 	bl	8002de0 <HAL_I2C_Mem_Read_DMA>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <main+0xf4>)
 8000f6a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, &txData, sizeof(txData));
 8000f6c:	220c      	movs	r2, #12
 8000f6e:	4906      	ldr	r1, [pc, #24]	; (8000f88 <main+0xd8>)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <main+0xd4>)
 8000f72:	f005 fc21 	bl	80067b8 <HAL_UART_Transmit_DMA>
	if (check_red_button()) {
 8000f76:	e7b7      	b.n	8000ee8 <main+0x38>
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	20000220 	.word	0x20000220
 8000f80:	20000004 	.word	0x20000004
 8000f84:	20000334 	.word	0x20000334
 8000f88:	20000010 	.word	0x20000010
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	2000000a 	.word	0x2000000a
 8000f94:	200001cc 	.word	0x200001cc
 8000f98:	20000269 	.word	0x20000269
 8000f9c:	20000002 	.word	0x20000002
 8000fa0:	20000016 	.word	0x20000016
 8000fa4:	20000268 	.word	0x20000268

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2234      	movs	r2, #52	; 0x34
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 f956 	bl	8007268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <SystemClock_Config+0xb8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a22      	ldr	r2, [pc, #136]	; (8001060 <SystemClock_Config+0xb8>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <SystemClock_Config+0xb8>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <SystemClock_Config+0xbc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <SystemClock_Config+0xbc>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <SystemClock_Config+0xbc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2310      	movs	r3, #16
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fb91 	bl	8005744 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001028:	f000 fa2a 	bl	8001480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f906 	bl	8005258 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001052:	f000 fa15 	bl	8001480 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <MX_I2C1_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x58>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a6:	f001 fbf5 	bl	8002894 <HAL_I2C_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 f9e6 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001cc 	.word	0x200001cc
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_SPI2_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_SPI2_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_SPI2_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_SPI2_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_SPI2_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_SPI2_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_SPI2_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_SPI2_Init+0x64>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_SPI2_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_SPI2_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_SPI2_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_SPI2_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SPI2_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_SPI2_Init+0x64>)
 8001116:	f004 fdb3 	bl	8005c80 <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 f9ae 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000114 	.word	0x20000114
 800112c:	40003800 	.word	0x40003800

08001130 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_TIM10_Init+0x40>)
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <MX_TIM10_Init+0x44>)
 8001138:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1599;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_TIM10_Init+0x40>)
 800113c:	f240 623f 	movw	r2, #1599	; 0x63f
 8001140:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_TIM10_Init+0x40>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_TIM10_Init+0x40>)
 800114a:	2209      	movs	r2, #9
 800114c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_TIM10_Init+0x40>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_TIM10_Init+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_TIM10_Init+0x40>)
 800115c:	f005 f83a 	bl	80061d4 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001166:	f000 f98b 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000220 	.word	0x20000220
 8001174:	40014400 	.word	0x40014400

08001178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 8001184:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 80011b0:	f005 fab4 	bl	800671c <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ba:	f000 f961 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000334 	.word	0x20000334
 80011c8:	40004400 	.word	0x40004400

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_DMA_Init+0x7c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_DMA_Init+0x7c>)
 80011dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_DMA_Init+0x7c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200b      	movs	r0, #11
 80011f4:	f000 fda5 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011f8:	200b      	movs	r0, #11
 80011fa:	f000 fdbe 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	200f      	movs	r0, #15
 8001204:	f000 fd9d 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001208:	200f      	movs	r0, #15
 800120a:	f000 fdb6 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2010      	movs	r0, #16
 8001214:	f000 fd95 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001218:	2010      	movs	r0, #16
 800121a:	f000 fdae 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2011      	movs	r0, #17
 8001224:	f000 fd8d 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001228:	2011      	movs	r0, #17
 800122a:	f000 fda6 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	202f      	movs	r0, #47	; 0x2f
 8001234:	f000 fd85 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001238:	202f      	movs	r0, #47	; 0x2f
 800123a:	f000 fd9e 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <MX_GPIO_Init+0x11c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a3f      	ldr	r2, [pc, #252]	; (8001368 <MX_GPIO_Init+0x11c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <MX_GPIO_Init+0x11c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <MX_GPIO_Init+0x11c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a38      	ldr	r2, [pc, #224]	; (8001368 <MX_GPIO_Init+0x11c>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <MX_GPIO_Init+0x11c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <MX_GPIO_Init+0x11c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a31      	ldr	r2, [pc, #196]	; (8001368 <MX_GPIO_Init+0x11c>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <MX_GPIO_Init+0x11c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <MX_GPIO_Init+0x11c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <MX_GPIO_Init+0x11c>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <MX_GPIO_Init+0x11c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	4824      	ldr	r0, [pc, #144]	; (800136c <MX_GPIO_Init+0x120>)
 80012da:	f001 fac1 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80012de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80012e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	481f      	ldr	r0, [pc, #124]	; (8001370 <MX_GPIO_Init+0x124>)
 80012f4:	f001 f908 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10
 80012f8:	f641 4370 	movw	r3, #7280	; 0x1c70
 80012fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4819      	ldr	r0, [pc, #100]	; (8001374 <MX_GPIO_Init+0x128>)
 800130e:	f001 f8fb 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001312:	230a      	movs	r3, #10
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <MX_GPIO_Init+0x120>)
 8001326:	f001 f8ef 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480a      	ldr	r0, [pc, #40]	; (800136c <MX_GPIO_Init+0x120>)
 8001344:	f001 f8e0 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001348:	2304      	movs	r3, #4
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_GPIO_Init+0x12c>)
 800135c:	f001 f8d4 	bl	8002508 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400
 8001370:	40020000 	.word	0x40020000
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	00000000 	.word	0x00000000

08001380 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
int i = 0;
int curr_dig;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	//++k;
	//HAL_GPIO_WritePin( NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_RESET );
	//var = var+1;

	//0x7E  ,0xBF ,0xDF, 0xEF
	uint8_t digit[4] = { 0xBF ,0xDF, 0xEF};
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800138a:	617b      	str	r3, [r7, #20]
	uint8_t number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x02, 0xF8, 0x80, 0x90};
 800138c:	4a33      	ldr	r2, [pc, #204]	; (800145c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	ca07      	ldmia	r2, {r0, r1, r2}
 8001394:	c303      	stmia	r3!, {r0, r1}
 8001396:	801a      	strh	r2, [r3, #0]

	i = (i+1) %3;
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80013a0:	fb83 3201 	smull	r3, r2, r3, r1
 80013a4:	17cb      	asrs	r3, r1, #31
 80013a6:	1ad2      	subs	r2, r2, r3
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	1aca      	subs	r2, r1, r3
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80013b2:	601a      	str	r2, [r3, #0]

	curr_dig = txData.val/ (int)pow(10,i) %10;
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80013b6:	799b      	ldrb	r3, [r3, #6]
 80013b8:	461c      	mov	r4, r3
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f874 	bl	80004ac <__aeabi_i2d>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	ec43 2b11 	vmov	d1, r2, r3
 80013cc:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001450 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80013d0:	f005 ff52 	bl	8007278 <pow>
 80013d4:	ec53 2b10 	vmov	r2, r3, d0
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fb80 	bl	8000ae0 <__aeabi_d2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	fb94 f1f3 	sdiv	r1, r4, r3
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80013e8:	fb83 2301 	smull	r2, r3, r3, r1
 80013ec:	109a      	asrs	r2, r3, #2
 80013ee:	17cb      	asrs	r3, r1, #31
 80013f0:	1ad2      	subs	r2, r2, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1aca      	subs	r2, r1, r3
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80013fe:	601a      	str	r2, [r3, #0]
	spi_data[0] = number[curr_dig];
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f107 0218 	add.w	r2, r7, #24
 8001408:	4413      	add	r3, r2
 800140a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001410:	701a      	strb	r2, [r3, #0]
	spi_data[1] = digit[i];
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f107 0218 	add.w	r2, r7, #24
 800141a:	4413      	add	r3, r2
 800141c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001422:	705a      	strb	r2, [r3, #1]
	//0x7E  ,0xBF ,0xEF, 0xEF
	//0xC0 ,0x ,0x ,0x ,0x ,0x ,0x ,0x ,0x ,0x
	//spi_data[0] = 0xF9;
	//spi_data[1] = 0xDF;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142a:	4813      	ldr	r0, [pc, #76]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800142c:	f001 fa18 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, spi_data, (uint16_t)sizeof(spi_data));
 8001430:	2202      	movs	r2, #2
 8001432:	4910      	ldr	r1, [pc, #64]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001434:	4811      	ldr	r0, [pc, #68]	; (800147c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001436:	f004 fcad 	bl	8005d94 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit_DMA();
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001442:	f001 fa0d 	bl	8002860 <HAL_GPIO_WritePin>

}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	00000000 	.word	0x00000000
 8001454:	40240000 	.word	0x40240000
 8001458:	00efdfbf 	.word	0x00efdfbf
 800145c:	08008200 	.word	0x08008200
 8001460:	200000b0 	.word	0x200000b0
 8001464:	55555556 	.word	0x55555556
 8001468:	20000010 	.word	0x20000010
 800146c:	66666667 	.word	0x66666667
 8001470:	20000330 	.word	0x20000330
 8001474:	200002cc 	.word	0x200002cc
 8001478:	40020400 	.word	0x40020400
 800147c:	20000114 	.word	0x20000114

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_I2C_MspInit+0x160>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	f040 8099 	bne.w	8001632 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <HAL_I2C_MspInit+0x164>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a4d      	ldr	r2, [pc, #308]	; (8001640 <HAL_I2C_MspInit+0x164>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <HAL_I2C_MspInit+0x164>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001522:	2312      	movs	r3, #18
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001526:	2301      	movs	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152e:	2304      	movs	r3, #4
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4842      	ldr	r0, [pc, #264]	; (8001644 <HAL_I2C_MspInit+0x168>)
 800153a:	f000 ffe5 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <HAL_I2C_MspInit+0x164>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <HAL_I2C_MspInit+0x164>)
 8001548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <HAL_I2C_MspInit+0x164>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 800155c:	4a3b      	ldr	r2, [pc, #236]	; (800164c <HAL_I2C_MspInit+0x170>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 8001562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001566:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 8001576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800159a:	482b      	ldr	r0, [pc, #172]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 800159c:	f000 fc08 	bl	8001db0 <HAL_DMA_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80015a6:	f7ff ff6b 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a26      	ldr	r2, [pc, #152]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
 80015b0:	4a25      	ldr	r2, [pc, #148]	; (8001648 <HAL_I2C_MspInit+0x16c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_I2C_MspInit+0x178>)
 80015ba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015c6:	2240      	movs	r2, #64	; 0x40
 80015c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80015f6:	4816      	ldr	r0, [pc, #88]	; (8001650 <HAL_I2C_MspInit+0x174>)
 80015f8:	f000 fbda 	bl	8001db0 <HAL_DMA_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001602:	f7ff ff3d 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_I2C_MspInit+0x174>)
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_I2C_MspInit+0x174>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201f      	movs	r0, #31
 8001618:	f000 fb93 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800161c:	201f      	movs	r0, #31
 800161e:	f000 fbac 	bl	8001d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2020      	movs	r0, #32
 8001628:	f000 fb8b 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800162c:	2020      	movs	r0, #32
 800162e:	f000 fba4 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40005400 	.word	0x40005400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400
 8001648:	200002d0 	.word	0x200002d0
 800164c:	40026010 	.word	0x40026010
 8001650:	2000016c 	.word	0x2000016c
 8001654:	400260b8 	.word	0x400260b8

08001658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a30      	ldr	r2, [pc, #192]	; (8001738 <HAL_SPI_MspInit+0xe0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d159      	bne.n	800172e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_SPI_MspInit+0xe4>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a2e      	ldr	r2, [pc, #184]	; (800173c <HAL_SPI_MspInit+0xe4>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_SPI_MspInit+0xe4>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <HAL_SPI_MspInit+0xe4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a27      	ldr	r2, [pc, #156]	; (800173c <HAL_SPI_MspInit+0xe4>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_SPI_MspInit+0xe4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80016b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c4:	2305      	movs	r3, #5
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <HAL_SPI_MspInit+0xe8>)
 80016d0:	f000 ff1a 	bl	8002508 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_SPI_MspInit+0xec>)
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_SPI_MspInit+0xf0>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_SPI_MspInit+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_SPI_MspInit+0xec>)
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_SPI_MspInit+0xec>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_SPI_MspInit+0xec>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_SPI_MspInit+0xec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_SPI_MspInit+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_SPI_MspInit+0xec>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_SPI_MspInit+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_SPI_MspInit+0xec>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001712:	480c      	ldr	r0, [pc, #48]	; (8001744 <HAL_SPI_MspInit+0xec>)
 8001714:	f000 fb4c 	bl	8001db0 <HAL_DMA_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800171e:	f7ff feaf 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_SPI_MspInit+0xec>)
 8001726:	649a      	str	r2, [r3, #72]	; 0x48
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_SPI_MspInit+0xec>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40003800 	.word	0x40003800
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400
 8001744:	20000378 	.word	0x20000378
 8001748:	40026070 	.word	0x40026070

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_TIM_Base_MspInit+0x48>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d115      	bne.n	800178a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_TIM_Base_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_TIM_Base_MspInit+0x4c>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_TIM_Base_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2019      	movs	r0, #25
 8001780:	f000 fadf 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001784:	2019      	movs	r0, #25
 8001786:	f000 faf8 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40014400 	.word	0x40014400
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_UART_MspInit+0x13c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	f040 8088 	bne.w	80018d0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <HAL_UART_MspInit+0x140>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	4a44      	ldr	r2, [pc, #272]	; (80018dc <HAL_UART_MspInit+0x140>)
 80017ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_UART_MspInit+0x140>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <HAL_UART_MspInit+0x140>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <HAL_UART_MspInit+0x140>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_UART_MspInit+0x140>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f8:	230c      	movs	r3, #12
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001808:	2307      	movs	r3, #7
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4833      	ldr	r0, [pc, #204]	; (80018e0 <HAL_UART_MspInit+0x144>)
 8001814:	f000 fe78 	bl	8002508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001818:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <HAL_UART_MspInit+0x148>)
 800181a:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <HAL_UART_MspInit+0x14c>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HAL_UART_MspInit+0x148>)
 8001820:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001824:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_UART_MspInit+0x148>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_UART_MspInit+0x148>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <HAL_UART_MspInit+0x148>)
 8001834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001838:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <HAL_UART_MspInit+0x148>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <HAL_UART_MspInit+0x148>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_UART_MspInit+0x148>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_UART_MspInit+0x148>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_UART_MspInit+0x148>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001858:	4822      	ldr	r0, [pc, #136]	; (80018e4 <HAL_UART_MspInit+0x148>)
 800185a:	f000 faa9 	bl	8001db0 <HAL_DMA_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001864:	f7ff fe0c 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <HAL_UART_MspInit+0x148>)
 800186c:	639a      	str	r2, [r3, #56]	; 0x38
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_UART_MspInit+0x148>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_UART_MspInit+0x150>)
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_UART_MspInit+0x154>)
 8001878:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_UART_MspInit+0x150>)
 800187c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001880:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_UART_MspInit+0x150>)
 8001884:	2240      	movs	r2, #64	; 0x40
 8001886:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_UART_MspInit+0x150>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_UART_MspInit+0x150>)
 8001890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001894:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_UART_MspInit+0x150>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_UART_MspInit+0x150>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_UART_MspInit+0x150>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_UART_MspInit+0x150>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_UART_MspInit+0x150>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <HAL_UART_MspInit+0x150>)
 80018b6:	f000 fa7b 	bl	8001db0 <HAL_DMA_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80018c0:	f7ff fdde 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_UART_MspInit+0x150>)
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_UART_MspInit+0x150>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40004400 	.word	0x40004400
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	200000b4 	.word	0x200000b4
 80018e8:	40026088 	.word	0x40026088
 80018ec:	2000026c 	.word	0x2000026c
 80018f0:	400260a0 	.word	0x400260a0

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <NMI_Handler+0x4>

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001940:	f000 f8e0 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Stream0_IRQHandler+0x10>)
 800194e:	f000 fb57 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200002d0 	.word	0x200002d0

0800195c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <DMA1_Stream4_IRQHandler+0x10>)
 8001962:	f000 fb4d 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000378 	.word	0x20000378

08001970 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DMA1_Stream5_IRQHandler+0x10>)
 8001976:	f000 fb43 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000b4 	.word	0x200000b4

08001984 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA1_Stream6_IRQHandler+0x10>)
 800198a:	f000 fb39 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000026c 	.word	0x2000026c

08001998 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800199e:	f004 fcd9 	bl	8006354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000220 	.word	0x20000220

080019ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <I2C1_EV_IRQHandler+0x10>)
 80019b2:	f001 fba9 	bl	8003108 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200001cc 	.word	0x200001cc

080019c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <I2C1_ER_IRQHandler+0x10>)
 80019c6:	f001 fd10 	bl	80033ea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200001cc 	.word	0x200001cc

080019d4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <DMA1_Stream7_IRQHandler+0x10>)
 80019da:	f000 fb11 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000016c 	.word	0x2000016c

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a10:	480d      	ldr	r0, [pc, #52]	; (8001a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a12:	490e      	ldr	r1, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a28:	4c0b      	ldr	r4, [pc, #44]	; (8001a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a36:	f7ff ffd7 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f005 fbf1 	bl	8007220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff fa37 	bl	8000eb0 <main>
  bx  lr    
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001a50:	08008280 	.word	0x08008280
  ldr r2, =_sbss
 8001a54:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001a58:	200003dc 	.word	0x200003dc

08001a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <HAL_Init+0x40>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_Init+0x40>)
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x40>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 f94f 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fcfa 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f967 	bl	8001d96 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f000 f92f 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000020 	.word	0x20000020
 8001afc:	20000028 	.word	0x20000028
 8001b00:	20000024 	.word	0x20000024

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000028 	.word	0x20000028
 8001b28:	200003d8 	.word	0x200003d8

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	200003d8 	.word	0x200003d8

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000028 	.word	0x20000028

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff feb6 	bl	8001b2c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e099      	b.n	8001f00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dec:	e00f      	b.n	8001e0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dee:	f7ff fe9d 	bl	8001b2c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d908      	bls.n	8001e0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2203      	movs	r2, #3
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e078      	b.n	8001f00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e8      	bne.n	8001dee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_DMA_Init+0x158>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d107      	bne.n	8001e78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4313      	orrs	r3, r2
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f023 0307 	bic.w	r3, r3, #7
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d117      	bne.n	8001ed2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 faab 	bl	8002410 <DMA_CheckFifoParam>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e016      	b.n	8001f00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fa62 	bl	80023a4 <DMA_CalcBaseAndBitshift>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	223f      	movs	r2, #63	; 0x3f
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	f010803f 	.word	0xf010803f

08001f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Start_IT+0x26>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e040      	b.n	8001fb4 <HAL_DMA_Start_IT+0xa8>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d12f      	bne.n	8001fa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f9f4 	bl	8002348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	223f      	movs	r2, #63	; 0x3f
 8001f66:	409a      	lsls	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0216 	orr.w	r2, r2, #22
 8001f7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0208 	orr.w	r2, r2, #8
 8001f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e005      	b.n	8001fb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d004      	beq.n	8001fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00c      	b.n	8001ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2205      	movs	r2, #5
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800200c:	4b92      	ldr	r3, [pc, #584]	; (8002258 <HAL_DMA_IRQHandler+0x258>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a92      	ldr	r2, [pc, #584]	; (800225c <HAL_DMA_IRQHandler+0x25c>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2208      	movs	r2, #8
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01a      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2208      	movs	r2, #8
 800205a:	409a      	lsls	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2204      	movs	r2, #4
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2204      	movs	r2, #4
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2210      	movs	r2, #16
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d043      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03c      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2210      	movs	r2, #16
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d018      	beq.n	8002142 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e01f      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e016      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2220      	movs	r2, #32
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 808e 	beq.w	800229e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8086 	beq.w	800229e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2220      	movs	r2, #32
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d136      	bne.n	8002218 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_IRQHandler+0x1da>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	223f      	movs	r2, #63	; 0x3f
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d07d      	beq.n	800230a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
        }
        return;
 8002216:	e078      	b.n	800230a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01c      	beq.n	8002260 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	2b00      	cmp	r3, #0
 800223a:	d030      	beq.n	800229e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e02b      	b.n	800229e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d027      	beq.n	800229e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
 8002256:	e022      	b.n	800229e <HAL_DMA_IRQHandler+0x29e>
 8002258:	20000020 	.word	0x20000020
 800225c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0210 	bic.w	r2, r2, #16
 800227c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d032      	beq.n	800230c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d022      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2205      	movs	r2, #5
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d307      	bcc.n	80022e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f2      	bne.n	80022ca <HAL_DMA_IRQHandler+0x2ca>
 80022e4:	e000      	b.n	80022e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
 8002308:	e000      	b.n	800230c <HAL_DMA_IRQHandler+0x30c>
        return;
 800230a:	bf00      	nop
    }
  }
}
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop

08002314 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002322:	b2db      	uxtb	r3, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d108      	bne.n	8002388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002386:	e007      	b.n	8002398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3b10      	subs	r3, #16
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <DMA_CalcBaseAndBitshift+0x64>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <DMA_CalcBaseAndBitshift+0x68>)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d909      	bls.n	80023e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	; 0x58
 80023e4:	e007      	b.n	80023f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	aaaaaaab 	.word	0xaaaaaaab
 800240c:	08008224 	.word	0x08008224

08002410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0x5a>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d856      	bhi.n	80024de <DMA_CheckFifoParam+0xce>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <DMA_CheckFifoParam+0x28>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	0800245b 	.word	0x0800245b
 8002440:	08002449 	.word	0x08002449
 8002444:	080024df 	.word	0x080024df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d046      	beq.n	80024e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002458:	e043      	b.n	80024e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002462:	d140      	bne.n	80024e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e03d      	b.n	80024e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002472:	d121      	bne.n	80024b8 <DMA_CheckFifoParam+0xa8>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d837      	bhi.n	80024ea <DMA_CheckFifoParam+0xda>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <DMA_CheckFifoParam+0x70>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	08002491 	.word	0x08002491
 8002484:	08002497 	.word	0x08002497
 8002488:	08002491 	.word	0x08002491
 800248c:	080024a9 	.word	0x080024a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e030      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d025      	beq.n	80024ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a6:	e022      	b.n	80024ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b0:	d11f      	bne.n	80024f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024b6:	e01c      	b.n	80024f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d903      	bls.n	80024c6 <DMA_CheckFifoParam+0xb6>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d003      	beq.n	80024cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024c4:	e018      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ca:	e015      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e00b      	b.n	80024f6 <DMA_CheckFifoParam+0xe6>
      break;
 80024de:	bf00      	nop
 80024e0:	e00a      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
 80024e4:	e008      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
 80024e8:	e006      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e004      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e002      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
    }
  } 
  
  return status; 
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e165      	b.n	80027f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8154 	bne.w	80027ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80ae 	beq.w	80027ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_GPIO_Init+0x300>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_GPIO_Init+0x300>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b5a      	ldr	r3, [pc, #360]	; (8002808 <HAL_GPIO_Init+0x300>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_GPIO_Init+0x304>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4f      	ldr	r2, [pc, #316]	; (8002810 <HAL_GPIO_Init+0x308>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d025      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <HAL_GPIO_Init+0x30c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01f      	beq.n	800271e <HAL_GPIO_Init+0x216>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4d      	ldr	r2, [pc, #308]	; (8002818 <HAL_GPIO_Init+0x310>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x212>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4c      	ldr	r2, [pc, #304]	; (800281c <HAL_GPIO_Init+0x314>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x20e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <HAL_GPIO_Init+0x318>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x20a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_GPIO_Init+0x31c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x206>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a49      	ldr	r2, [pc, #292]	; (8002828 <HAL_GPIO_Init+0x320>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x202>
 8002706:	2306      	movs	r3, #6
 8002708:	e00c      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800270a:	2307      	movs	r3, #7
 800270c:	e00a      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800270e:	2305      	movs	r3, #5
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002712:	2304      	movs	r3, #4
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002722:	2300      	movs	r3, #0
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f002 0203 	and.w	r2, r2, #3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <HAL_GPIO_Init+0x304>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002742:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_GPIO_Init+0x324>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_GPIO_Init+0x324>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800276c:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_GPIO_Init+0x324>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_GPIO_Init+0x324>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_GPIO_Init+0x324>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_GPIO_Init+0x324>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_GPIO_Init+0x324>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_GPIO_Init+0x324>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3301      	adds	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	f67f ae96 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e001      	b.n	8002852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e12b      	b.n	8002afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fe0e 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f8:	f002 fda0 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80028fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a81      	ldr	r2, [pc, #516]	; (8002b08 <HAL_I2C_Init+0x274>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d807      	bhi.n	8002918 <HAL_I2C_Init+0x84>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a80      	ldr	r2, [pc, #512]	; (8002b0c <HAL_I2C_Init+0x278>)
 800290c:	4293      	cmp	r3, r2
 800290e:	bf94      	ite	ls
 8002910:	2301      	movls	r3, #1
 8002912:	2300      	movhi	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e006      	b.n	8002926 <HAL_I2C_Init+0x92>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a7d      	ldr	r2, [pc, #500]	; (8002b10 <HAL_I2C_Init+0x27c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0e7      	b.n	8002afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a78      	ldr	r2, [pc, #480]	; (8002b14 <HAL_I2C_Init+0x280>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a6a      	ldr	r2, [pc, #424]	; (8002b08 <HAL_I2C_Init+0x274>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d802      	bhi.n	8002968 <HAL_I2C_Init+0xd4>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	e009      	b.n	800297c <HAL_I2C_Init+0xe8>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	4a69      	ldr	r2, [pc, #420]	; (8002b18 <HAL_I2C_Init+0x284>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	3301      	adds	r3, #1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800298e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	495c      	ldr	r1, [pc, #368]	; (8002b08 <HAL_I2C_Init+0x274>)
 8002998:	428b      	cmp	r3, r1
 800299a:	d819      	bhi.n	80029d0 <HAL_I2C_Init+0x13c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e59      	subs	r1, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029b0:	400b      	ands	r3, r1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_I2C_Init+0x138>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e59      	subs	r1, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	e051      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029cc:	2304      	movs	r3, #4
 80029ce:	e04f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d111      	bne.n	80029fc <HAL_I2C_Init+0x168>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e012      	b.n	8002a22 <HAL_I2C_Init+0x18e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x196>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e022      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10e      	bne.n	8002a50 <HAL_I2C_Init+0x1bc>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e58      	subs	r0, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	440b      	add	r3, r1
 8002a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	e00f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	6809      	ldr	r1, [r1, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6911      	ldr	r1, [r2, #16]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68d2      	ldr	r2, [r2, #12]
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	000186a0 	.word	0x000186a0
 8002b0c:	001e847f 	.word	0x001e847f
 8002b10:	003d08ff 	.word	0x003d08ff
 8002b14:	431bde83 	.word	0x431bde83
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b3a:	f7fe fff7 	bl	8001b2c <HAL_GetTick>
 8002b3e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	f040 813a 	bne.w	8002dc2 <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b4e:	4b9f      	ldr	r3, [pc, #636]	; (8002dcc <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	4a9e      	ldr	r2, [pc, #632]	; (8002dd0 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0a1a      	lsrs	r2, r3, #8
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009a      	lsls	r2, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d116      	bne.n	8002ba2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e110      	b.n	8002dc4 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d0db      	beq.n	8002b68 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2C_Mem_Write_DMA+0xa2>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e102      	b.n	8002dc4 <HAL_I2C_Mem_Write_DMA+0x2a8>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d007      	beq.n	8002be4 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2221      	movs	r2, #33	; 0x21
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2240      	movs	r2, #64	; 0x40
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002c26:	897a      	ldrh	r2, [r7, #10]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002c2c:	893a      	ldrh	r2, [r7, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80a9 	beq.w	8002d9a <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d02a      	beq.n	8002ca6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	4a5f      	ldr	r2, [pc, #380]	; (8002ddc <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8002c5e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	2200      	movs	r2, #0
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	2200      	movs	r2, #0
 8002c76:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	4619      	mov	r1, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3310      	adds	r3, #16
 8002c90:	461a      	mov	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	f7ff f939 	bl	8001f0c <HAL_DMA_Start_IT>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002c9e:	7efb      	ldrb	r3, [r7, #27]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d166      	bne.n	8002d72 <HAL_I2C_Mem_Write_DMA+0x256>
 8002ca4:	e013      	b.n	8002cce <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07a      	b.n	8002dc4 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002cce:	88f8      	ldrh	r0, [r7, #6]
 8002cd0:	893a      	ldrh	r2, [r7, #8]
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	2323      	movs	r3, #35	; 0x23
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4603      	mov	r3, r0
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 fdee 	bl	80048c0 <I2C_RequestMemoryWrite>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d022      	beq.n	8002d30 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f964 	bl	8001fbc <HAL_DMA_Abort_IT>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e049      	b.n	8002dc4 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e028      	b.n	8002dc4 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f043 0210 	orr.w	r2, r3, #16
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e014      	b.n	8002dc4 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000020 	.word	0x20000020
 8002dd0:	14f8b589 	.word	0x14f8b589
 8002dd4:	ffff0000 	.word	0xffff0000
 8002dd8:	08004bbd 	.word	0x08004bbd
 8002ddc:	08004d67 	.word	0x08004d67

08002de0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	; 0x30
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	817b      	strh	r3, [r7, #10]
 8002df2:	460b      	mov	r3, r1
 8002df4:	813b      	strh	r3, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dfa:	f7fe fe97 	bl	8001b2c <HAL_GetTick>
 8002dfe:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	f040 8176 	bne.w	80030fe <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e12:	4b95      	ldr	r3, [pc, #596]	; (8003068 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	4a94      	ldr	r2, [pc, #592]	; (800306c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a1a      	lsrs	r2, r3, #8
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009a      	lsls	r2, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e14c      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d0db      	beq.n	8002e2c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Mem_Read_DMA+0xa2>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e13e      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x320>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d007      	beq.n	8002ea8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2222      	movs	r2, #34	; 0x22
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a62      	ldr	r2, [pc, #392]	; (8003070 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002eea:	897a      	ldrh	r2, [r7, #10]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80cc 	beq.w	80030a4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02d      	beq.n	8002f70 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	4a56      	ldr	r2, [pc, #344]	; (8003074 <HAL_I2C_Mem_Read_DMA+0x294>)
 8002f1a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	4a55      	ldr	r2, [pc, #340]	; (8003078 <HAL_I2C_Mem_Read_DMA+0x298>)
 8002f22:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	2200      	movs	r2, #0
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	2200      	movs	r2, #0
 8002f3a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	2200      	movs	r2, #0
 8002f42:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	4619      	mov	r1, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	461a      	mov	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	f7fe ffd7 	bl	8001f0c <HAL_DMA_Start_IT>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 8087 	bne.w	800307c <HAL_I2C_Mem_Read_DMA+0x29c>
 8002f6e:	e013      	b.n	8002f98 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b3      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002f98:	88f8      	ldrh	r0, [r7, #6]
 8002f9a:	893a      	ldrh	r2, [r7, #8]
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2323      	movs	r3, #35	; 0x23
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f001 fd1f 	bl	80049ec <I2C_RequestMemoryRead>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d023      	beq.n	8002ffc <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe ffff 	bl	8001fbc <HAL_DMA_Abort_IT>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fda:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e081      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b01      	cmp	r3, #1
 8003002:	d108      	bne.n	8003016 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	e007      	b.n	8003026 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003024:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003052:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e049      	b.n	80030fa <HAL_I2C_Mem_Read_DMA+0x31a>
 8003066:	bf00      	nop
 8003068:	20000020 	.word	0x20000020
 800306c:	14f8b589 	.word	0x14f8b589
 8003070:	ffff0000 	.word	0xffff0000
 8003074:	08004bbd 	.word	0x08004bbd
 8003078:	08004d67 	.word	0x08004d67
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e02d      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80030a4:	88f8      	ldrh	r0, [r7, #6]
 80030a6:	893a      	ldrh	r2, [r7, #8]
 80030a8:	8979      	ldrh	r1, [r7, #10]
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2323      	movs	r3, #35	; 0x23
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	4603      	mov	r3, r0
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f001 fc99 	bl	80049ec <I2C_RequestMemoryRead>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e01d      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003128:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d003      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x38>
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	f040 80c1 	bne.w	80032c2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_I2C_EV_IRQHandler+0x6e>
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003160:	d003      	beq.n	800316a <HAL_I2C_EV_IRQHandler+0x62>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003168:	d101      	bne.n	800316e <HAL_I2C_EV_IRQHandler+0x66>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x68>
 800316e:	2300      	movs	r3, #0
 8003170:	2b01      	cmp	r3, #1
 8003172:	f000 8132 	beq.w	80033da <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00c      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x92>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f002 f848 	bl	8005222 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fd79 	bl	8003c8a <I2C_Master_SB>
 8003198:	e092      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xb2>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0a5b      	lsrs	r3, r3, #9
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fdef 	bl	8003d96 <I2C_Master_ADD10>
 80031b8:	e082      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0xd2>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	0a5b      	lsrs	r3, r3, #9
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fe09 	bl	8003dea <I2C_Master_ADDR>
 80031d8:	e072      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03b      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	f000 80f3 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	09db      	lsrs	r3, r3, #7
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9f3 	bl	8003608 <I2C_MasterTransmit_TXE>
 8003222:	e04d      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80d6 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80cf 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	2b21      	cmp	r3, #33	; 0x21
 8003244:	d103      	bne.n	800324e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa7a 	bl	8003740 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800324c:	e0c7      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	f040 80c4 	bne.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fae8 	bl	800382c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325c:	e0bf      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326c:	f000 80b7 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00f      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x194>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x194>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fb5d 	bl	8003954 <I2C_MasterReceive_RXNE>
 800329a:	e011      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 809a 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	0a5b      	lsrs	r3, r3, #9
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8093 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fbfc 	bl	8003ab6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032be:	e08e      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
 80032c0:	e08d      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e007      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x20e>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	0a5b      	lsrs	r3, r3, #9
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800330c:	69b9      	ldr	r1, [r7, #24]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 ffba 	bl	8004288 <I2C_Slave_ADDR>
 8003314:	e066      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x22e>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	0a5b      	lsrs	r3, r3, #9
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fff4 	bl	800431c <I2C_Slave_STOPF>
 8003334:	e056      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003336:	7bbb      	ldrb	r3, [r7, #14]
 8003338:	2b21      	cmp	r3, #33	; 0x21
 800333a:	d002      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0x23a>
 800333c:	7bbb      	ldrb	r3, [r7, #14]
 800333e:	2b29      	cmp	r3, #41	; 0x29
 8003340:	d125      	bne.n	800338e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	09db      	lsrs	r3, r3, #7
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00f      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x266>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	0a9b      	lsrs	r3, r3, #10
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x266>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fed0 	bl	800410c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800336c:	e039      	b.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d033      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	0a5b      	lsrs	r3, r3, #9
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02d      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fefd 	bl	8004186 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338c:	e029      	b.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00f      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x2b2>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	0a9b      	lsrs	r3, r3, #10
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x2b2>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 ff08 	bl	80041c8 <I2C_SlaveReceive_RXNE>
 80033b8:	e014      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00e      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	0a5b      	lsrs	r3, r3, #9
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 ff36 	bl	8004244 <I2C_SlaveReceive_BTF>
 80033d8:	e004      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033e2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b08a      	sub	sp, #40	; 0x28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800340c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <HAL_I2C_ER_IRQHandler+0x4e>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003436:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	0a5b      	lsrs	r3, r3, #9
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <HAL_I2C_ER_IRQHandler+0x78>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003460:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	0a9b      	lsrs	r3, r3, #10
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03f      	beq.n	80034ee <HAL_I2C_ER_IRQHandler+0x104>
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d039      	beq.n	80034ee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800347a:	7efb      	ldrb	r3, [r7, #27]
 800347c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003494:	7ebb      	ldrb	r3, [r7, #26]
 8003496:	2b20      	cmp	r3, #32
 8003498:	d112      	bne.n	80034c0 <HAL_I2C_ER_IRQHandler+0xd6>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <HAL_I2C_ER_IRQHandler+0xd6>
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	2b21      	cmp	r3, #33	; 0x21
 80034a4:	d008      	beq.n	80034b8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b29      	cmp	r3, #41	; 0x29
 80034aa:	d005      	beq.n	80034b8 <HAL_I2C_ER_IRQHandler+0xce>
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b28      	cmp	r3, #40	; 0x28
 80034b0:	d106      	bne.n	80034c0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b21      	cmp	r3, #33	; 0x21
 80034b6:	d103      	bne.n	80034c0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f001 f85f 	bl	800457c <I2C_Slave_AF>
 80034be:	e016      	b.n	80034ee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034d2:	7efb      	ldrb	r3, [r7, #27]
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d002      	beq.n	80034de <HAL_I2C_ER_IRQHandler+0xf4>
 80034d8:	7efb      	ldrb	r3, [r7, #27]
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d107      	bne.n	80034ee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	0adb      	lsrs	r3, r3, #11
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <HAL_I2C_ER_IRQHandler+0x12e>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	f043 0308 	orr.w	r3, r3, #8
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003516:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f001 f896 	bl	800465c <I2C_ITError>
  }
}
 8003530:	bf00      	nop
 8003532:	3728      	adds	r7, #40	; 0x28
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
 8003594:	4613      	mov	r3, r2
 8003596:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800361e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d150      	bne.n	80036d0 <I2C_MasterTransmit_TXE+0xc8>
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b21      	cmp	r3, #33	; 0x21
 8003632:	d14d      	bne.n	80036d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d01d      	beq.n	8003676 <I2C_MasterTransmit_TXE+0x6e>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b20      	cmp	r3, #32
 800363e:	d01a      	beq.n	8003676 <I2C_MasterTransmit_TXE+0x6e>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003646:	d016      	beq.n	8003676 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003656:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2211      	movs	r2, #17
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ff62 	bl	8003538 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003674:	e060      	b.n	8003738 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003684:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d107      	bne.n	80036c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff7d 	bl	80035b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036be:	e03b      	b.n	8003738 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff35 	bl	8003538 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036ce:	e033      	b.n	8003738 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b21      	cmp	r3, #33	; 0x21
 80036d4:	d005      	beq.n	80036e2 <I2C_MasterTransmit_TXE+0xda>
 80036d6:	7bbb      	ldrb	r3, [r7, #14]
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d12d      	bne.n	8003738 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b22      	cmp	r3, #34	; 0x22
 80036e0:	d12a      	bne.n	8003738 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d108      	bne.n	80036fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036fc:	e01c      	b.n	8003738 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d103      	bne.n	8003712 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f88e 	bl	800382c <I2C_MemoryTransmit_TXE_BTF>
}
 8003710:	e012      	b.n	8003738 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003736:	e7ff      	b.n	8003738 <I2C_MasterTransmit_TXE+0x130>
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b21      	cmp	r3, #33	; 0x21
 8003758:	d164      	bne.n	8003824 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003788:	e04c      	b.n	8003824 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d01d      	beq.n	80037cc <I2C_MasterTransmit_BTF+0x8c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b20      	cmp	r3, #32
 8003794:	d01a      	beq.n	80037cc <I2C_MasterTransmit_BTF+0x8c>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379c:	d016      	beq.n	80037cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2211      	movs	r2, #17
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff feb7 	bl	8003538 <HAL_I2C_MasterTxCpltCallback>
}
 80037ca:	e02b      	b.n	8003824 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d107      	bne.n	8003816 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fed2 	bl	80035b8 <HAL_I2C_MemTxCpltCallback>
}
 8003814:	e006      	b.n	8003824 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fe8a 	bl	8003538 <HAL_I2C_MasterTxCpltCallback>
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	2b00      	cmp	r3, #0
 8003842:	d11d      	bne.n	8003880 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10b      	bne.n	8003864 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	b2da      	uxtb	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003862:	e073      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	b29b      	uxth	r3, r3
 800386a:	121b      	asrs	r3, r3, #8
 800386c:	b2da      	uxtb	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800387e:	e065      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003884:	2b01      	cmp	r3, #1
 8003886:	d10b      	bne.n	80038a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388c:	b2da      	uxtb	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800389e:	e055      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d151      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b22      	cmp	r3, #34	; 0x22
 80038ac:	d10d      	bne.n	80038ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038c8:	e040      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b21      	cmp	r3, #33	; 0x21
 80038d8:	d112      	bne.n	8003900 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038fe:	e025      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d120      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b21      	cmp	r3, #33	; 0x21
 800390e:	d11d      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fe36 	bl	80035b8 <HAL_I2C_MemTxCpltCallback>
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b22      	cmp	r3, #34	; 0x22
 8003966:	f040 80a2 	bne.w	8003aae <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d921      	bls.n	80039bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	f040 8082 	bne.w	8003aae <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80039ba:	e078      	b.n	8003aae <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d074      	beq.n	8003aae <I2C_MasterReceive_RXNE+0x15a>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d002      	beq.n	80039d0 <I2C_MasterReceive_RXNE+0x7c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d16e      	bne.n	8003aae <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f001 fbc5 	bl	8005160 <I2C_WaitOnSTOPRequestThroughIT>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d142      	bne.n	8003a62 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d10a      	bne.n	8003a4c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fdc1 	bl	80035cc <HAL_I2C_MemRxCpltCallback>
}
 8003a4a:	e030      	b.n	8003aae <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2212      	movs	r2, #18
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fd76 	bl	800354c <HAL_I2C_MasterRxCpltCallback>
}
 8003a60:	e025      	b.n	8003aae <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fd99 	bl	80035e0 <HAL_I2C_ErrorCallback>
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d11b      	bne.n	8003b06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003adc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b04:	e0bd      	b.n	8003c82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d129      	bne.n	8003b64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d00a      	beq.n	8003b3c <I2C_MasterReceive_BTF+0x86>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d007      	beq.n	8003b3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b62:	e08e      	b.n	8003c82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d176      	bne.n	8003c5c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d002      	beq.n	8003b7a <I2C_MasterReceive_BTF+0xc4>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d108      	bne.n	8003b8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e019      	b.n	8003bc0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d002      	beq.n	8003b98 <I2C_MasterReceive_BTF+0xe2>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d108      	bne.n	8003baa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e00a      	b.n	8003bc0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d007      	beq.n	8003bc0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d10a      	bne.n	8003c46 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fcc4 	bl	80035cc <HAL_I2C_MemRxCpltCallback>
}
 8003c44:	e01d      	b.n	8003c82 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2212      	movs	r2, #18
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fc79 	bl	800354c <HAL_I2C_MasterRxCpltCallback>
}
 8003c5a:	e012      	b.n	8003c82 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d117      	bne.n	8003cce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003cb8:	e067      	b.n	8003d8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	611a      	str	r2, [r3, #16]
}
 8003ccc:	e05d      	b.n	8003d8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd6:	d133      	bne.n	8003d40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b21      	cmp	r3, #33	; 0x21
 8003ce2:	d109      	bne.n	8003cf8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cf4:	611a      	str	r2, [r3, #16]
 8003cf6:	e008      	b.n	8003d0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d004      	beq.n	8003d1c <I2C_Master_SB+0x92>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d032      	beq.n	8003d8a <I2C_Master_SB+0x100>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d02d      	beq.n	8003d8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3c:	605a      	str	r2, [r3, #4]
}
 8003d3e:	e024      	b.n	8003d8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10e      	bne.n	8003d66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	11db      	asrs	r3, r3, #7
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0306 	and.w	r3, r3, #6
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f063 030f 	orn	r3, r3, #15
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]
}
 8003d64:	e011      	b.n	8003d8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10d      	bne.n	8003d8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	11db      	asrs	r3, r3, #7
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 0306 	and.w	r3, r3, #6
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f063 030e 	orn	r3, r3, #14
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <I2C_Master_ADD10+0x26>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d108      	bne.n	8003dce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00c      	beq.n	8003dde <I2C_Master_ADD10+0x48>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	605a      	str	r2, [r3, #4]
  }
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b091      	sub	sp, #68	; 0x44
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b22      	cmp	r3, #34	; 0x22
 8003e12:	f040 8169 	bne.w	80040e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <I2C_Master_ADDR+0x54>
 8003e1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d10b      	bne.n	8003e3e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	e160      	b.n	8004100 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11d      	bne.n	8003e82 <I2C_Master_ADDR+0x98>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e4e:	d118      	bne.n	8003e82 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e74:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	651a      	str	r2, [r3, #80]	; 0x50
 8003e80:	e13e      	b.n	8004100 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d113      	bne.n	8003eb4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e115      	b.n	80040e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	f040 808a 	bne.w	8003fd4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec6:	d137      	bne.n	8003f38 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee6:	d113      	bne.n	8003f10 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	e0e7      	b.n	80040e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e0d3      	b.n	80040e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d02e      	beq.n	8003f9c <I2C_Master_ADDR+0x1b2>
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d02b      	beq.n	8003f9c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	2b12      	cmp	r3, #18
 8003f48:	d102      	bne.n	8003f50 <I2C_Master_ADDR+0x166>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d125      	bne.n	8003f9c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d00e      	beq.n	8003f74 <I2C_Master_ADDR+0x18a>
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d00b      	beq.n	8003f74 <I2C_Master_ADDR+0x18a>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d008      	beq.n	8003f74 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e007      	b.n	8003f84 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f82:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	e0a1      	b.n	80040e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e085      	b.n	80040e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d14d      	bne.n	800407a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d016      	beq.n	8004012 <I2C_Master_ADDR+0x228>
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d013      	beq.n	8004012 <I2C_Master_ADDR+0x228>
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d010      	beq.n	8004012 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e007      	b.n	8004022 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004020:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d117      	bne.n	8004062 <I2C_Master_ADDR+0x278>
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004038:	d00b      	beq.n	8004052 <I2C_Master_ADDR+0x268>
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2b01      	cmp	r3, #1
 800403e:	d008      	beq.n	8004052 <I2C_Master_ADDR+0x268>
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	2b08      	cmp	r3, #8
 8004044:	d005      	beq.n	8004052 <I2C_Master_ADDR+0x268>
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	2b10      	cmp	r3, #16
 800404a:	d002      	beq.n	8004052 <I2C_Master_ADDR+0x268>
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	2b20      	cmp	r3, #32
 8004050:	d107      	bne.n	8004062 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004060:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	e032      	b.n	80040e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004088:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004098:	d117      	bne.n	80040ca <I2C_Master_ADDR+0x2e0>
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040a0:	d00b      	beq.n	80040ba <I2C_Master_ADDR+0x2d0>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d008      	beq.n	80040ba <I2C_Master_ADDR+0x2d0>
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d005      	beq.n	80040ba <I2C_Master_ADDR+0x2d0>
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d002      	beq.n	80040ba <I2C_Master_ADDR+0x2d0>
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d107      	bne.n	80040ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040e6:	e00b      	b.n	8004100 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	e7ff      	b.n	8004100 <I2C_Master_ADDR+0x316>
 8004100:	bf00      	nop
 8004102:	3744      	adds	r7, #68	; 0x44
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02b      	beq.n	800417e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d114      	bne.n	800417e <I2C_SlaveTransmit_TXE+0x72>
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b29      	cmp	r3, #41	; 0x29
 8004158:	d111      	bne.n	800417e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2221      	movs	r2, #33	; 0x21
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2228      	movs	r2, #40	; 0x28
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff f9f1 	bl	8003560 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d011      	beq.n	80041bc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02c      	beq.n	800423c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d114      	bne.n	800423c <I2C_SlaveReceive_RXNE+0x74>
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b2a      	cmp	r3, #42	; 0x2a
 8004216:	d111      	bne.n	800423c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004226:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2222      	movs	r2, #34	; 0x22
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2228      	movs	r2, #40	; 0x28
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff f99c 	bl	8003574 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042a2:	2b28      	cmp	r3, #40	; 0x28
 80042a4:	d127      	bne.n	80042f6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	09db      	lsrs	r3, r3, #7
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d103      	bne.n	80042da <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	81bb      	strh	r3, [r7, #12]
 80042d8:	e002      	b.n	80042e0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042e8:	89ba      	ldrh	r2, [r7, #12]
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff f94a 	bl	8003588 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042f4:	e00e      	b.n	8004314 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800433a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004378:	d172      	bne.n	8004460 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b22      	cmp	r3, #34	; 0x22
 800437e:	d002      	beq.n	8004386 <I2C_Slave_STOPF+0x6a>
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b2a      	cmp	r3, #42	; 0x2a
 8004384:	d135      	bne.n	80043f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd ffa8 	bl	8002314 <HAL_DMA_GetState>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d049      	beq.n	800445e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	4a69      	ldr	r2, [pc, #420]	; (8004574 <I2C_Slave_STOPF+0x258>)
 80043d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd fdf0 	bl	8001fbc <HAL_DMA_Abort_IT>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d03d      	beq.n	800445e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043ec:	4610      	mov	r0, r2
 80043ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043f0:	e035      	b.n	800445e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004424:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd ff72 	bl	8002314 <HAL_DMA_GetState>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d014      	beq.n	8004460 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	4a4e      	ldr	r2, [pc, #312]	; (8004574 <I2C_Slave_STOPF+0x258>)
 800443c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd fdba 	bl	8001fbc <HAL_DMA_Abort_IT>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004458:	4610      	mov	r0, r2
 800445a:	4798      	blx	r3
 800445c:	e000      	b.n	8004460 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800445e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d03e      	beq.n	80044e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d112      	bne.n	800449e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d112      	bne.n	80044d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f043 0204 	orr.w	r2, r3, #4
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8b3 	bl	800465c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044f6:	e039      	b.n	800456c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b2a      	cmp	r3, #42	; 0x2a
 80044fc:	d109      	bne.n	8004512 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2228      	movs	r2, #40	; 0x28
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff f831 	bl	8003574 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b28      	cmp	r3, #40	; 0x28
 800451c:	d111      	bne.n	8004542 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <I2C_Slave_STOPF+0x25c>)
 8004522:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff f832 	bl	80035a4 <HAL_I2C_ListenCpltCallback>
}
 8004540:	e014      	b.n	800456c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	2b22      	cmp	r3, #34	; 0x22
 8004548:	d002      	beq.n	8004550 <I2C_Slave_STOPF+0x234>
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b22      	cmp	r3, #34	; 0x22
 800454e:	d10d      	bne.n	800456c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff f804 	bl	8003574 <HAL_I2C_SlaveRxCpltCallback>
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	08004de1 	.word	0x08004de1
 8004578:	ffff0000 	.word	0xffff0000

0800457c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d002      	beq.n	800459e <I2C_Slave_AF+0x22>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b20      	cmp	r3, #32
 800459c:	d129      	bne.n	80045f2 <I2C_Slave_AF+0x76>
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b28      	cmp	r3, #40	; 0x28
 80045a2:	d126      	bne.n	80045f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a2c      	ldr	r2, [pc, #176]	; (8004658 <I2C_Slave_AF+0xdc>)
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fe ffda 	bl	80035a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80045f0:	e02e      	b.n	8004650 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b21      	cmp	r3, #33	; 0x21
 80045f6:	d126      	bne.n	8004646 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <I2C_Slave_AF+0xdc>)
 80045fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2221      	movs	r2, #33	; 0x21
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004622:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800462c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fe ff8e 	bl	8003560 <HAL_I2C_SlaveTxCpltCallback>
}
 8004644:	e004      	b.n	8004650 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800464e:	615a      	str	r2, [r3, #20]
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	ffff0000 	.word	0xffff0000

0800465c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004672:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004674:	7bbb      	ldrb	r3, [r7, #14]
 8004676:	2b10      	cmp	r3, #16
 8004678:	d002      	beq.n	8004680 <I2C_ITError+0x24>
 800467a:	7bbb      	ldrb	r3, [r7, #14]
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d10a      	bne.n	8004696 <I2C_ITError+0x3a>
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	d107      	bne.n	8004696 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004694:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800469c:	2b28      	cmp	r3, #40	; 0x28
 800469e:	d107      	bne.n	80046b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2228      	movs	r2, #40	; 0x28
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046ae:	e015      	b.n	80046dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046be:	d00a      	beq.n	80046d6 <I2C_ITError+0x7a>
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b60      	cmp	r3, #96	; 0x60
 80046c4:	d007      	beq.n	80046d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ea:	d162      	bne.n	80047b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d020      	beq.n	800474c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	4a6a      	ldr	r2, [pc, #424]	; (80048b8 <I2C_ITError+0x25c>)
 8004710:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fc50 	bl	8001fbc <HAL_DMA_Abort_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8089 	beq.w	8004836 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004746:	4610      	mov	r0, r2
 8004748:	4798      	blx	r3
 800474a:	e074      	b.n	8004836 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	4a59      	ldr	r2, [pc, #356]	; (80048b8 <I2C_ITError+0x25c>)
 8004752:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	4618      	mov	r0, r3
 800475a:	f7fd fc2f 	bl	8001fbc <HAL_DMA_Abort_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d068      	beq.n	8004836 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d10b      	bne.n	800478a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
 80047b0:	e041      	b.n	8004836 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b60      	cmp	r3, #96	; 0x60
 80047bc:	d125      	bne.n	800480a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d10b      	bne.n	80047f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe fef6 	bl	80035f4 <HAL_I2C_AbortCpltCallback>
 8004808:	e015      	b.n	8004836 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d10b      	bne.n	8004830 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fe fed5 	bl	80035e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10e      	bne.n	8004864 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004872:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d113      	bne.n	80048b0 <I2C_ITError+0x254>
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b28      	cmp	r3, #40	; 0x28
 800488c:	d110      	bne.n	80048b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <I2C_ITError+0x260>)
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fe fe7a 	bl	80035a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	08004de1 	.word	0x08004de1
 80048bc:	ffff0000 	.word	0xffff0000

080048c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	460b      	mov	r3, r1
 80048d4:	813b      	strh	r3, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fb1a 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004910:	d103      	bne.n	800491a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e05f      	b.n	80049de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800492c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	6a3a      	ldr	r2, [r7, #32]
 8004932:	492d      	ldr	r1, [pc, #180]	; (80049e8 <I2C_RequestMemoryWrite+0x128>)
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fb52 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04c      	b.n	80049de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fbbc 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b04      	cmp	r3, #4
 8004970:	d107      	bne.n	8004982 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e02b      	b.n	80049de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800498c:	893b      	ldrh	r3, [r7, #8]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	e021      	b.n	80049dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004998:	893b      	ldrh	r3, [r7, #8]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	b29b      	uxth	r3, r3
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	6a39      	ldr	r1, [r7, #32]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fb96 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d107      	bne.n	80049ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e005      	b.n	80049de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049d2:	893b      	ldrh	r3, [r7, #8]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	00010002 	.word	0x00010002

080049ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	817b      	strh	r3, [r7, #10]
 80049fe:	460b      	mov	r3, r1
 8004a00:	813b      	strh	r3, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fa7c 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4c:	d103      	bne.n	8004a56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e0aa      	b.n	8004bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a5a:	897b      	ldrh	r3, [r7, #10]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	6a3a      	ldr	r2, [r7, #32]
 8004a6e:	4952      	ldr	r1, [pc, #328]	; (8004bb8 <I2C_RequestMemoryRead+0x1cc>)
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fab4 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e097      	b.n	8004bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	6a39      	ldr	r1, [r7, #32]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fb1e 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d107      	bne.n	8004abe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e076      	b.n	8004bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d105      	bne.n	8004ad4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ac8:	893b      	ldrh	r3, [r7, #8]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	611a      	str	r2, [r3, #16]
 8004ad2:	e021      	b.n	8004b18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ad4:	893b      	ldrh	r3, [r7, #8]
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	6a39      	ldr	r1, [r7, #32]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 faf8 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d107      	bne.n	8004b0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e050      	b.n	8004bb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0e:	893b      	ldrh	r3, [r7, #8]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	6a39      	ldr	r1, [r7, #32]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fadd 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d107      	bne.n	8004b40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e035      	b.n	8004bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f9e5 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00d      	beq.n	8004b88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	d103      	bne.n	8004b84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e013      	b.n	8004bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b88:	897b      	ldrh	r3, [r7, #10]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	6a3a      	ldr	r2, [r7, #32]
 8004b9c:	4906      	ldr	r1, [pc, #24]	; (8004bb8 <I2C_RequestMemoryRead+0x1cc>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fa1d 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	00010002 	.word	0x00010002

08004bbc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bee:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004c16:	2b21      	cmp	r3, #33	; 0x21
 8004c18:	d007      	beq.n	8004c2a <I2C_DMAXferCplt+0x6e>
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004c20:	2b22      	cmp	r3, #34	; 0x22
 8004c22:	d131      	bne.n	8004c88 <I2C_DMAXferCplt+0xcc>
 8004c24:	7cbb      	ldrb	r3, [r7, #18]
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d12e      	bne.n	8004c88 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c38:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b29      	cmp	r3, #41	; 0x29
 8004c44:	d10a      	bne.n	8004c5c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2221      	movs	r2, #33	; 0x21
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2228      	movs	r2, #40	; 0x28
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c54:	6978      	ldr	r0, [r7, #20]
 8004c56:	f7fe fc83 	bl	8003560 <HAL_I2C_SlaveTxCpltCallback>
 8004c5a:	e00c      	b.n	8004c76 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c60:	d109      	bne.n	8004c76 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2222      	movs	r2, #34	; 0x22
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2228      	movs	r2, #40	; 0x28
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c70:	6978      	ldr	r0, [r7, #20]
 8004c72:	f7fe fc7f 	bl	8003574 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004c84:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c86:	e06a      	b.n	8004d5e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d064      	beq.n	8004d5e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d107      	bne.n	8004cae <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cbc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cc4:	d009      	beq.n	8004cda <I2C_DMAXferCplt+0x11e>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d006      	beq.n	8004cda <I2C_DMAXferCplt+0x11e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cd2:	d002      	beq.n	8004cda <I2C_DMAXferCplt+0x11e>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d107      	bne.n	8004cea <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d08:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004d18:	6978      	ldr	r0, [r7, #20]
 8004d1a:	f7fe fc61 	bl	80035e0 <HAL_I2C_ErrorCallback>
}
 8004d1e:	e01e      	b.n	8004d5e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d10a      	bne.n	8004d4a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004d42:	6978      	ldr	r0, [r7, #20]
 8004d44:	f7fe fc42 	bl	80035cc <HAL_I2C_MemRxCpltCallback>
}
 8004d48:	e009      	b.n	8004d5e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2212      	movs	r2, #18
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f7fe fbf7 	bl	800354c <HAL_I2C_MasterRxCpltCallback>
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	2200      	movs	r2, #0
 8004d82:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2200      	movs	r2, #0
 8004d92:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fd facb 	bl	8002330 <HAL_DMA_GetError>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d01b      	beq.n	8004dd8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dae:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f043 0210 	orr.w	r2, r3, #16
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7fe fc04 	bl	80035e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dfa:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <I2C_DMAAbort+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	08db      	lsrs	r3, r3, #3
 8004e00:	4a4a      	ldr	r2, [pc, #296]	; (8004f2c <I2C_DMAAbort+0x14c>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	0a1a      	lsrs	r2, r3, #8
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00da      	lsls	r2, r3, #3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e26:	e00a      	b.n	8004e3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d0ea      	beq.n	8004e14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e80:	2200      	movs	r2, #0
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	2200      	movs	r2, #0
 8004e92:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b60      	cmp	r3, #96	; 0x60
 8004eae:	d10e      	bne.n	8004ece <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ec6:	6978      	ldr	r0, [r7, #20]
 8004ec8:	f7fe fb94 	bl	80035f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ecc:	e027      	b.n	8004f1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ed4:	2b28      	cmp	r3, #40	; 0x28
 8004ed6:	d117      	bne.n	8004f08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ef6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2228      	movs	r2, #40	; 0x28
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f06:	e007      	b.n	8004f18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f18:	6978      	ldr	r0, [r7, #20]
 8004f1a:	f7fe fb61 	bl	80035e0 <HAL_I2C_ErrorCallback>
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000020 	.word	0x20000020
 8004f2c:	14f8b589 	.word	0x14f8b589

08004f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f40:	e025      	b.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d021      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fc fdef 	bl	8001b2c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d116      	bne.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e023      	b.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10d      	bne.n	8004fb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	e00c      	b.n	8004fce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d0b6      	beq.n	8004f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fec:	e051      	b.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d123      	bne.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005016:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e046      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d021      	beq.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fc fd6d 	bl	8001b2c <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d116      	bne.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f043 0220 	orr.w	r2, r3, #32
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e020      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	0c1b      	lsrs	r3, r3, #16
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10c      	bne.n	80050b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	43da      	mvns	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf14      	ite	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	2300      	moveq	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e00b      	b.n	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	43da      	mvns	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4013      	ands	r3, r2
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d18d      	bne.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e8:	e02d      	b.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f86a 	bl	80051c4 <I2C_IsAcknowledgeFailed>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e02d      	b.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d021      	beq.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fc fd13 	bl	8001b2c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d116      	bne.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e007      	b.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b80      	cmp	r3, #128	; 0x80
 8005152:	d1ca      	bne.n	80050ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	08db      	lsrs	r3, r3, #3
 8005172:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	0a1a      	lsrs	r2, r3, #8
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b01      	subs	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e008      	b.n	80051b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ac:	d0e9      	beq.n	8005182 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000020 	.word	0x20000020
 80051c0:	14f8b589 	.word	0x14f8b589

080051c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	d11b      	bne.n	8005214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	f043 0204 	orr.w	r2, r3, #4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005232:	d103      	bne.n	800523c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800523a:	e007      	b.n	800524c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005244:	d102      	bne.n	800524c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2208      	movs	r2, #8
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0cc      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b68      	ldr	r3, [pc, #416]	; (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d90c      	bls.n	8005294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b63      	ldr	r3, [pc, #396]	; (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0b8      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ac:	4b59      	ldr	r3, [pc, #356]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a58      	ldr	r2, [pc, #352]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c4:	4b53      	ldr	r3, [pc, #332]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a52      	ldr	r2, [pc, #328]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b50      	ldr	r3, [pc, #320]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	494d      	ldr	r1, [pc, #308]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d044      	beq.n	8005378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	4b47      	ldr	r3, [pc, #284]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d119      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e07f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d003      	beq.n	8005316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005312:	2b03      	cmp	r3, #3
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005316:	4b3f      	ldr	r3, [pc, #252]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e06f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e067      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005336:	4b37      	ldr	r3, [pc, #220]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f023 0203 	bic.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4934      	ldr	r1, [pc, #208]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005348:	f7fc fbf0 	bl	8001b2c <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fc fbec 	bl	8001b2c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e04f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 020c 	and.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d1eb      	bne.n	8005350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005378:	4b25      	ldr	r3, [pc, #148]	; (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d20c      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e032      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4916      	ldr	r1, [pc, #88]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	490e      	ldr	r1, [pc, #56]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053de:	f000 f855 	bl	800548c <HAL_RCC_GetSysClockFreq>
 80053e2:	4602      	mov	r2, r0
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	490a      	ldr	r1, [pc, #40]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 80053f0:	5ccb      	ldrb	r3, [r1, r3]
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fc fb50 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40023c00 	.word	0x40023c00
 8005414:	40023800 	.word	0x40023800
 8005418:	0800820c 	.word	0x0800820c
 800541c:	20000020 	.word	0x20000020
 8005420:	20000024 	.word	0x20000024

08005424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000020 	.word	0x20000020

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b05      	ldr	r3, [pc, #20]	; (800545c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a9b      	lsrs	r3, r3, #10
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4903      	ldr	r1, [pc, #12]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40023800 	.word	0x40023800
 8005460:	0800821c 	.word	0x0800821c

08005464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005468:	f7ff ffdc 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0b5b      	lsrs	r3, r3, #13
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4903      	ldr	r1, [pc, #12]	; (8005488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40023800 	.word	0x40023800
 8005488:	0800821c 	.word	0x0800821c

0800548c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800548c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005494:	2600      	movs	r6, #0
 8005496:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8005498:	2600      	movs	r6, #0
 800549a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800549c:	2600      	movs	r6, #0
 800549e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80054a0:	2600      	movs	r6, #0
 80054a2:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054a4:	2600      	movs	r6, #0
 80054a6:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a8:	4ea3      	ldr	r6, [pc, #652]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80054aa:	68b6      	ldr	r6, [r6, #8]
 80054ac:	f006 060c 	and.w	r6, r6, #12
 80054b0:	2e0c      	cmp	r6, #12
 80054b2:	f200 8137 	bhi.w	8005724 <HAL_RCC_GetSysClockFreq+0x298>
 80054b6:	f20f 0c08 	addw	ip, pc, #8
 80054ba:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	08005725 	.word	0x08005725
 80054c8:	08005725 	.word	0x08005725
 80054cc:	08005725 	.word	0x08005725
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	08005725 	.word	0x08005725
 80054d8:	08005725 	.word	0x08005725
 80054dc:	08005725 	.word	0x08005725
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005725 	.word	0x08005725
 80054e8:	08005725 	.word	0x08005725
 80054ec:	08005725 	.word	0x08005725
 80054f0:	08005617 	.word	0x08005617
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f4:	4b91      	ldr	r3, [pc, #580]	; (800573c <HAL_RCC_GetSysClockFreq+0x2b0>)
 80054f6:	613b      	str	r3, [r7, #16]
       break;
 80054f8:	e117      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054fa:	4b91      	ldr	r3, [pc, #580]	; (8005740 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80054fc:	613b      	str	r3, [r7, #16]
      break;
 80054fe:	e114      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005500:	4b8d      	ldr	r3, [pc, #564]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005508:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800550a:	4b8b      	ldr	r3, [pc, #556]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d024      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005516:	4b88      	ldr	r3, [pc, #544]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	099b      	lsrs	r3, r3, #6
 800551c:	461a      	mov	r2, r3
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005526:	f04f 0500 	mov.w	r5, #0
 800552a:	ea02 0004 	and.w	r0, r2, r4
 800552e:	ea03 0105 	and.w	r1, r3, r5
 8005532:	4b83      	ldr	r3, [pc, #524]	; (8005740 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005534:	fb03 f201 	mul.w	r2, r3, r1
 8005538:	2300      	movs	r3, #0
 800553a:	fb03 f300 	mul.w	r3, r3, r0
 800553e:	4413      	add	r3, r2
 8005540:	4a7f      	ldr	r2, [pc, #508]	; (8005740 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005542:	fba0 0102 	umull	r0, r1, r0, r2
 8005546:	440b      	add	r3, r1
 8005548:	4619      	mov	r1, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	461a      	mov	r2, r3
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	f7fb faed 	bl	8000b30 <__aeabi_uldivmod>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4613      	mov	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e04c      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005560:	4b75      	ldr	r3, [pc, #468]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	099b      	lsrs	r3, r3, #6
 8005566:	461a      	mov	r2, r3
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	ea02 0800 	and.w	r8, r2, r0
 8005578:	ea03 0901 	and.w	r9, r3, r1
 800557c:	4640      	mov	r0, r8
 800557e:	4649      	mov	r1, r9
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	014b      	lsls	r3, r1, #5
 800558a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800558e:	0142      	lsls	r2, r0, #5
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	ebb0 0008 	subs.w	r0, r0, r8
 8005598:	eb61 0109 	sbc.w	r1, r1, r9
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	018b      	lsls	r3, r1, #6
 80055a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055aa:	0182      	lsls	r2, r0, #6
 80055ac:	1a12      	subs	r2, r2, r0
 80055ae:	eb63 0301 	sbc.w	r3, r3, r1
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	00d9      	lsls	r1, r3, #3
 80055bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c0:	00d0      	lsls	r0, r2, #3
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	eb12 0208 	adds.w	r2, r2, r8
 80055ca:	eb43 0309 	adc.w	r3, r3, r9
 80055ce:	f04f 0000 	mov.w	r0, #0
 80055d2:	f04f 0100 	mov.w	r1, #0
 80055d6:	0299      	lsls	r1, r3, #10
 80055d8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055dc:	0290      	lsls	r0, r2, #10
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f7fb fa9f 	bl	8000b30 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4613      	mov	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055fa:	4b4f      	ldr	r3, [pc, #316]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	3301      	adds	r3, #1
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	613b      	str	r3, [r7, #16]
      break;
 8005614:	e089      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005616:	4948      	ldr	r1, [pc, #288]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005618:	6849      	ldr	r1, [r1, #4]
 800561a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800561e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005620:	4945      	ldr	r1, [pc, #276]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005622:	6849      	ldr	r1, [r1, #4]
 8005624:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005628:	2900      	cmp	r1, #0
 800562a:	d024      	beq.n	8005676 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562c:	4942      	ldr	r1, [pc, #264]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800562e:	6849      	ldr	r1, [r1, #4]
 8005630:	0989      	lsrs	r1, r1, #6
 8005632:	4608      	mov	r0, r1
 8005634:	f04f 0100 	mov.w	r1, #0
 8005638:	f240 14ff 	movw	r4, #511	; 0x1ff
 800563c:	f04f 0500 	mov.w	r5, #0
 8005640:	ea00 0204 	and.w	r2, r0, r4
 8005644:	ea01 0305 	and.w	r3, r1, r5
 8005648:	493d      	ldr	r1, [pc, #244]	; (8005740 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800564a:	fb01 f003 	mul.w	r0, r1, r3
 800564e:	2100      	movs	r1, #0
 8005650:	fb01 f102 	mul.w	r1, r1, r2
 8005654:	1844      	adds	r4, r0, r1
 8005656:	493a      	ldr	r1, [pc, #232]	; (8005740 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005658:	fba2 0101 	umull	r0, r1, r2, r1
 800565c:	1863      	adds	r3, r4, r1
 800565e:	4619      	mov	r1, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	461a      	mov	r2, r3
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	f7fb fa62 	bl	8000b30 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4613      	mov	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	e04a      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005676:	4b30      	ldr	r3, [pc, #192]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	099b      	lsrs	r3, r3, #6
 800567c:	461a      	mov	r2, r3
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005686:	f04f 0100 	mov.w	r1, #0
 800568a:	ea02 0400 	and.w	r4, r2, r0
 800568e:	ea03 0501 	and.w	r5, r3, r1
 8005692:	4620      	mov	r0, r4
 8005694:	4629      	mov	r1, r5
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	014b      	lsls	r3, r1, #5
 80056a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056a4:	0142      	lsls	r2, r0, #5
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	1b00      	subs	r0, r0, r4
 80056ac:	eb61 0105 	sbc.w	r1, r1, r5
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	018b      	lsls	r3, r1, #6
 80056ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056be:	0182      	lsls	r2, r0, #6
 80056c0:	1a12      	subs	r2, r2, r0
 80056c2:	eb63 0301 	sbc.w	r3, r3, r1
 80056c6:	f04f 0000 	mov.w	r0, #0
 80056ca:	f04f 0100 	mov.w	r1, #0
 80056ce:	00d9      	lsls	r1, r3, #3
 80056d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056d4:	00d0      	lsls	r0, r2, #3
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	1912      	adds	r2, r2, r4
 80056dc:	eb45 0303 	adc.w	r3, r5, r3
 80056e0:	f04f 0000 	mov.w	r0, #0
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	0299      	lsls	r1, r3, #10
 80056ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056ee:	0290      	lsls	r0, r2, #10
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	f7fb fa16 	bl	8000b30 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4613      	mov	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	0f1b      	lsrs	r3, r3, #28
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	613b      	str	r3, [r7, #16]
      break;
 8005722:	e002      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005726:	613b      	str	r3, [r7, #16]
      break;
 8005728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572a:	693b      	ldr	r3, [r7, #16]
}
 800572c:	4618      	mov	r0, r3
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	00f42400 	.word	0x00f42400
 8005740:	017d7840 	.word	0x017d7840

08005744 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e28d      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8083 	beq.w	800586a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005764:	4b94      	ldr	r3, [pc, #592]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030c 	and.w	r3, r3, #12
 800576c:	2b04      	cmp	r3, #4
 800576e:	d019      	beq.n	80057a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005770:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005778:	2b08      	cmp	r3, #8
 800577a:	d106      	bne.n	800578a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800577c:	4b8e      	ldr	r3, [pc, #568]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005788:	d00c      	beq.n	80057a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800578a:	4b8b      	ldr	r3, [pc, #556]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005792:	2b0c      	cmp	r3, #12
 8005794:	d112      	bne.n	80057bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005796:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a2:	d10b      	bne.n	80057bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	4b84      	ldr	r3, [pc, #528]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05b      	beq.n	8005868 <HAL_RCC_OscConfig+0x124>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d157      	bne.n	8005868 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e25a      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c4:	d106      	bne.n	80057d4 <HAL_RCC_OscConfig+0x90>
 80057c6:	4b7c      	ldr	r3, [pc, #496]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a7b      	ldr	r2, [pc, #492]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e01d      	b.n	8005810 <HAL_RCC_OscConfig+0xcc>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCC_OscConfig+0xb4>
 80057de:	4b76      	ldr	r3, [pc, #472]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a75      	ldr	r2, [pc, #468]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	4b73      	ldr	r3, [pc, #460]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a72      	ldr	r2, [pc, #456]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e00b      	b.n	8005810 <HAL_RCC_OscConfig+0xcc>
 80057f8:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a6e      	ldr	r2, [pc, #440]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80057fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4b6c      	ldr	r3, [pc, #432]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a6b      	ldr	r2, [pc, #428]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800580a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d013      	beq.n	8005840 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fc f988 	bl	8001b2c <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005820:	f7fc f984 	bl	8001b2c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b64      	cmp	r3, #100	; 0x64
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e21f      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005832:	4b61      	ldr	r3, [pc, #388]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0xdc>
 800583e:	e014      	b.n	800586a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fc f974 	bl	8001b2c <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005848:	f7fc f970 	bl	8001b2c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b64      	cmp	r3, #100	; 0x64
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e20b      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585a:	4b57      	ldr	r3, [pc, #348]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x104>
 8005866:	e000      	b.n	800586a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d06f      	beq.n	8005956 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005876:	4b50      	ldr	r3, [pc, #320]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005882:	4b4d      	ldr	r3, [pc, #308]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800588a:	2b08      	cmp	r3, #8
 800588c:	d105      	bne.n	800589a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800588e:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800589a:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	d11c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a6:	4b44      	ldr	r3, [pc, #272]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d116      	bne.n	80058e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b2:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_RCC_OscConfig+0x186>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e1d3      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	4b3b      	ldr	r3, [pc, #236]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4937      	ldr	r1, [pc, #220]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058de:	e03a      	b.n	8005956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d020      	beq.n	800592a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e8:	4b34      	ldr	r3, [pc, #208]	; (80059bc <HAL_RCC_OscConfig+0x278>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc f91d 	bl	8001b2c <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fc f919 	bl	8001b2c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1b4      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4925      	ldr	r1, [pc, #148]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
 8005928:	e015      	b.n	8005956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592a:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RCC_OscConfig+0x278>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fc f8fc 	bl	8001b2c <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005938:	f7fc f8f8 	bl	8001b2c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e193      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d036      	beq.n	80059d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_RCC_OscConfig+0x27c>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005970:	f7fc f8dc 	bl	8001b2c <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005978:	f7fc f8d8 	bl	8001b2c <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e173      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 800598c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x234>
 8005996:	e01b      	b.n	80059d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCC_OscConfig+0x27c>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fc f8c5 	bl	8001b2c <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a4:	e00e      	b.n	80059c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059a6:	f7fc f8c1 	bl	8001b2c <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d907      	bls.n	80059c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e15c      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
 80059b8:	40023800 	.word	0x40023800
 80059bc:	42470000 	.word	0x42470000
 80059c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	4b8a      	ldr	r3, [pc, #552]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ea      	bne.n	80059a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8097 	beq.w	8005b0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	4b83      	ldr	r3, [pc, #524]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10f      	bne.n	8005a0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a7e      	ldr	r2, [pc, #504]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
 80059fe:	4b7c      	ldr	r3, [pc, #496]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	4b79      	ldr	r3, [pc, #484]	; (8005bf4 <HAL_RCC_OscConfig+0x4b0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d118      	bne.n	8005a4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1a:	4b76      	ldr	r3, [pc, #472]	; (8005bf4 <HAL_RCC_OscConfig+0x4b0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a75      	ldr	r2, [pc, #468]	; (8005bf4 <HAL_RCC_OscConfig+0x4b0>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a26:	f7fc f881 	bl	8001b2c <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2e:	f7fc f87d 	bl	8001b2c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e118      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a40:	4b6c      	ldr	r3, [pc, #432]	; (8005bf4 <HAL_RCC_OscConfig+0x4b0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x31e>
 8005a54:	4b66      	ldr	r3, [pc, #408]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a58:	4a65      	ldr	r2, [pc, #404]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a60:	e01c      	b.n	8005a9c <HAL_RCC_OscConfig+0x358>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x340>
 8005a6a:	4b61      	ldr	r3, [pc, #388]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a60      	ldr	r2, [pc, #384]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a70:	f043 0304 	orr.w	r3, r3, #4
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
 8005a76:	4b5e      	ldr	r3, [pc, #376]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a5d      	ldr	r2, [pc, #372]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	e00b      	b.n	8005a9c <HAL_RCC_OscConfig+0x358>
 8005a84:	4b5a      	ldr	r3, [pc, #360]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	4a59      	ldr	r2, [pc, #356]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a90:	4b57      	ldr	r3, [pc, #348]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a56      	ldr	r2, [pc, #344]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005a96:	f023 0304 	bic.w	r3, r3, #4
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa4:	f7fc f842 	bl	8001b2c <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aac:	f7fc f83e 	bl	8001b2c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0d7      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0ee      	beq.n	8005aac <HAL_RCC_OscConfig+0x368>
 8005ace:	e014      	b.n	8005afa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad0:	f7fc f82c 	bl	8001b2c <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad6:	e00a      	b.n	8005aee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad8:	f7fc f828 	bl	8001b2c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0c1      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aee:	4b40      	ldr	r3, [pc, #256]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1ee      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d105      	bne.n	8005b0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b00:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	4a3a      	ldr	r2, [pc, #232]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80ad 	beq.w	8005c70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d060      	beq.n	8005be4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d145      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2a:	4b33      	ldr	r3, [pc, #204]	; (8005bf8 <HAL_RCC_OscConfig+0x4b4>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fb fffc 	bl	8001b2c <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fb fff8 	bl	8001b2c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e093      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4a:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	019b      	lsls	r3, r3, #6
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	061b      	lsls	r3, r3, #24
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	071b      	lsls	r3, r3, #28
 8005b82:	491b      	ldr	r1, [pc, #108]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_RCC_OscConfig+0x4b4>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8e:	f7fb ffcd 	bl	8001b2c <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fb ffc9 	bl	8001b2c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e064      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba8:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x452>
 8005bb4:	e05c      	b.n	8005c70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <HAL_RCC_OscConfig+0x4b4>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fb ffb6 	bl	8001b2c <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc4:	f7fb ffb2 	bl	8001b2c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e04d      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_RCC_OscConfig+0x4ac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x480>
 8005be2:	e045      	b.n	8005c70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e040      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	; (8005c7c <HAL_RCC_OscConfig+0x538>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d030      	beq.n	8005c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d129      	bne.n	8005c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d122      	bne.n	8005c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d119      	bne.n	8005c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	3b01      	subs	r3, #1
 8005c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d10f      	bne.n	8005c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d107      	bne.n	8005c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800

08005c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e07b      	b.n	8005d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d108      	bne.n	8005cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ca2:	d009      	beq.n	8005cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]
 8005caa:	e005      	b.n	8005cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb fcc0 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	ea42 0103 	orr.w	r1, r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	f003 0104 	and.w	r1, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	f003 0210 	and.w	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_SPI_Transmit_DMA+0x20>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e09b      	b.n	8005eec <HAL_SPI_Transmit_DMA+0x158>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d002      	beq.n	8005dce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dcc:	e089      	b.n	8005ee2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_SPI_Transmit_DMA+0x46>
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dde:	e080      	b.n	8005ee2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2203      	movs	r2, #3
 8005de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	d10f      	bne.n	8005e48 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4c:	4a29      	ldr	r2, [pc, #164]	; (8005ef4 <HAL_SPI_Transmit_DMA+0x160>)
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e54:	4a28      	ldr	r2, [pc, #160]	; (8005ef8 <HAL_SPI_Transmit_DMA+0x164>)
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	4a27      	ldr	r2, [pc, #156]	; (8005efc <HAL_SPI_Transmit_DMA+0x168>)
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e64:	2200      	movs	r2, #0
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	4619      	mov	r1, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e80:	f7fc f844 	bl	8001f0c <HAL_DMA_Start_IT>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f043 0210 	orr.w	r2, r3, #16
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ea2:	e01e      	b.n	8005ee2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d007      	beq.n	8005ec2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0220 	orr.w	r2, r2, #32
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0202 	orr.w	r2, r2, #2
 8005ee0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	08005fe5 	.word	0x08005fe5
 8005ef8:	08005f3d 	.word	0x08005f3d
 8005efc:	08006001 	.word	0x08006001

08005f00 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4a:	f7fb fdef 	bl	8001b2c <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5e:	d03b      	beq.n	8005fd8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0220 	bic.w	r2, r2, #32
 8005f6e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0202 	bic.w	r2, r2, #2
 8005f7e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	2164      	movs	r1, #100	; 0x64
 8005f84:	6978      	ldr	r0, [r7, #20]
 8005f86:	f000 f8e3 	bl	8006150 <SPI_EndRxTxTransaction>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	f043 0220 	orr.w	r2, r3, #32
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005fd0:	6978      	ldr	r0, [r7, #20]
 8005fd2:	f7ff ffa9 	bl	8005f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005fd6:	e002      	b.n	8005fde <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f7ff ff91 	bl	8005f00 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff8e 	bl	8005f14 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0203 	bic.w	r2, r2, #3
 800601c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f043 0210 	orr.w	r2, r3, #16
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ff78 	bl	8005f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006050:	f7fb fd6c 	bl	8001b2c <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	4413      	add	r3, r2
 800605e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006060:	f7fb fd64 	bl	8001b2c <HAL_GetTick>
 8006064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006066:	4b39      	ldr	r3, [pc, #228]	; (800614c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	015b      	lsls	r3, r3, #5
 800606c:	0d1b      	lsrs	r3, r3, #20
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	fb02 f303 	mul.w	r3, r2, r3
 8006074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006076:	e054      	b.n	8006122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d050      	beq.n	8006122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006080:	f7fb fd54 	bl	8001b2c <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	429a      	cmp	r2, r3
 800608e:	d902      	bls.n	8006096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d13d      	bne.n	8006112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ae:	d111      	bne.n	80060d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b8:	d004      	beq.n	80060c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	d107      	bne.n	80060d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060dc:	d10f      	bne.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e017      	b.n	8006142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	3b01      	subs	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	429a      	cmp	r2, r3
 800613e:	d19b      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000020 	.word	0x20000020

08006150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <SPI_EndRxTxTransaction+0x7c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <SPI_EndRxTxTransaction+0x80>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	0d5b      	lsrs	r3, r3, #21
 8006168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617a:	d112      	bne.n	80061a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff ff5a 	bl	8006040 <SPI_WaitFlagStateUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	f043 0220 	orr.w	r2, r3, #32
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e00f      	b.n	80061c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d0f2      	beq.n	80061a2 <SPI_EndRxTxTransaction+0x52>
 80061bc:	e000      	b.n	80061c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80061be:	bf00      	nop
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000020 	.word	0x20000020
 80061d0:	165e9f81 	.word	0x165e9f81

080061d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e041      	b.n	800626a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fb faa6 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f000 f9ce 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e04e      	b.n	800632a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a23      	ldr	r2, [pc, #140]	; (8006338 <HAL_TIM_Base_Start_IT+0xc4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d022      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x80>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b6:	d01d      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x80>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1f      	ldr	r2, [pc, #124]	; (800633c <HAL_TIM_Base_Start_IT+0xc8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d018      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x80>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1e      	ldr	r2, [pc, #120]	; (8006340 <HAL_TIM_Base_Start_IT+0xcc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d013      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x80>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <HAL_TIM_Base_Start_IT+0xd0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00e      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x80>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <HAL_TIM_Base_Start_IT+0xd4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x80>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a19      	ldr	r2, [pc, #100]	; (800634c <HAL_TIM_Base_Start_IT+0xd8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x80>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_TIM_Base_Start_IT+0xdc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d111      	bne.n	8006318 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b06      	cmp	r3, #6
 8006304:	d010      	beq.n	8006328 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006316:	e007      	b.n	8006328 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40010000 	.word	0x40010000
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40010400 	.word	0x40010400
 800634c:	40014000 	.word	0x40014000
 8006350:	40001800 	.word	0x40001800

08006354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0202 	mvn.w	r2, #2
 8006380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f8ee 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f8e0 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f8f1 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d122      	bne.n	8006404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0204 	mvn.w	r2, #4
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8c4 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8b6 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8c7 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d122      	bne.n	8006458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d11b      	bne.n	8006458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0208 	mvn.w	r2, #8
 8006428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f89a 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006444:	e005      	b.n	8006452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f88c 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f89d 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b10      	cmp	r3, #16
 8006464:	d122      	bne.n	80064ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d11b      	bne.n	80064ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0210 	mvn.w	r2, #16
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2208      	movs	r2, #8
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f870 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f862 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f873 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d10e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0201 	mvn.w	r2, #1
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fa ff54 	bl	8001380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	d10e      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d107      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f902 	bl	8006708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d10e      	bne.n	8006530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d107      	bne.n	8006530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f838 	bl	80065a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b20      	cmp	r3, #32
 800653c:	d10e      	bne.n	800655c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b20      	cmp	r3, #32
 800654a:	d107      	bne.n	800655c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0220 	mvn.w	r2, #32
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8cc 	bl	80066f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a40      	ldr	r2, [pc, #256]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d00f      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3d      	ldr	r2, [pc, #244]	; (80066cc <TIM_Base_SetConfig+0x118>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <TIM_Base_SetConfig+0x11c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <TIM_Base_SetConfig+0x120>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3a      	ldr	r2, [pc, #232]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d108      	bne.n	8006606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2f      	ldr	r2, [pc, #188]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d02b      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006614:	d027      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <TIM_Base_SetConfig+0x118>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d023      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <TIM_Base_SetConfig+0x11c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01f      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <TIM_Base_SetConfig+0x120>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01b      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d017      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a28      	ldr	r2, [pc, #160]	; (80066dc <TIM_Base_SetConfig+0x128>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a27      	ldr	r2, [pc, #156]	; (80066e0 <TIM_Base_SetConfig+0x12c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00f      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a26      	ldr	r2, [pc, #152]	; (80066e4 <TIM_Base_SetConfig+0x130>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00b      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a25      	ldr	r2, [pc, #148]	; (80066e8 <TIM_Base_SetConfig+0x134>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a24      	ldr	r2, [pc, #144]	; (80066ec <TIM_Base_SetConfig+0x138>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <TIM_Base_SetConfig+0x13c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d108      	bne.n	8006678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a0a      	ldr	r2, [pc, #40]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a0c      	ldr	r2, [pc, #48]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	615a      	str	r2, [r3, #20]
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40010400 	.word	0x40010400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800
 80066e8:	40001800 	.word	0x40001800
 80066ec:	40001c00 	.word	0x40001c00
 80066f0:	40002000 	.word	0x40002000

080066f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e03f      	b.n	80067ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb f82a 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	; 0x24
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800675e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fb8f 	bl	8006e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08c      	sub	sp, #48	; 0x30
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d165      	bne.n	800689e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <HAL_UART_Transmit_DMA+0x26>
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e05e      	b.n	80068a0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Transmit_DMA+0x38>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e057      	b.n	80068a0 <HAL_UART_Transmit_DMA+0xe8>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	88fa      	ldrh	r2, [r7, #6]
 8006802:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	88fa      	ldrh	r2, [r7, #6]
 8006808:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2221      	movs	r2, #33	; 0x21
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681c:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <HAL_UART_Transmit_DMA+0xf0>)
 800681e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	4a21      	ldr	r2, [pc, #132]	; (80068ac <HAL_UART_Transmit_DMA+0xf4>)
 8006826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682c:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <HAL_UART_Transmit_DMA+0xf8>)
 800682e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006834:	2200      	movs	r2, #0
 8006836:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006838:	f107 0308 	add.w	r3, r7, #8
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	6819      	ldr	r1, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3304      	adds	r3, #4
 800684c:	461a      	mov	r2, r3
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	f7fb fb5c 	bl	8001f0c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800685c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	617b      	str	r3, [r7, #20]
   return(result);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3314      	adds	r3, #20
 8006884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006886:	627a      	str	r2, [r7, #36]	; 0x24
 8006888:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6a39      	ldr	r1, [r7, #32]
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	61fb      	str	r3, [r7, #28]
   return(result);
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e5      	bne.n	8006866 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800689e:	2302      	movs	r3, #2
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3730      	adds	r7, #48	; 0x30
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	08006991 	.word	0x08006991
 80068ac:	08006a2b 	.word	0x08006a2b
 80068b0:	08006ba3 	.word	0x08006ba3

080068b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d11d      	bne.n	800690a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <HAL_UART_Receive_DMA+0x26>
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e016      	b.n	800690c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_UART_Receive_DMA+0x38>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e00f      	b.n	800690c <HAL_UART_Receive_DMA+0x58>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	461a      	mov	r2, r3
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f999 	bl	8006c38 <UART_Start_Receive_DMA>
 8006906:	4603      	mov	r3, r0
 8006908:	e000      	b.n	800690c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800690a:	2302      	movs	r3, #2
  }
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b090      	sub	sp, #64	; 0x40
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d137      	bne.n	8006a1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	2200      	movs	r2, #0
 80069b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3314      	adds	r3, #20
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	623b      	str	r3, [r7, #32]
   return(result);
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d2:	633a      	str	r2, [r7, #48]	; 0x30
 80069d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e5      	bne.n	80069b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
 80069fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a06:	61fa      	str	r2, [r7, #28]
 8006a08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	69b9      	ldr	r1, [r7, #24]
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	617b      	str	r3, [r7, #20]
   return(result);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e5      	bne.n	80069e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a1a:	e002      	b.n	8006a22 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a1e:	f7ff ff79 	bl	8006914 <HAL_UART_TxCpltCallback>
}
 8006a22:	bf00      	nop
 8006a24:	3740      	adds	r7, #64	; 0x40
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff ff75 	bl	8006928 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b09c      	sub	sp, #112	; 0x70
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d172      	bne.n	8006b48 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a64:	2200      	movs	r2, #0
 8006a66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	330c      	adds	r3, #12
 8006a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a88:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3314      	adds	r3, #20
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	f023 0301 	bic.w	r3, r3, #1
 8006ab2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3314      	adds	r3, #20
 8006aba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006abc:	647a      	str	r2, [r7, #68]	; 0x44
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e5      	bne.n	8006a9c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3314      	adds	r3, #20
 8006aee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006af0:	633a      	str	r2, [r7, #48]	; 0x30
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d119      	bne.n	8006b48 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0310 	bic.w	r3, r3, #16
 8006b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	330c      	adds	r3, #12
 8006b32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b34:	61fa      	str	r2, [r7, #28]
 8006b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	617b      	str	r3, [r7, #20]
   return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e5      	bne.n	8006b14 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d106      	bne.n	8006b5e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b54:	4619      	mov	r1, r3
 8006b56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b58:	f7ff ff0e 	bl	8006978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b5c:	e002      	b.n	8006b64 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006b5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b60:	f7ff feec 	bl	800693c <HAL_UART_RxCpltCallback>
}
 8006b64:	bf00      	nop
 8006b66:	3770      	adds	r7, #112	; 0x70
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d108      	bne.n	8006b94 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff fef3 	bl	8006978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b92:	e002      	b.n	8006b9a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7ff fedb 	bl	8006950 <HAL_UART_RxHalfCpltCallback>
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b21      	cmp	r3, #33	; 0x21
 8006bd4:	d108      	bne.n	8006be8 <UART_DMAError+0x46>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006be2:	68b8      	ldr	r0, [r7, #8]
 8006be4:	f000 f8c2 	bl	8006d6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b22      	cmp	r3, #34	; 0x22
 8006c08:	d108      	bne.n	8006c1c <UART_DMAError+0x7a>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c16:	68b8      	ldr	r0, [r7, #8]
 8006c18:	f000 f8d0 	bl	8006dbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	f043 0210 	orr.w	r2, r3, #16
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c28:	68b8      	ldr	r0, [r7, #8]
 8006c2a:	f7ff fe9b 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b098      	sub	sp, #96	; 0x60
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2222      	movs	r2, #34	; 0x22
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	4a3e      	ldr	r2, [pc, #248]	; (8006d60 <UART_Start_Receive_DMA+0x128>)
 8006c66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	4a3d      	ldr	r2, [pc, #244]	; (8006d64 <UART_Start_Receive_DMA+0x12c>)
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	4a3c      	ldr	r2, [pc, #240]	; (8006d68 <UART_Start_Receive_DMA+0x130>)
 8006c76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c80:	f107 0308 	add.w	r3, r7, #8
 8006c84:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	f7fb f938 	bl	8001f0c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006cdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	f043 0301 	orr.w	r3, r3, #1
 8006d04:	657b      	str	r3, [r7, #84]	; 0x54
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3314      	adds	r3, #20
 8006d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d0e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3314      	adds	r3, #20
 8006d28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	617b      	str	r3, [r7, #20]
   return(result);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d38:	653b      	str	r3, [r7, #80]	; 0x50
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3314      	adds	r3, #20
 8006d40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d42:	627a      	str	r2, [r7, #36]	; 0x24
 8006d44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6a39      	ldr	r1, [r7, #32]
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3760      	adds	r7, #96	; 0x60
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	08006a47 	.word	0x08006a47
 8006d64:	08006b6d 	.word	0x08006b6d
 8006d68:	08006ba3 	.word	0x08006ba3

08006d6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b089      	sub	sp, #36	; 0x24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	330c      	adds	r3, #12
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	61ba      	str	r2, [r7, #24]
 8006d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6979      	ldr	r1, [r7, #20]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	613b      	str	r3, [r7, #16]
   return(result);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e5      	bne.n	8006d74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006db0:	bf00      	nop
 8006db2:	3724      	adds	r7, #36	; 0x24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b095      	sub	sp, #84	; 0x54
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006de4:	643a      	str	r2, [r7, #64]	; 0x40
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e5      	bne.n	8006dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3314      	adds	r3, #20
 8006e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e5      	bne.n	8006df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d119      	bne.n	8006e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f023 0310 	bic.w	r3, r3, #16
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e54:	61ba      	str	r2, [r7, #24]
 8006e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6979      	ldr	r1, [r7, #20]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	613b      	str	r3, [r7, #16]
   return(result);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e76:	bf00      	nop
 8006e78:	3754      	adds	r7, #84	; 0x54
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	b09f      	sub	sp, #124	; 0x7c
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9a:	68d9      	ldr	r1, [r3, #12]
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	ea40 0301 	orr.w	r3, r0, r1
 8006ea4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ec8:	f021 010c 	bic.w	r1, r1, #12
 8006ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	6999      	ldr	r1, [r3, #24]
 8006ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	ea40 0301 	orr.w	r3, r0, r1
 8006eec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4bc5      	ldr	r3, [pc, #788]	; (8007208 <UART_SetConfig+0x384>)
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d004      	beq.n	8006f02 <UART_SetConfig+0x7e>
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	4bc3      	ldr	r3, [pc, #780]	; (800720c <UART_SetConfig+0x388>)
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d103      	bne.n	8006f0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f02:	f7fe faaf 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006f06:	6778      	str	r0, [r7, #116]	; 0x74
 8006f08:	e002      	b.n	8006f10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f0a:	f7fe fa97 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006f0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f18:	f040 80b6 	bne.w	8007088 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f1e:	461c      	mov	r4, r3
 8006f20:	f04f 0500 	mov.w	r5, #0
 8006f24:	4622      	mov	r2, r4
 8006f26:	462b      	mov	r3, r5
 8006f28:	1891      	adds	r1, r2, r2
 8006f2a:	6439      	str	r1, [r7, #64]	; 0x40
 8006f2c:	415b      	adcs	r3, r3
 8006f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f34:	1912      	adds	r2, r2, r4
 8006f36:	eb45 0303 	adc.w	r3, r5, r3
 8006f3a:	f04f 0000 	mov.w	r0, #0
 8006f3e:	f04f 0100 	mov.w	r1, #0
 8006f42:	00d9      	lsls	r1, r3, #3
 8006f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f48:	00d0      	lsls	r0, r2, #3
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	1911      	adds	r1, r2, r4
 8006f50:	6639      	str	r1, [r7, #96]	; 0x60
 8006f52:	416b      	adcs	r3, r5
 8006f54:	667b      	str	r3, [r7, #100]	; 0x64
 8006f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	1891      	adds	r1, r2, r2
 8006f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f64:	415b      	adcs	r3, r3
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f70:	f7f9 fdde 	bl	8000b30 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4ba5      	ldr	r3, [pc, #660]	; (8007210 <UART_SetConfig+0x38c>)
 8006f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	011e      	lsls	r6, r3, #4
 8006f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f84:	461c      	mov	r4, r3
 8006f86:	f04f 0500 	mov.w	r5, #0
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	1891      	adds	r1, r2, r2
 8006f90:	6339      	str	r1, [r7, #48]	; 0x30
 8006f92:	415b      	adcs	r3, r3
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
 8006f96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f9a:	1912      	adds	r2, r2, r4
 8006f9c:	eb45 0303 	adc.w	r3, r5, r3
 8006fa0:	f04f 0000 	mov.w	r0, #0
 8006fa4:	f04f 0100 	mov.w	r1, #0
 8006fa8:	00d9      	lsls	r1, r3, #3
 8006faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fae:	00d0      	lsls	r0, r2, #3
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	1911      	adds	r1, r2, r4
 8006fb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fb8:	416b      	adcs	r3, r5
 8006fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	1891      	adds	r1, r2, r2
 8006fc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fca:	415b      	adcs	r3, r3
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006fd6:	f7f9 fdab 	bl	8000b30 <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4b8c      	ldr	r3, [pc, #560]	; (8007210 <UART_SetConfig+0x38c>)
 8006fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	2164      	movs	r1, #100	; 0x64
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	3332      	adds	r3, #50	; 0x32
 8006ff2:	4a87      	ldr	r2, [pc, #540]	; (8007210 <UART_SetConfig+0x38c>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007000:	441e      	add	r6, r3
 8007002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007004:	4618      	mov	r0, r3
 8007006:	f04f 0100 	mov.w	r1, #0
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	1894      	adds	r4, r2, r2
 8007010:	623c      	str	r4, [r7, #32]
 8007012:	415b      	adcs	r3, r3
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800701a:	1812      	adds	r2, r2, r0
 800701c:	eb41 0303 	adc.w	r3, r1, r3
 8007020:	f04f 0400 	mov.w	r4, #0
 8007024:	f04f 0500 	mov.w	r5, #0
 8007028:	00dd      	lsls	r5, r3, #3
 800702a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800702e:	00d4      	lsls	r4, r2, #3
 8007030:	4622      	mov	r2, r4
 8007032:	462b      	mov	r3, r5
 8007034:	1814      	adds	r4, r2, r0
 8007036:	653c      	str	r4, [r7, #80]	; 0x50
 8007038:	414b      	adcs	r3, r1
 800703a:	657b      	str	r3, [r7, #84]	; 0x54
 800703c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	461a      	mov	r2, r3
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	1891      	adds	r1, r2, r2
 8007048:	61b9      	str	r1, [r7, #24]
 800704a:	415b      	adcs	r3, r3
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007052:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007056:	f7f9 fd6b 	bl	8000b30 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4b6c      	ldr	r3, [pc, #432]	; (8007210 <UART_SetConfig+0x38c>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	3332      	adds	r3, #50	; 0x32
 8007072:	4a67      	ldr	r2, [pc, #412]	; (8007210 <UART_SetConfig+0x38c>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 0207 	and.w	r2, r3, #7
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4432      	add	r2, r6
 8007084:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007086:	e0b9      	b.n	80071fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800708a:	461c      	mov	r4, r3
 800708c:	f04f 0500 	mov.w	r5, #0
 8007090:	4622      	mov	r2, r4
 8007092:	462b      	mov	r3, r5
 8007094:	1891      	adds	r1, r2, r2
 8007096:	6139      	str	r1, [r7, #16]
 8007098:	415b      	adcs	r3, r3
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070a0:	1912      	adds	r2, r2, r4
 80070a2:	eb45 0303 	adc.w	r3, r5, r3
 80070a6:	f04f 0000 	mov.w	r0, #0
 80070aa:	f04f 0100 	mov.w	r1, #0
 80070ae:	00d9      	lsls	r1, r3, #3
 80070b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070b4:	00d0      	lsls	r0, r2, #3
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	eb12 0804 	adds.w	r8, r2, r4
 80070be:	eb43 0905 	adc.w	r9, r3, r5
 80070c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f04f 0100 	mov.w	r1, #0
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	008b      	lsls	r3, r1, #2
 80070d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070da:	0082      	lsls	r2, r0, #2
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 fd26 	bl	8000b30 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4b49      	ldr	r3, [pc, #292]	; (8007210 <UART_SetConfig+0x38c>)
 80070ea:	fba3 2302 	umull	r2, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	011e      	lsls	r6, r3, #4
 80070f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f4:	4618      	mov	r0, r3
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	1894      	adds	r4, r2, r2
 8007100:	60bc      	str	r4, [r7, #8]
 8007102:	415b      	adcs	r3, r3
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800710a:	1812      	adds	r2, r2, r0
 800710c:	eb41 0303 	adc.w	r3, r1, r3
 8007110:	f04f 0400 	mov.w	r4, #0
 8007114:	f04f 0500 	mov.w	r5, #0
 8007118:	00dd      	lsls	r5, r3, #3
 800711a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800711e:	00d4      	lsls	r4, r2, #3
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	1814      	adds	r4, r2, r0
 8007126:	64bc      	str	r4, [r7, #72]	; 0x48
 8007128:	414b      	adcs	r3, r1
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	f04f 0100 	mov.w	r1, #0
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	008b      	lsls	r3, r1, #2
 8007140:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007144:	0082      	lsls	r2, r0, #2
 8007146:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800714a:	f7f9 fcf1 	bl	8000b30 <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4b2f      	ldr	r3, [pc, #188]	; (8007210 <UART_SetConfig+0x38c>)
 8007154:	fba3 1302 	umull	r1, r3, r3, r2
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	2164      	movs	r1, #100	; 0x64
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	3332      	adds	r3, #50	; 0x32
 8007166:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <UART_SetConfig+0x38c>)
 8007168:	fba2 2303 	umull	r2, r3, r2, r3
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007172:	441e      	add	r6, r3
 8007174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007176:	4618      	mov	r0, r3
 8007178:	f04f 0100 	mov.w	r1, #0
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	1894      	adds	r4, r2, r2
 8007182:	603c      	str	r4, [r7, #0]
 8007184:	415b      	adcs	r3, r3
 8007186:	607b      	str	r3, [r7, #4]
 8007188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718c:	1812      	adds	r2, r2, r0
 800718e:	eb41 0303 	adc.w	r3, r1, r3
 8007192:	f04f 0400 	mov.w	r4, #0
 8007196:	f04f 0500 	mov.w	r5, #0
 800719a:	00dd      	lsls	r5, r3, #3
 800719c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071a0:	00d4      	lsls	r4, r2, #3
 80071a2:	4622      	mov	r2, r4
 80071a4:	462b      	mov	r3, r5
 80071a6:	eb12 0a00 	adds.w	sl, r2, r0
 80071aa:	eb43 0b01 	adc.w	fp, r3, r1
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f04f 0100 	mov.w	r1, #0
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	008b      	lsls	r3, r1, #2
 80071c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071c6:	0082      	lsls	r2, r0, #2
 80071c8:	4650      	mov	r0, sl
 80071ca:	4659      	mov	r1, fp
 80071cc:	f7f9 fcb0 	bl	8000b30 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <UART_SetConfig+0x38c>)
 80071d6:	fba3 1302 	umull	r1, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2164      	movs	r1, #100	; 0x64
 80071de:	fb01 f303 	mul.w	r3, r1, r3
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	3332      	adds	r3, #50	; 0x32
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <UART_SetConfig+0x38c>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4432      	add	r2, r6
 80071fa:	609a      	str	r2, [r3, #8]
}
 80071fc:	bf00      	nop
 80071fe:	377c      	adds	r7, #124	; 0x7c
 8007200:	46bd      	mov	sp, r7
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop
 8007208:	40011000 	.word	0x40011000
 800720c:	40011400 	.word	0x40011400
 8007210:	51eb851f 	.word	0x51eb851f

08007214 <__errno>:
 8007214:	4b01      	ldr	r3, [pc, #4]	; (800721c <__errno+0x8>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	2000002c 	.word	0x2000002c

08007220 <__libc_init_array>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	4d0d      	ldr	r5, [pc, #52]	; (8007258 <__libc_init_array+0x38>)
 8007224:	4c0d      	ldr	r4, [pc, #52]	; (800725c <__libc_init_array+0x3c>)
 8007226:	1b64      	subs	r4, r4, r5
 8007228:	10a4      	asrs	r4, r4, #2
 800722a:	2600      	movs	r6, #0
 800722c:	42a6      	cmp	r6, r4
 800722e:	d109      	bne.n	8007244 <__libc_init_array+0x24>
 8007230:	4d0b      	ldr	r5, [pc, #44]	; (8007260 <__libc_init_array+0x40>)
 8007232:	4c0c      	ldr	r4, [pc, #48]	; (8007264 <__libc_init_array+0x44>)
 8007234:	f000 ffd6 	bl	80081e4 <_init>
 8007238:	1b64      	subs	r4, r4, r5
 800723a:	10a4      	asrs	r4, r4, #2
 800723c:	2600      	movs	r6, #0
 800723e:	42a6      	cmp	r6, r4
 8007240:	d105      	bne.n	800724e <__libc_init_array+0x2e>
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	f855 3b04 	ldr.w	r3, [r5], #4
 8007248:	4798      	blx	r3
 800724a:	3601      	adds	r6, #1
 800724c:	e7ee      	b.n	800722c <__libc_init_array+0xc>
 800724e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007252:	4798      	blx	r3
 8007254:	3601      	adds	r6, #1
 8007256:	e7f2      	b.n	800723e <__libc_init_array+0x1e>
 8007258:	08008278 	.word	0x08008278
 800725c:	08008278 	.word	0x08008278
 8007260:	08008278 	.word	0x08008278
 8007264:	0800827c 	.word	0x0800827c

08007268 <memset>:
 8007268:	4402      	add	r2, r0
 800726a:	4603      	mov	r3, r0
 800726c:	4293      	cmp	r3, r2
 800726e:	d100      	bne.n	8007272 <memset+0xa>
 8007270:	4770      	bx	lr
 8007272:	f803 1b01 	strb.w	r1, [r3], #1
 8007276:	e7f9      	b.n	800726c <memset+0x4>

08007278 <pow>:
 8007278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800727c:	ec59 8b10 	vmov	r8, r9, d0
 8007280:	ec57 6b11 	vmov	r6, r7, d1
 8007284:	f000 f8a8 	bl	80073d8 <__ieee754_pow>
 8007288:	4b4e      	ldr	r3, [pc, #312]	; (80073c4 <pow+0x14c>)
 800728a:	f993 3000 	ldrsb.w	r3, [r3]
 800728e:	3301      	adds	r3, #1
 8007290:	ec55 4b10 	vmov	r4, r5, d0
 8007294:	d015      	beq.n	80072c2 <pow+0x4a>
 8007296:	4632      	mov	r2, r6
 8007298:	463b      	mov	r3, r7
 800729a:	4630      	mov	r0, r6
 800729c:	4639      	mov	r1, r7
 800729e:	f7f9 fc09 	bl	8000ab4 <__aeabi_dcmpun>
 80072a2:	b970      	cbnz	r0, 80072c2 <pow+0x4a>
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	4640      	mov	r0, r8
 80072aa:	4649      	mov	r1, r9
 80072ac:	f7f9 fc02 	bl	8000ab4 <__aeabi_dcmpun>
 80072b0:	2200      	movs	r2, #0
 80072b2:	2300      	movs	r3, #0
 80072b4:	b148      	cbz	r0, 80072ca <pow+0x52>
 80072b6:	4630      	mov	r0, r6
 80072b8:	4639      	mov	r1, r7
 80072ba:	f7f9 fbc9 	bl	8000a50 <__aeabi_dcmpeq>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d17d      	bne.n	80073be <pow+0x146>
 80072c2:	ec45 4b10 	vmov	d0, r4, r5
 80072c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	f7f9 fbbf 	bl	8000a50 <__aeabi_dcmpeq>
 80072d2:	b1e0      	cbz	r0, 800730e <pow+0x96>
 80072d4:	2200      	movs	r2, #0
 80072d6:	2300      	movs	r3, #0
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f9 fbb8 	bl	8000a50 <__aeabi_dcmpeq>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d16c      	bne.n	80073be <pow+0x146>
 80072e4:	ec47 6b10 	vmov	d0, r6, r7
 80072e8:	f000 fe55 	bl	8007f96 <finite>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0e8      	beq.n	80072c2 <pow+0x4a>
 80072f0:	2200      	movs	r2, #0
 80072f2:	2300      	movs	r3, #0
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f9 fbb4 	bl	8000a64 <__aeabi_dcmplt>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d0e0      	beq.n	80072c2 <pow+0x4a>
 8007300:	f7ff ff88 	bl	8007214 <__errno>
 8007304:	2321      	movs	r3, #33	; 0x21
 8007306:	6003      	str	r3, [r0, #0]
 8007308:	2400      	movs	r4, #0
 800730a:	4d2f      	ldr	r5, [pc, #188]	; (80073c8 <pow+0x150>)
 800730c:	e7d9      	b.n	80072c2 <pow+0x4a>
 800730e:	ec45 4b10 	vmov	d0, r4, r5
 8007312:	f000 fe40 	bl	8007f96 <finite>
 8007316:	bbb8      	cbnz	r0, 8007388 <pow+0x110>
 8007318:	ec49 8b10 	vmov	d0, r8, r9
 800731c:	f000 fe3b 	bl	8007f96 <finite>
 8007320:	b390      	cbz	r0, 8007388 <pow+0x110>
 8007322:	ec47 6b10 	vmov	d0, r6, r7
 8007326:	f000 fe36 	bl	8007f96 <finite>
 800732a:	b368      	cbz	r0, 8007388 <pow+0x110>
 800732c:	4622      	mov	r2, r4
 800732e:	462b      	mov	r3, r5
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f9 fbbe 	bl	8000ab4 <__aeabi_dcmpun>
 8007338:	b160      	cbz	r0, 8007354 <pow+0xdc>
 800733a:	f7ff ff6b 	bl	8007214 <__errno>
 800733e:	2321      	movs	r3, #33	; 0x21
 8007340:	6003      	str	r3, [r0, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	2300      	movs	r3, #0
 8007346:	4610      	mov	r0, r2
 8007348:	4619      	mov	r1, r3
 800734a:	f7f9 fa43 	bl	80007d4 <__aeabi_ddiv>
 800734e:	4604      	mov	r4, r0
 8007350:	460d      	mov	r5, r1
 8007352:	e7b6      	b.n	80072c2 <pow+0x4a>
 8007354:	f7ff ff5e 	bl	8007214 <__errno>
 8007358:	2322      	movs	r3, #34	; 0x22
 800735a:	6003      	str	r3, [r0, #0]
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	4640      	mov	r0, r8
 8007362:	4649      	mov	r1, r9
 8007364:	f7f9 fb7e 	bl	8000a64 <__aeabi_dcmplt>
 8007368:	2400      	movs	r4, #0
 800736a:	b158      	cbz	r0, 8007384 <pow+0x10c>
 800736c:	ec47 6b10 	vmov	d0, r6, r7
 8007370:	f000 fe26 	bl	8007fc0 <rint>
 8007374:	4632      	mov	r2, r6
 8007376:	ec51 0b10 	vmov	r0, r1, d0
 800737a:	463b      	mov	r3, r7
 800737c:	f7f9 fb68 	bl	8000a50 <__aeabi_dcmpeq>
 8007380:	2800      	cmp	r0, #0
 8007382:	d0c2      	beq.n	800730a <pow+0x92>
 8007384:	4d11      	ldr	r5, [pc, #68]	; (80073cc <pow+0x154>)
 8007386:	e79c      	b.n	80072c2 <pow+0x4a>
 8007388:	2200      	movs	r2, #0
 800738a:	2300      	movs	r3, #0
 800738c:	4620      	mov	r0, r4
 800738e:	4629      	mov	r1, r5
 8007390:	f7f9 fb5e 	bl	8000a50 <__aeabi_dcmpeq>
 8007394:	2800      	cmp	r0, #0
 8007396:	d094      	beq.n	80072c2 <pow+0x4a>
 8007398:	ec49 8b10 	vmov	d0, r8, r9
 800739c:	f000 fdfb 	bl	8007f96 <finite>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d08e      	beq.n	80072c2 <pow+0x4a>
 80073a4:	ec47 6b10 	vmov	d0, r6, r7
 80073a8:	f000 fdf5 	bl	8007f96 <finite>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d088      	beq.n	80072c2 <pow+0x4a>
 80073b0:	f7ff ff30 	bl	8007214 <__errno>
 80073b4:	2322      	movs	r3, #34	; 0x22
 80073b6:	6003      	str	r3, [r0, #0]
 80073b8:	2400      	movs	r4, #0
 80073ba:	2500      	movs	r5, #0
 80073bc:	e781      	b.n	80072c2 <pow+0x4a>
 80073be:	4d04      	ldr	r5, [pc, #16]	; (80073d0 <pow+0x158>)
 80073c0:	2400      	movs	r4, #0
 80073c2:	e77e      	b.n	80072c2 <pow+0x4a>
 80073c4:	20000090 	.word	0x20000090
 80073c8:	fff00000 	.word	0xfff00000
 80073cc:	7ff00000 	.word	0x7ff00000
 80073d0:	3ff00000 	.word	0x3ff00000
 80073d4:	00000000 	.word	0x00000000

080073d8 <__ieee754_pow>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	ed2d 8b06 	vpush	{d8-d10}
 80073e0:	b08d      	sub	sp, #52	; 0x34
 80073e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80073e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80073ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80073ee:	ea56 0100 	orrs.w	r1, r6, r0
 80073f2:	ec53 2b10 	vmov	r2, r3, d0
 80073f6:	f000 84d1 	beq.w	8007d9c <__ieee754_pow+0x9c4>
 80073fa:	497f      	ldr	r1, [pc, #508]	; (80075f8 <__ieee754_pow+0x220>)
 80073fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007400:	428c      	cmp	r4, r1
 8007402:	ee10 8a10 	vmov	r8, s0
 8007406:	4699      	mov	r9, r3
 8007408:	dc09      	bgt.n	800741e <__ieee754_pow+0x46>
 800740a:	d103      	bne.n	8007414 <__ieee754_pow+0x3c>
 800740c:	b97a      	cbnz	r2, 800742e <__ieee754_pow+0x56>
 800740e:	42a6      	cmp	r6, r4
 8007410:	dd02      	ble.n	8007418 <__ieee754_pow+0x40>
 8007412:	e00c      	b.n	800742e <__ieee754_pow+0x56>
 8007414:	428e      	cmp	r6, r1
 8007416:	dc02      	bgt.n	800741e <__ieee754_pow+0x46>
 8007418:	428e      	cmp	r6, r1
 800741a:	d110      	bne.n	800743e <__ieee754_pow+0x66>
 800741c:	b178      	cbz	r0, 800743e <__ieee754_pow+0x66>
 800741e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007422:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007426:	ea54 0308 	orrs.w	r3, r4, r8
 800742a:	f000 84b7 	beq.w	8007d9c <__ieee754_pow+0x9c4>
 800742e:	4873      	ldr	r0, [pc, #460]	; (80075fc <__ieee754_pow+0x224>)
 8007430:	b00d      	add	sp, #52	; 0x34
 8007432:	ecbd 8b06 	vpop	{d8-d10}
 8007436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743a:	f000 bdb9 	b.w	8007fb0 <nan>
 800743e:	f1b9 0f00 	cmp.w	r9, #0
 8007442:	da36      	bge.n	80074b2 <__ieee754_pow+0xda>
 8007444:	496e      	ldr	r1, [pc, #440]	; (8007600 <__ieee754_pow+0x228>)
 8007446:	428e      	cmp	r6, r1
 8007448:	dc51      	bgt.n	80074ee <__ieee754_pow+0x116>
 800744a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800744e:	428e      	cmp	r6, r1
 8007450:	f340 84af 	ble.w	8007db2 <__ieee754_pow+0x9da>
 8007454:	1531      	asrs	r1, r6, #20
 8007456:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800745a:	2914      	cmp	r1, #20
 800745c:	dd0f      	ble.n	800747e <__ieee754_pow+0xa6>
 800745e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007462:	fa20 fc01 	lsr.w	ip, r0, r1
 8007466:	fa0c f101 	lsl.w	r1, ip, r1
 800746a:	4281      	cmp	r1, r0
 800746c:	f040 84a1 	bne.w	8007db2 <__ieee754_pow+0x9da>
 8007470:	f00c 0c01 	and.w	ip, ip, #1
 8007474:	f1cc 0102 	rsb	r1, ip, #2
 8007478:	9100      	str	r1, [sp, #0]
 800747a:	b180      	cbz	r0, 800749e <__ieee754_pow+0xc6>
 800747c:	e059      	b.n	8007532 <__ieee754_pow+0x15a>
 800747e:	2800      	cmp	r0, #0
 8007480:	d155      	bne.n	800752e <__ieee754_pow+0x156>
 8007482:	f1c1 0114 	rsb	r1, r1, #20
 8007486:	fa46 fc01 	asr.w	ip, r6, r1
 800748a:	fa0c f101 	lsl.w	r1, ip, r1
 800748e:	42b1      	cmp	r1, r6
 8007490:	f040 848c 	bne.w	8007dac <__ieee754_pow+0x9d4>
 8007494:	f00c 0c01 	and.w	ip, ip, #1
 8007498:	f1cc 0102 	rsb	r1, ip, #2
 800749c:	9100      	str	r1, [sp, #0]
 800749e:	4959      	ldr	r1, [pc, #356]	; (8007604 <__ieee754_pow+0x22c>)
 80074a0:	428e      	cmp	r6, r1
 80074a2:	d12d      	bne.n	8007500 <__ieee754_pow+0x128>
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	da79      	bge.n	800759c <__ieee754_pow+0x1c4>
 80074a8:	4956      	ldr	r1, [pc, #344]	; (8007604 <__ieee754_pow+0x22c>)
 80074aa:	2000      	movs	r0, #0
 80074ac:	f7f9 f992 	bl	80007d4 <__aeabi_ddiv>
 80074b0:	e016      	b.n	80074e0 <__ieee754_pow+0x108>
 80074b2:	2100      	movs	r1, #0
 80074b4:	9100      	str	r1, [sp, #0]
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d13b      	bne.n	8007532 <__ieee754_pow+0x15a>
 80074ba:	494f      	ldr	r1, [pc, #316]	; (80075f8 <__ieee754_pow+0x220>)
 80074bc:	428e      	cmp	r6, r1
 80074be:	d1ee      	bne.n	800749e <__ieee754_pow+0xc6>
 80074c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80074c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80074c8:	ea53 0308 	orrs.w	r3, r3, r8
 80074cc:	f000 8466 	beq.w	8007d9c <__ieee754_pow+0x9c4>
 80074d0:	4b4d      	ldr	r3, [pc, #308]	; (8007608 <__ieee754_pow+0x230>)
 80074d2:	429c      	cmp	r4, r3
 80074d4:	dd0d      	ble.n	80074f2 <__ieee754_pow+0x11a>
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	f280 8464 	bge.w	8007da4 <__ieee754_pow+0x9cc>
 80074dc:	2000      	movs	r0, #0
 80074de:	2100      	movs	r1, #0
 80074e0:	ec41 0b10 	vmov	d0, r0, r1
 80074e4:	b00d      	add	sp, #52	; 0x34
 80074e6:	ecbd 8b06 	vpop	{d8-d10}
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	2102      	movs	r1, #2
 80074f0:	e7e0      	b.n	80074b4 <__ieee754_pow+0xdc>
 80074f2:	2f00      	cmp	r7, #0
 80074f4:	daf2      	bge.n	80074dc <__ieee754_pow+0x104>
 80074f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80074fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80074fe:	e7ef      	b.n	80074e0 <__ieee754_pow+0x108>
 8007500:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007504:	d104      	bne.n	8007510 <__ieee754_pow+0x138>
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	f7f9 f839 	bl	8000580 <__aeabi_dmul>
 800750e:	e7e7      	b.n	80074e0 <__ieee754_pow+0x108>
 8007510:	493e      	ldr	r1, [pc, #248]	; (800760c <__ieee754_pow+0x234>)
 8007512:	428f      	cmp	r7, r1
 8007514:	d10d      	bne.n	8007532 <__ieee754_pow+0x15a>
 8007516:	f1b9 0f00 	cmp.w	r9, #0
 800751a:	db0a      	blt.n	8007532 <__ieee754_pow+0x15a>
 800751c:	ec43 2b10 	vmov	d0, r2, r3
 8007520:	b00d      	add	sp, #52	; 0x34
 8007522:	ecbd 8b06 	vpop	{d8-d10}
 8007526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752a:	f000 bc77 	b.w	8007e1c <__ieee754_sqrt>
 800752e:	2100      	movs	r1, #0
 8007530:	9100      	str	r1, [sp, #0]
 8007532:	ec43 2b10 	vmov	d0, r2, r3
 8007536:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800753a:	f000 fd23 	bl	8007f84 <fabs>
 800753e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007542:	ec51 0b10 	vmov	r0, r1, d0
 8007546:	f1b8 0f00 	cmp.w	r8, #0
 800754a:	d12a      	bne.n	80075a2 <__ieee754_pow+0x1ca>
 800754c:	b12c      	cbz	r4, 800755a <__ieee754_pow+0x182>
 800754e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007604 <__ieee754_pow+0x22c>
 8007552:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007556:	45e6      	cmp	lr, ip
 8007558:	d123      	bne.n	80075a2 <__ieee754_pow+0x1ca>
 800755a:	2f00      	cmp	r7, #0
 800755c:	da05      	bge.n	800756a <__ieee754_pow+0x192>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	2000      	movs	r0, #0
 8007564:	4927      	ldr	r1, [pc, #156]	; (8007604 <__ieee754_pow+0x22c>)
 8007566:	f7f9 f935 	bl	80007d4 <__aeabi_ddiv>
 800756a:	f1b9 0f00 	cmp.w	r9, #0
 800756e:	dab7      	bge.n	80074e0 <__ieee754_pow+0x108>
 8007570:	9b00      	ldr	r3, [sp, #0]
 8007572:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007576:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800757a:	4323      	orrs	r3, r4
 800757c:	d108      	bne.n	8007590 <__ieee754_pow+0x1b8>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	f7f8 fe43 	bl	8000210 <__aeabi_dsub>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	e78d      	b.n	80074ac <__ieee754_pow+0xd4>
 8007590:	9b00      	ldr	r3, [sp, #0]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d1a4      	bne.n	80074e0 <__ieee754_pow+0x108>
 8007596:	4602      	mov	r2, r0
 8007598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800759c:	4610      	mov	r0, r2
 800759e:	4619      	mov	r1, r3
 80075a0:	e79e      	b.n	80074e0 <__ieee754_pow+0x108>
 80075a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80075a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80075aa:	950a      	str	r5, [sp, #40]	; 0x28
 80075ac:	9d00      	ldr	r5, [sp, #0]
 80075ae:	46ac      	mov	ip, r5
 80075b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80075b2:	ea5c 0505 	orrs.w	r5, ip, r5
 80075b6:	d0e4      	beq.n	8007582 <__ieee754_pow+0x1aa>
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <__ieee754_pow+0x238>)
 80075ba:	429e      	cmp	r6, r3
 80075bc:	f340 80fc 	ble.w	80077b8 <__ieee754_pow+0x3e0>
 80075c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80075c4:	429e      	cmp	r6, r3
 80075c6:	4b10      	ldr	r3, [pc, #64]	; (8007608 <__ieee754_pow+0x230>)
 80075c8:	dd07      	ble.n	80075da <__ieee754_pow+0x202>
 80075ca:	429c      	cmp	r4, r3
 80075cc:	dc0a      	bgt.n	80075e4 <__ieee754_pow+0x20c>
 80075ce:	2f00      	cmp	r7, #0
 80075d0:	da84      	bge.n	80074dc <__ieee754_pow+0x104>
 80075d2:	a307      	add	r3, pc, #28	; (adr r3, 80075f0 <__ieee754_pow+0x218>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	e795      	b.n	8007506 <__ieee754_pow+0x12e>
 80075da:	429c      	cmp	r4, r3
 80075dc:	dbf7      	blt.n	80075ce <__ieee754_pow+0x1f6>
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <__ieee754_pow+0x22c>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	dd17      	ble.n	8007614 <__ieee754_pow+0x23c>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	dcf4      	bgt.n	80075d2 <__ieee754_pow+0x1fa>
 80075e8:	e778      	b.n	80074dc <__ieee754_pow+0x104>
 80075ea:	bf00      	nop
 80075ec:	f3af 8000 	nop.w
 80075f0:	8800759c 	.word	0x8800759c
 80075f4:	7e37e43c 	.word	0x7e37e43c
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	0800822c 	.word	0x0800822c
 8007600:	433fffff 	.word	0x433fffff
 8007604:	3ff00000 	.word	0x3ff00000
 8007608:	3fefffff 	.word	0x3fefffff
 800760c:	3fe00000 	.word	0x3fe00000
 8007610:	41e00000 	.word	0x41e00000
 8007614:	4b64      	ldr	r3, [pc, #400]	; (80077a8 <__ieee754_pow+0x3d0>)
 8007616:	2200      	movs	r2, #0
 8007618:	f7f8 fdfa 	bl	8000210 <__aeabi_dsub>
 800761c:	a356      	add	r3, pc, #344	; (adr r3, 8007778 <__ieee754_pow+0x3a0>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	4604      	mov	r4, r0
 8007624:	460d      	mov	r5, r1
 8007626:	f7f8 ffab 	bl	8000580 <__aeabi_dmul>
 800762a:	a355      	add	r3, pc, #340	; (adr r3, 8007780 <__ieee754_pow+0x3a8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	4606      	mov	r6, r0
 8007632:	460f      	mov	r7, r1
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	f7f8 ffa2 	bl	8000580 <__aeabi_dmul>
 800763c:	4b5b      	ldr	r3, [pc, #364]	; (80077ac <__ieee754_pow+0x3d4>)
 800763e:	4682      	mov	sl, r0
 8007640:	468b      	mov	fp, r1
 8007642:	2200      	movs	r2, #0
 8007644:	4620      	mov	r0, r4
 8007646:	4629      	mov	r1, r5
 8007648:	f7f8 ff9a 	bl	8000580 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	a14d      	add	r1, pc, #308	; (adr r1, 8007788 <__ieee754_pow+0x3b0>)
 8007652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007656:	f7f8 fddb 	bl	8000210 <__aeabi_dsub>
 800765a:	4622      	mov	r2, r4
 800765c:	462b      	mov	r3, r5
 800765e:	f7f8 ff8f 	bl	8000580 <__aeabi_dmul>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	2000      	movs	r0, #0
 8007668:	4951      	ldr	r1, [pc, #324]	; (80077b0 <__ieee754_pow+0x3d8>)
 800766a:	f7f8 fdd1 	bl	8000210 <__aeabi_dsub>
 800766e:	4622      	mov	r2, r4
 8007670:	4680      	mov	r8, r0
 8007672:	4689      	mov	r9, r1
 8007674:	462b      	mov	r3, r5
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f8 ff81 	bl	8000580 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4640      	mov	r0, r8
 8007684:	4649      	mov	r1, r9
 8007686:	f7f8 ff7b 	bl	8000580 <__aeabi_dmul>
 800768a:	a341      	add	r3, pc, #260	; (adr r3, 8007790 <__ieee754_pow+0x3b8>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f7f8 ff76 	bl	8000580 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4650      	mov	r0, sl
 800769a:	4659      	mov	r1, fp
 800769c:	f7f8 fdb8 	bl	8000210 <__aeabi_dsub>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4680      	mov	r8, r0
 80076a6:	4689      	mov	r9, r1
 80076a8:	4630      	mov	r0, r6
 80076aa:	4639      	mov	r1, r7
 80076ac:	f7f8 fdb2 	bl	8000214 <__adddf3>
 80076b0:	2400      	movs	r4, #0
 80076b2:	4632      	mov	r2, r6
 80076b4:	463b      	mov	r3, r7
 80076b6:	4620      	mov	r0, r4
 80076b8:	460d      	mov	r5, r1
 80076ba:	f7f8 fda9 	bl	8000210 <__aeabi_dsub>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4640      	mov	r0, r8
 80076c4:	4649      	mov	r1, r9
 80076c6:	f7f8 fda3 	bl	8000210 <__aeabi_dsub>
 80076ca:	9b00      	ldr	r3, [sp, #0]
 80076cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ce:	3b01      	subs	r3, #1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	4682      	mov	sl, r0
 80076d4:	468b      	mov	fp, r1
 80076d6:	f040 81f1 	bne.w	8007abc <__ieee754_pow+0x6e4>
 80076da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007798 <__ieee754_pow+0x3c0>
 80076de:	eeb0 8a47 	vmov.f32	s16, s14
 80076e2:	eef0 8a67 	vmov.f32	s17, s15
 80076e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076ea:	2600      	movs	r6, #0
 80076ec:	4632      	mov	r2, r6
 80076ee:	463b      	mov	r3, r7
 80076f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f4:	f7f8 fd8c 	bl	8000210 <__aeabi_dsub>
 80076f8:	4622      	mov	r2, r4
 80076fa:	462b      	mov	r3, r5
 80076fc:	f7f8 ff40 	bl	8000580 <__aeabi_dmul>
 8007700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007704:	4680      	mov	r8, r0
 8007706:	4689      	mov	r9, r1
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	f7f8 ff38 	bl	8000580 <__aeabi_dmul>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4640      	mov	r0, r8
 8007716:	4649      	mov	r1, r9
 8007718:	f7f8 fd7c 	bl	8000214 <__adddf3>
 800771c:	4632      	mov	r2, r6
 800771e:	463b      	mov	r3, r7
 8007720:	4680      	mov	r8, r0
 8007722:	4689      	mov	r9, r1
 8007724:	4620      	mov	r0, r4
 8007726:	4629      	mov	r1, r5
 8007728:	f7f8 ff2a 	bl	8000580 <__aeabi_dmul>
 800772c:	460b      	mov	r3, r1
 800772e:	4604      	mov	r4, r0
 8007730:	460d      	mov	r5, r1
 8007732:	4602      	mov	r2, r0
 8007734:	4649      	mov	r1, r9
 8007736:	4640      	mov	r0, r8
 8007738:	f7f8 fd6c 	bl	8000214 <__adddf3>
 800773c:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <__ieee754_pow+0x3dc>)
 800773e:	4299      	cmp	r1, r3
 8007740:	ec45 4b19 	vmov	d9, r4, r5
 8007744:	4606      	mov	r6, r0
 8007746:	460f      	mov	r7, r1
 8007748:	468b      	mov	fp, r1
 800774a:	f340 82fe 	ble.w	8007d4a <__ieee754_pow+0x972>
 800774e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007752:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007756:	4303      	orrs	r3, r0
 8007758:	f000 81f0 	beq.w	8007b3c <__ieee754_pow+0x764>
 800775c:	a310      	add	r3, pc, #64	; (adr r3, 80077a0 <__ieee754_pow+0x3c8>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	ec51 0b18 	vmov	r0, r1, d8
 8007766:	f7f8 ff0b 	bl	8000580 <__aeabi_dmul>
 800776a:	a30d      	add	r3, pc, #52	; (adr r3, 80077a0 <__ieee754_pow+0x3c8>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	e6cb      	b.n	800750a <__ieee754_pow+0x132>
 8007772:	bf00      	nop
 8007774:	f3af 8000 	nop.w
 8007778:	60000000 	.word	0x60000000
 800777c:	3ff71547 	.word	0x3ff71547
 8007780:	f85ddf44 	.word	0xf85ddf44
 8007784:	3e54ae0b 	.word	0x3e54ae0b
 8007788:	55555555 	.word	0x55555555
 800778c:	3fd55555 	.word	0x3fd55555
 8007790:	652b82fe 	.word	0x652b82fe
 8007794:	3ff71547 	.word	0x3ff71547
 8007798:	00000000 	.word	0x00000000
 800779c:	bff00000 	.word	0xbff00000
 80077a0:	8800759c 	.word	0x8800759c
 80077a4:	7e37e43c 	.word	0x7e37e43c
 80077a8:	3ff00000 	.word	0x3ff00000
 80077ac:	3fd00000 	.word	0x3fd00000
 80077b0:	3fe00000 	.word	0x3fe00000
 80077b4:	408fffff 	.word	0x408fffff
 80077b8:	4bd7      	ldr	r3, [pc, #860]	; (8007b18 <__ieee754_pow+0x740>)
 80077ba:	ea03 0309 	and.w	r3, r3, r9
 80077be:	2200      	movs	r2, #0
 80077c0:	b92b      	cbnz	r3, 80077ce <__ieee754_pow+0x3f6>
 80077c2:	4bd6      	ldr	r3, [pc, #856]	; (8007b1c <__ieee754_pow+0x744>)
 80077c4:	f7f8 fedc 	bl	8000580 <__aeabi_dmul>
 80077c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80077cc:	460c      	mov	r4, r1
 80077ce:	1523      	asrs	r3, r4, #20
 80077d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80077d4:	4413      	add	r3, r2
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	4bd1      	ldr	r3, [pc, #836]	; (8007b20 <__ieee754_pow+0x748>)
 80077da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80077de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80077e2:	429c      	cmp	r4, r3
 80077e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80077e8:	dd08      	ble.n	80077fc <__ieee754_pow+0x424>
 80077ea:	4bce      	ldr	r3, [pc, #824]	; (8007b24 <__ieee754_pow+0x74c>)
 80077ec:	429c      	cmp	r4, r3
 80077ee:	f340 8163 	ble.w	8007ab8 <__ieee754_pow+0x6e0>
 80077f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f4:	3301      	adds	r3, #1
 80077f6:	9309      	str	r3, [sp, #36]	; 0x24
 80077f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80077fc:	2400      	movs	r4, #0
 80077fe:	00e3      	lsls	r3, r4, #3
 8007800:	930b      	str	r3, [sp, #44]	; 0x2c
 8007802:	4bc9      	ldr	r3, [pc, #804]	; (8007b28 <__ieee754_pow+0x750>)
 8007804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007808:	ed93 7b00 	vldr	d7, [r3]
 800780c:	4629      	mov	r1, r5
 800780e:	ec53 2b17 	vmov	r2, r3, d7
 8007812:	eeb0 8a47 	vmov.f32	s16, s14
 8007816:	eef0 8a67 	vmov.f32	s17, s15
 800781a:	4682      	mov	sl, r0
 800781c:	f7f8 fcf8 	bl	8000210 <__aeabi_dsub>
 8007820:	4652      	mov	r2, sl
 8007822:	4606      	mov	r6, r0
 8007824:	460f      	mov	r7, r1
 8007826:	462b      	mov	r3, r5
 8007828:	ec51 0b18 	vmov	r0, r1, d8
 800782c:	f7f8 fcf2 	bl	8000214 <__adddf3>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	2000      	movs	r0, #0
 8007836:	49bd      	ldr	r1, [pc, #756]	; (8007b2c <__ieee754_pow+0x754>)
 8007838:	f7f8 ffcc 	bl	80007d4 <__aeabi_ddiv>
 800783c:	ec41 0b19 	vmov	d9, r0, r1
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7f8 fe9a 	bl	8000580 <__aeabi_dmul>
 800784c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007854:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007858:	2300      	movs	r3, #0
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007860:	46ab      	mov	fp, r5
 8007862:	106d      	asrs	r5, r5, #1
 8007864:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007868:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800786c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007870:	2200      	movs	r2, #0
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	4614      	mov	r4, r2
 8007878:	461d      	mov	r5, r3
 800787a:	f7f8 fe81 	bl	8000580 <__aeabi_dmul>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f8 fcc3 	bl	8000210 <__aeabi_dsub>
 800788a:	ec53 2b18 	vmov	r2, r3, d8
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f8 fcbb 	bl	8000210 <__aeabi_dsub>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4650      	mov	r0, sl
 80078a0:	4659      	mov	r1, fp
 80078a2:	f7f8 fcb5 	bl	8000210 <__aeabi_dsub>
 80078a6:	4642      	mov	r2, r8
 80078a8:	464b      	mov	r3, r9
 80078aa:	f7f8 fe69 	bl	8000580 <__aeabi_dmul>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	f7f8 fcab 	bl	8000210 <__aeabi_dsub>
 80078ba:	ec53 2b19 	vmov	r2, r3, d9
 80078be:	f7f8 fe5f 	bl	8000580 <__aeabi_dmul>
 80078c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078c6:	ec41 0b18 	vmov	d8, r0, r1
 80078ca:	4610      	mov	r0, r2
 80078cc:	4619      	mov	r1, r3
 80078ce:	f7f8 fe57 	bl	8000580 <__aeabi_dmul>
 80078d2:	a37d      	add	r3, pc, #500	; (adr r3, 8007ac8 <__ieee754_pow+0x6f0>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	4604      	mov	r4, r0
 80078da:	460d      	mov	r5, r1
 80078dc:	f7f8 fe50 	bl	8000580 <__aeabi_dmul>
 80078e0:	a37b      	add	r3, pc, #492	; (adr r3, 8007ad0 <__ieee754_pow+0x6f8>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fc95 	bl	8000214 <__adddf3>
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	f7f8 fe47 	bl	8000580 <__aeabi_dmul>
 80078f2:	a379      	add	r3, pc, #484	; (adr r3, 8007ad8 <__ieee754_pow+0x700>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f7f8 fc8c 	bl	8000214 <__adddf3>
 80078fc:	4622      	mov	r2, r4
 80078fe:	462b      	mov	r3, r5
 8007900:	f7f8 fe3e 	bl	8000580 <__aeabi_dmul>
 8007904:	a376      	add	r3, pc, #472	; (adr r3, 8007ae0 <__ieee754_pow+0x708>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f7f8 fc83 	bl	8000214 <__adddf3>
 800790e:	4622      	mov	r2, r4
 8007910:	462b      	mov	r3, r5
 8007912:	f7f8 fe35 	bl	8000580 <__aeabi_dmul>
 8007916:	a374      	add	r3, pc, #464	; (adr r3, 8007ae8 <__ieee754_pow+0x710>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f7f8 fc7a 	bl	8000214 <__adddf3>
 8007920:	4622      	mov	r2, r4
 8007922:	462b      	mov	r3, r5
 8007924:	f7f8 fe2c 	bl	8000580 <__aeabi_dmul>
 8007928:	a371      	add	r3, pc, #452	; (adr r3, 8007af0 <__ieee754_pow+0x718>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f7f8 fc71 	bl	8000214 <__adddf3>
 8007932:	4622      	mov	r2, r4
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	462b      	mov	r3, r5
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f7f8 fe1f 	bl	8000580 <__aeabi_dmul>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f8 fe19 	bl	8000580 <__aeabi_dmul>
 800794e:	4642      	mov	r2, r8
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	464b      	mov	r3, r9
 8007956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800795a:	f7f8 fc5b 	bl	8000214 <__adddf3>
 800795e:	ec53 2b18 	vmov	r2, r3, d8
 8007962:	f7f8 fe0d 	bl	8000580 <__aeabi_dmul>
 8007966:	4622      	mov	r2, r4
 8007968:	462b      	mov	r3, r5
 800796a:	f7f8 fc53 	bl	8000214 <__adddf3>
 800796e:	4642      	mov	r2, r8
 8007970:	4682      	mov	sl, r0
 8007972:	468b      	mov	fp, r1
 8007974:	464b      	mov	r3, r9
 8007976:	4640      	mov	r0, r8
 8007978:	4649      	mov	r1, r9
 800797a:	f7f8 fe01 	bl	8000580 <__aeabi_dmul>
 800797e:	4b6c      	ldr	r3, [pc, #432]	; (8007b30 <__ieee754_pow+0x758>)
 8007980:	2200      	movs	r2, #0
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	f7f8 fc45 	bl	8000214 <__adddf3>
 800798a:	4652      	mov	r2, sl
 800798c:	465b      	mov	r3, fp
 800798e:	f7f8 fc41 	bl	8000214 <__adddf3>
 8007992:	9c04      	ldr	r4, [sp, #16]
 8007994:	460d      	mov	r5, r1
 8007996:	4622      	mov	r2, r4
 8007998:	460b      	mov	r3, r1
 800799a:	4640      	mov	r0, r8
 800799c:	4649      	mov	r1, r9
 800799e:	f7f8 fdef 	bl	8000580 <__aeabi_dmul>
 80079a2:	4b63      	ldr	r3, [pc, #396]	; (8007b30 <__ieee754_pow+0x758>)
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	2200      	movs	r2, #0
 80079aa:	4620      	mov	r0, r4
 80079ac:	4629      	mov	r1, r5
 80079ae:	f7f8 fc2f 	bl	8000210 <__aeabi_dsub>
 80079b2:	4632      	mov	r2, r6
 80079b4:	463b      	mov	r3, r7
 80079b6:	f7f8 fc2b 	bl	8000210 <__aeabi_dsub>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4650      	mov	r0, sl
 80079c0:	4659      	mov	r1, fp
 80079c2:	f7f8 fc25 	bl	8000210 <__aeabi_dsub>
 80079c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079ca:	f7f8 fdd9 	bl	8000580 <__aeabi_dmul>
 80079ce:	4622      	mov	r2, r4
 80079d0:	4606      	mov	r6, r0
 80079d2:	460f      	mov	r7, r1
 80079d4:	462b      	mov	r3, r5
 80079d6:	ec51 0b18 	vmov	r0, r1, d8
 80079da:	f7f8 fdd1 	bl	8000580 <__aeabi_dmul>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f8 fc15 	bl	8000214 <__adddf3>
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	f7f8 fc0d 	bl	8000214 <__adddf3>
 80079fa:	9c04      	ldr	r4, [sp, #16]
 80079fc:	a33e      	add	r3, pc, #248	; (adr r3, 8007af8 <__ieee754_pow+0x720>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	4620      	mov	r0, r4
 8007a04:	460d      	mov	r5, r1
 8007a06:	f7f8 fdbb 	bl	8000580 <__aeabi_dmul>
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	ec41 0b18 	vmov	d8, r0, r1
 8007a10:	464b      	mov	r3, r9
 8007a12:	4620      	mov	r0, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7f8 fbfb 	bl	8000210 <__aeabi_dsub>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	f7f8 fbf5 	bl	8000210 <__aeabi_dsub>
 8007a26:	a336      	add	r3, pc, #216	; (adr r3, 8007b00 <__ieee754_pow+0x728>)
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f7f8 fda8 	bl	8000580 <__aeabi_dmul>
 8007a30:	a335      	add	r3, pc, #212	; (adr r3, 8007b08 <__ieee754_pow+0x730>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	4606      	mov	r6, r0
 8007a38:	460f      	mov	r7, r1
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7f8 fd9f 	bl	8000580 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	f7f8 fbe3 	bl	8000214 <__adddf3>
 8007a4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a50:	4b38      	ldr	r3, [pc, #224]	; (8007b34 <__ieee754_pow+0x75c>)
 8007a52:	4413      	add	r3, r2
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fbdc 	bl	8000214 <__adddf3>
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a60:	468b      	mov	fp, r1
 8007a62:	f7f8 fd23 	bl	80004ac <__aeabi_i2d>
 8007a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a68:	4b33      	ldr	r3, [pc, #204]	; (8007b38 <__ieee754_pow+0x760>)
 8007a6a:	4413      	add	r3, r2
 8007a6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a70:	4606      	mov	r6, r0
 8007a72:	460f      	mov	r7, r1
 8007a74:	4652      	mov	r2, sl
 8007a76:	465b      	mov	r3, fp
 8007a78:	ec51 0b18 	vmov	r0, r1, d8
 8007a7c:	f7f8 fbca 	bl	8000214 <__adddf3>
 8007a80:	4642      	mov	r2, r8
 8007a82:	464b      	mov	r3, r9
 8007a84:	f7f8 fbc6 	bl	8000214 <__adddf3>
 8007a88:	4632      	mov	r2, r6
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	f7f8 fbc2 	bl	8000214 <__adddf3>
 8007a90:	9c04      	ldr	r4, [sp, #16]
 8007a92:	4632      	mov	r2, r6
 8007a94:	463b      	mov	r3, r7
 8007a96:	4620      	mov	r0, r4
 8007a98:	460d      	mov	r5, r1
 8007a9a:	f7f8 fbb9 	bl	8000210 <__aeabi_dsub>
 8007a9e:	4642      	mov	r2, r8
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	f7f8 fbb5 	bl	8000210 <__aeabi_dsub>
 8007aa6:	ec53 2b18 	vmov	r2, r3, d8
 8007aaa:	f7f8 fbb1 	bl	8000210 <__aeabi_dsub>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	e606      	b.n	80076c6 <__ieee754_pow+0x2ee>
 8007ab8:	2401      	movs	r4, #1
 8007aba:	e6a0      	b.n	80077fe <__ieee754_pow+0x426>
 8007abc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007b10 <__ieee754_pow+0x738>
 8007ac0:	e60d      	b.n	80076de <__ieee754_pow+0x306>
 8007ac2:	bf00      	nop
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	4a454eef 	.word	0x4a454eef
 8007acc:	3fca7e28 	.word	0x3fca7e28
 8007ad0:	93c9db65 	.word	0x93c9db65
 8007ad4:	3fcd864a 	.word	0x3fcd864a
 8007ad8:	a91d4101 	.word	0xa91d4101
 8007adc:	3fd17460 	.word	0x3fd17460
 8007ae0:	518f264d 	.word	0x518f264d
 8007ae4:	3fd55555 	.word	0x3fd55555
 8007ae8:	db6fabff 	.word	0xdb6fabff
 8007aec:	3fdb6db6 	.word	0x3fdb6db6
 8007af0:	33333303 	.word	0x33333303
 8007af4:	3fe33333 	.word	0x3fe33333
 8007af8:	e0000000 	.word	0xe0000000
 8007afc:	3feec709 	.word	0x3feec709
 8007b00:	dc3a03fd 	.word	0xdc3a03fd
 8007b04:	3feec709 	.word	0x3feec709
 8007b08:	145b01f5 	.word	0x145b01f5
 8007b0c:	be3e2fe0 	.word	0xbe3e2fe0
 8007b10:	00000000 	.word	0x00000000
 8007b14:	3ff00000 	.word	0x3ff00000
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	43400000 	.word	0x43400000
 8007b20:	0003988e 	.word	0x0003988e
 8007b24:	000bb679 	.word	0x000bb679
 8007b28:	08008230 	.word	0x08008230
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	40080000 	.word	0x40080000
 8007b34:	08008250 	.word	0x08008250
 8007b38:	08008240 	.word	0x08008240
 8007b3c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007e14 <__ieee754_pow+0xa3c>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	f7f8 fb65 	bl	8000214 <__adddf3>
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	ec41 0b1a 	vmov	d10, r0, r1
 8007b50:	462b      	mov	r3, r5
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f7f8 fb5b 	bl	8000210 <__aeabi_dsub>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	ec51 0b1a 	vmov	r0, r1, d10
 8007b62:	f7f8 ff9d 	bl	8000aa0 <__aeabi_dcmpgt>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f47f adf8 	bne.w	800775c <__ieee754_pow+0x384>
 8007b6c:	4aa4      	ldr	r2, [pc, #656]	; (8007e00 <__ieee754_pow+0xa28>)
 8007b6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b72:	4293      	cmp	r3, r2
 8007b74:	f340 810b 	ble.w	8007d8e <__ieee754_pow+0x9b6>
 8007b78:	151b      	asrs	r3, r3, #20
 8007b7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007b7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007b82:	fa4a f303 	asr.w	r3, sl, r3
 8007b86:	445b      	add	r3, fp
 8007b88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007b8c:	4e9d      	ldr	r6, [pc, #628]	; (8007e04 <__ieee754_pow+0xa2c>)
 8007b8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007b92:	4116      	asrs	r6, r2
 8007b94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007b98:	2000      	movs	r0, #0
 8007b9a:	ea23 0106 	bic.w	r1, r3, r6
 8007b9e:	f1c2 0214 	rsb	r2, r2, #20
 8007ba2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ba6:	fa4a fa02 	asr.w	sl, sl, r2
 8007baa:	f1bb 0f00 	cmp.w	fp, #0
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	bfb8      	it	lt
 8007bb8:	f1ca 0a00 	rsblt	sl, sl, #0
 8007bbc:	f7f8 fb28 	bl	8000210 <__aeabi_dsub>
 8007bc0:	ec41 0b19 	vmov	d9, r0, r1
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	ec51 0b19 	vmov	r0, r1, d9
 8007bcc:	f7f8 fb22 	bl	8000214 <__adddf3>
 8007bd0:	2400      	movs	r4, #0
 8007bd2:	a379      	add	r3, pc, #484	; (adr r3, 8007db8 <__ieee754_pow+0x9e0>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	4620      	mov	r0, r4
 8007bda:	460d      	mov	r5, r1
 8007bdc:	f7f8 fcd0 	bl	8000580 <__aeabi_dmul>
 8007be0:	ec53 2b19 	vmov	r2, r3, d9
 8007be4:	4606      	mov	r6, r0
 8007be6:	460f      	mov	r7, r1
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fb10 	bl	8000210 <__aeabi_dsub>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7f8 fb0a 	bl	8000210 <__aeabi_dsub>
 8007bfc:	a370      	add	r3, pc, #448	; (adr r3, 8007dc0 <__ieee754_pow+0x9e8>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fcbd 	bl	8000580 <__aeabi_dmul>
 8007c06:	a370      	add	r3, pc, #448	; (adr r3, 8007dc8 <__ieee754_pow+0x9f0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4689      	mov	r9, r1
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 fcb4 	bl	8000580 <__aeabi_dmul>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	4649      	mov	r1, r9
 8007c20:	f7f8 faf8 	bl	8000214 <__adddf3>
 8007c24:	4604      	mov	r4, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	4639      	mov	r1, r7
 8007c30:	f7f8 faf0 	bl	8000214 <__adddf3>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4689      	mov	r9, r1
 8007c3c:	f7f8 fae8 	bl	8000210 <__aeabi_dsub>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4620      	mov	r0, r4
 8007c46:	4629      	mov	r1, r5
 8007c48:	f7f8 fae2 	bl	8000210 <__aeabi_dsub>
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	4606      	mov	r6, r0
 8007c50:	460f      	mov	r7, r1
 8007c52:	464b      	mov	r3, r9
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	f7f8 fc92 	bl	8000580 <__aeabi_dmul>
 8007c5c:	a35c      	add	r3, pc, #368	; (adr r3, 8007dd0 <__ieee754_pow+0x9f8>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	4604      	mov	r4, r0
 8007c64:	460d      	mov	r5, r1
 8007c66:	f7f8 fc8b 	bl	8000580 <__aeabi_dmul>
 8007c6a:	a35b      	add	r3, pc, #364	; (adr r3, 8007dd8 <__ieee754_pow+0xa00>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f7f8 face 	bl	8000210 <__aeabi_dsub>
 8007c74:	4622      	mov	r2, r4
 8007c76:	462b      	mov	r3, r5
 8007c78:	f7f8 fc82 	bl	8000580 <__aeabi_dmul>
 8007c7c:	a358      	add	r3, pc, #352	; (adr r3, 8007de0 <__ieee754_pow+0xa08>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fac7 	bl	8000214 <__adddf3>
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	f7f8 fc79 	bl	8000580 <__aeabi_dmul>
 8007c8e:	a356      	add	r3, pc, #344	; (adr r3, 8007de8 <__ieee754_pow+0xa10>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 fabc 	bl	8000210 <__aeabi_dsub>
 8007c98:	4622      	mov	r2, r4
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	f7f8 fc70 	bl	8000580 <__aeabi_dmul>
 8007ca0:	a353      	add	r3, pc, #332	; (adr r3, 8007df0 <__ieee754_pow+0xa18>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fab5 	bl	8000214 <__adddf3>
 8007caa:	4622      	mov	r2, r4
 8007cac:	462b      	mov	r3, r5
 8007cae:	f7f8 fc67 	bl	8000580 <__aeabi_dmul>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	4649      	mov	r1, r9
 8007cba:	f7f8 faa9 	bl	8000210 <__aeabi_dsub>
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	460d      	mov	r5, r1
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	4649      	mov	r1, r9
 8007cca:	f7f8 fc59 	bl	8000580 <__aeabi_dmul>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	ec41 0b19 	vmov	d9, r0, r1
 8007cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 fa98 	bl	8000210 <__aeabi_dsub>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	ec51 0b19 	vmov	r0, r1, d9
 8007ce8:	f7f8 fd74 	bl	80007d4 <__aeabi_ddiv>
 8007cec:	4632      	mov	r2, r6
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	f7f8 fc42 	bl	8000580 <__aeabi_dmul>
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	463b      	mov	r3, r7
 8007d00:	f7f8 fa88 	bl	8000214 <__adddf3>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4620      	mov	r0, r4
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	f7f8 fa80 	bl	8000210 <__aeabi_dsub>
 8007d10:	4642      	mov	r2, r8
 8007d12:	464b      	mov	r3, r9
 8007d14:	f7f8 fa7c 	bl	8000210 <__aeabi_dsub>
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	493a      	ldr	r1, [pc, #232]	; (8007e08 <__ieee754_pow+0xa30>)
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f7f8 fa76 	bl	8000210 <__aeabi_dsub>
 8007d24:	e9cd 0100 	strd	r0, r1, [sp]
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d32:	da2f      	bge.n	8007d94 <__ieee754_pow+0x9bc>
 8007d34:	4650      	mov	r0, sl
 8007d36:	ed9d 0b00 	vldr	d0, [sp]
 8007d3a:	f000 f9cd 	bl	80080d8 <scalbn>
 8007d3e:	ec51 0b10 	vmov	r0, r1, d0
 8007d42:	ec53 2b18 	vmov	r2, r3, d8
 8007d46:	f7ff bbe0 	b.w	800750a <__ieee754_pow+0x132>
 8007d4a:	4b30      	ldr	r3, [pc, #192]	; (8007e0c <__ieee754_pow+0xa34>)
 8007d4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007d50:	429e      	cmp	r6, r3
 8007d52:	f77f af0b 	ble.w	8007b6c <__ieee754_pow+0x794>
 8007d56:	4b2e      	ldr	r3, [pc, #184]	; (8007e10 <__ieee754_pow+0xa38>)
 8007d58:	440b      	add	r3, r1
 8007d5a:	4303      	orrs	r3, r0
 8007d5c:	d00b      	beq.n	8007d76 <__ieee754_pow+0x99e>
 8007d5e:	a326      	add	r3, pc, #152	; (adr r3, 8007df8 <__ieee754_pow+0xa20>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	ec51 0b18 	vmov	r0, r1, d8
 8007d68:	f7f8 fc0a 	bl	8000580 <__aeabi_dmul>
 8007d6c:	a322      	add	r3, pc, #136	; (adr r3, 8007df8 <__ieee754_pow+0xa20>)
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f7ff bbca 	b.w	800750a <__ieee754_pow+0x132>
 8007d76:	4622      	mov	r2, r4
 8007d78:	462b      	mov	r3, r5
 8007d7a:	f7f8 fa49 	bl	8000210 <__aeabi_dsub>
 8007d7e:	4642      	mov	r2, r8
 8007d80:	464b      	mov	r3, r9
 8007d82:	f7f8 fe83 	bl	8000a8c <__aeabi_dcmpge>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f aef0 	beq.w	8007b6c <__ieee754_pow+0x794>
 8007d8c:	e7e7      	b.n	8007d5e <__ieee754_pow+0x986>
 8007d8e:	f04f 0a00 	mov.w	sl, #0
 8007d92:	e717      	b.n	8007bc4 <__ieee754_pow+0x7ec>
 8007d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	e7d2      	b.n	8007d42 <__ieee754_pow+0x96a>
 8007d9c:	491a      	ldr	r1, [pc, #104]	; (8007e08 <__ieee754_pow+0xa30>)
 8007d9e:	2000      	movs	r0, #0
 8007da0:	f7ff bb9e 	b.w	80074e0 <__ieee754_pow+0x108>
 8007da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da8:	f7ff bb9a 	b.w	80074e0 <__ieee754_pow+0x108>
 8007dac:	9000      	str	r0, [sp, #0]
 8007dae:	f7ff bb76 	b.w	800749e <__ieee754_pow+0xc6>
 8007db2:	2100      	movs	r1, #0
 8007db4:	f7ff bb60 	b.w	8007478 <__ieee754_pow+0xa0>
 8007db8:	00000000 	.word	0x00000000
 8007dbc:	3fe62e43 	.word	0x3fe62e43
 8007dc0:	fefa39ef 	.word	0xfefa39ef
 8007dc4:	3fe62e42 	.word	0x3fe62e42
 8007dc8:	0ca86c39 	.word	0x0ca86c39
 8007dcc:	be205c61 	.word	0xbe205c61
 8007dd0:	72bea4d0 	.word	0x72bea4d0
 8007dd4:	3e663769 	.word	0x3e663769
 8007dd8:	c5d26bf1 	.word	0xc5d26bf1
 8007ddc:	3ebbbd41 	.word	0x3ebbbd41
 8007de0:	af25de2c 	.word	0xaf25de2c
 8007de4:	3f11566a 	.word	0x3f11566a
 8007de8:	16bebd93 	.word	0x16bebd93
 8007dec:	3f66c16c 	.word	0x3f66c16c
 8007df0:	5555553e 	.word	0x5555553e
 8007df4:	3fc55555 	.word	0x3fc55555
 8007df8:	c2f8f359 	.word	0xc2f8f359
 8007dfc:	01a56e1f 	.word	0x01a56e1f
 8007e00:	3fe00000 	.word	0x3fe00000
 8007e04:	000fffff 	.word	0x000fffff
 8007e08:	3ff00000 	.word	0x3ff00000
 8007e0c:	4090cbff 	.word	0x4090cbff
 8007e10:	3f6f3400 	.word	0x3f6f3400
 8007e14:	652b82fe 	.word	0x652b82fe
 8007e18:	3c971547 	.word	0x3c971547

08007e1c <__ieee754_sqrt>:
 8007e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e20:	ec55 4b10 	vmov	r4, r5, d0
 8007e24:	4e56      	ldr	r6, [pc, #344]	; (8007f80 <__ieee754_sqrt+0x164>)
 8007e26:	43ae      	bics	r6, r5
 8007e28:	ee10 0a10 	vmov	r0, s0
 8007e2c:	ee10 3a10 	vmov	r3, s0
 8007e30:	4629      	mov	r1, r5
 8007e32:	462a      	mov	r2, r5
 8007e34:	d110      	bne.n	8007e58 <__ieee754_sqrt+0x3c>
 8007e36:	ee10 2a10 	vmov	r2, s0
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	f7f8 fba0 	bl	8000580 <__aeabi_dmul>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4620      	mov	r0, r4
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7f8 f9e4 	bl	8000214 <__adddf3>
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	ec45 4b10 	vmov	d0, r4, r5
 8007e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	dc10      	bgt.n	8007e7e <__ieee754_sqrt+0x62>
 8007e5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e60:	4330      	orrs	r0, r6
 8007e62:	d0f5      	beq.n	8007e50 <__ieee754_sqrt+0x34>
 8007e64:	b15d      	cbz	r5, 8007e7e <__ieee754_sqrt+0x62>
 8007e66:	ee10 2a10 	vmov	r2, s0
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	ee10 0a10 	vmov	r0, s0
 8007e70:	f7f8 f9ce 	bl	8000210 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	f7f8 fcac 	bl	80007d4 <__aeabi_ddiv>
 8007e7c:	e7e6      	b.n	8007e4c <__ieee754_sqrt+0x30>
 8007e7e:	1509      	asrs	r1, r1, #20
 8007e80:	d076      	beq.n	8007f70 <__ieee754_sqrt+0x154>
 8007e82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007e86:	07ce      	lsls	r6, r1, #31
 8007e88:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007e8c:	bf5e      	ittt	pl
 8007e8e:	0fda      	lsrpl	r2, r3, #31
 8007e90:	005b      	lslpl	r3, r3, #1
 8007e92:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007e96:	0fda      	lsrs	r2, r3, #31
 8007e98:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007e9c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	106d      	asrs	r5, r5, #1
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	f04f 0e16 	mov.w	lr, #22
 8007eaa:	4684      	mov	ip, r0
 8007eac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eb0:	eb0c 0401 	add.w	r4, ip, r1
 8007eb4:	4294      	cmp	r4, r2
 8007eb6:	bfde      	ittt	le
 8007eb8:	1b12      	suble	r2, r2, r4
 8007eba:	eb04 0c01 	addle.w	ip, r4, r1
 8007ebe:	1840      	addle	r0, r0, r1
 8007ec0:	0052      	lsls	r2, r2, #1
 8007ec2:	f1be 0e01 	subs.w	lr, lr, #1
 8007ec6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007eca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007ece:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ed2:	d1ed      	bne.n	8007eb0 <__ieee754_sqrt+0x94>
 8007ed4:	4671      	mov	r1, lr
 8007ed6:	2720      	movs	r7, #32
 8007ed8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007edc:	4562      	cmp	r2, ip
 8007ede:	eb04 060e 	add.w	r6, r4, lr
 8007ee2:	dc02      	bgt.n	8007eea <__ieee754_sqrt+0xce>
 8007ee4:	d113      	bne.n	8007f0e <__ieee754_sqrt+0xf2>
 8007ee6:	429e      	cmp	r6, r3
 8007ee8:	d811      	bhi.n	8007f0e <__ieee754_sqrt+0xf2>
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	eb06 0e04 	add.w	lr, r6, r4
 8007ef0:	da43      	bge.n	8007f7a <__ieee754_sqrt+0x15e>
 8007ef2:	f1be 0f00 	cmp.w	lr, #0
 8007ef6:	db40      	blt.n	8007f7a <__ieee754_sqrt+0x15e>
 8007ef8:	f10c 0801 	add.w	r8, ip, #1
 8007efc:	eba2 020c 	sub.w	r2, r2, ip
 8007f00:	429e      	cmp	r6, r3
 8007f02:	bf88      	it	hi
 8007f04:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f08:	1b9b      	subs	r3, r3, r6
 8007f0a:	4421      	add	r1, r4
 8007f0c:	46c4      	mov	ip, r8
 8007f0e:	0052      	lsls	r2, r2, #1
 8007f10:	3f01      	subs	r7, #1
 8007f12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007f1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f1e:	d1dd      	bne.n	8007edc <__ieee754_sqrt+0xc0>
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d006      	beq.n	8007f32 <__ieee754_sqrt+0x116>
 8007f24:	1c4c      	adds	r4, r1, #1
 8007f26:	bf13      	iteet	ne
 8007f28:	3101      	addne	r1, #1
 8007f2a:	3001      	addeq	r0, #1
 8007f2c:	4639      	moveq	r1, r7
 8007f2e:	f021 0101 	bicne.w	r1, r1, #1
 8007f32:	1043      	asrs	r3, r0, #1
 8007f34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007f38:	0849      	lsrs	r1, r1, #1
 8007f3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007f3e:	07c2      	lsls	r2, r0, #31
 8007f40:	bf48      	it	mi
 8007f42:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007f46:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	463d      	mov	r5, r7
 8007f4e:	e77f      	b.n	8007e50 <__ieee754_sqrt+0x34>
 8007f50:	0ada      	lsrs	r2, r3, #11
 8007f52:	3815      	subs	r0, #21
 8007f54:	055b      	lsls	r3, r3, #21
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	d0fa      	beq.n	8007f50 <__ieee754_sqrt+0x134>
 8007f5a:	02d7      	lsls	r7, r2, #11
 8007f5c:	d50a      	bpl.n	8007f74 <__ieee754_sqrt+0x158>
 8007f5e:	f1c1 0420 	rsb	r4, r1, #32
 8007f62:	fa23 f404 	lsr.w	r4, r3, r4
 8007f66:	1e4d      	subs	r5, r1, #1
 8007f68:	408b      	lsls	r3, r1
 8007f6a:	4322      	orrs	r2, r4
 8007f6c:	1b41      	subs	r1, r0, r5
 8007f6e:	e788      	b.n	8007e82 <__ieee754_sqrt+0x66>
 8007f70:	4608      	mov	r0, r1
 8007f72:	e7f0      	b.n	8007f56 <__ieee754_sqrt+0x13a>
 8007f74:	0052      	lsls	r2, r2, #1
 8007f76:	3101      	adds	r1, #1
 8007f78:	e7ef      	b.n	8007f5a <__ieee754_sqrt+0x13e>
 8007f7a:	46e0      	mov	r8, ip
 8007f7c:	e7be      	b.n	8007efc <__ieee754_sqrt+0xe0>
 8007f7e:	bf00      	nop
 8007f80:	7ff00000 	.word	0x7ff00000

08007f84 <fabs>:
 8007f84:	ec51 0b10 	vmov	r0, r1, d0
 8007f88:	ee10 2a10 	vmov	r2, s0
 8007f8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f90:	ec43 2b10 	vmov	d0, r2, r3
 8007f94:	4770      	bx	lr

08007f96 <finite>:
 8007f96:	b082      	sub	sp, #8
 8007f98:	ed8d 0b00 	vstr	d0, [sp]
 8007f9c:	9801      	ldr	r0, [sp, #4]
 8007f9e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007fa2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007fa6:	0fc0      	lsrs	r0, r0, #31
 8007fa8:	b002      	add	sp, #8
 8007faa:	4770      	bx	lr
 8007fac:	0000      	movs	r0, r0
	...

08007fb0 <nan>:
 8007fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007fb8 <nan+0x8>
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	7ff80000 	.word	0x7ff80000

08007fc0 <rint>:
 8007fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fc2:	ec51 0b10 	vmov	r0, r1, d0
 8007fc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007fca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007fce:	2e13      	cmp	r6, #19
 8007fd0:	ee10 4a10 	vmov	r4, s0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007fda:	dc58      	bgt.n	800808e <rint+0xce>
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	da2b      	bge.n	8008038 <rint+0x78>
 8007fe0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007fe4:	4302      	orrs	r2, r0
 8007fe6:	d023      	beq.n	8008030 <rint+0x70>
 8007fe8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007fec:	4302      	orrs	r2, r0
 8007fee:	4254      	negs	r4, r2
 8007ff0:	4314      	orrs	r4, r2
 8007ff2:	0c4b      	lsrs	r3, r1, #17
 8007ff4:	0b24      	lsrs	r4, r4, #12
 8007ff6:	045b      	lsls	r3, r3, #17
 8007ff8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007ffc:	ea44 0103 	orr.w	r1, r4, r3
 8008000:	4b32      	ldr	r3, [pc, #200]	; (80080cc <rint+0x10c>)
 8008002:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008006:	e9d3 6700 	ldrd	r6, r7, [r3]
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4630      	mov	r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 f8ff 	bl	8000214 <__adddf3>
 8008016:	e9cd 0100 	strd	r0, r1, [sp]
 800801a:	463b      	mov	r3, r7
 800801c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008020:	4632      	mov	r2, r6
 8008022:	f7f8 f8f5 	bl	8000210 <__aeabi_dsub>
 8008026:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800802a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800802e:	4639      	mov	r1, r7
 8008030:	ec41 0b10 	vmov	d0, r0, r1
 8008034:	b003      	add	sp, #12
 8008036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008038:	4a25      	ldr	r2, [pc, #148]	; (80080d0 <rint+0x110>)
 800803a:	4132      	asrs	r2, r6
 800803c:	ea01 0702 	and.w	r7, r1, r2
 8008040:	4307      	orrs	r7, r0
 8008042:	d0f5      	beq.n	8008030 <rint+0x70>
 8008044:	0851      	lsrs	r1, r2, #1
 8008046:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800804a:	4314      	orrs	r4, r2
 800804c:	d00c      	beq.n	8008068 <rint+0xa8>
 800804e:	ea23 0201 	bic.w	r2, r3, r1
 8008052:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008056:	2e13      	cmp	r6, #19
 8008058:	fa43 f606 	asr.w	r6, r3, r6
 800805c:	bf0c      	ite	eq
 800805e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008062:	2400      	movne	r4, #0
 8008064:	ea42 0306 	orr.w	r3, r2, r6
 8008068:	4918      	ldr	r1, [pc, #96]	; (80080cc <rint+0x10c>)
 800806a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800806e:	4622      	mov	r2, r4
 8008070:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 f8cc 	bl	8000214 <__adddf3>
 800807c:	e9cd 0100 	strd	r0, r1, [sp]
 8008080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008084:	4622      	mov	r2, r4
 8008086:	462b      	mov	r3, r5
 8008088:	f7f8 f8c2 	bl	8000210 <__aeabi_dsub>
 800808c:	e7d0      	b.n	8008030 <rint+0x70>
 800808e:	2e33      	cmp	r6, #51	; 0x33
 8008090:	dd07      	ble.n	80080a2 <rint+0xe2>
 8008092:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008096:	d1cb      	bne.n	8008030 <rint+0x70>
 8008098:	ee10 2a10 	vmov	r2, s0
 800809c:	f7f8 f8ba 	bl	8000214 <__adddf3>
 80080a0:	e7c6      	b.n	8008030 <rint+0x70>
 80080a2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80080a6:	f04f 36ff 	mov.w	r6, #4294967295
 80080aa:	40d6      	lsrs	r6, r2
 80080ac:	4230      	tst	r0, r6
 80080ae:	d0bf      	beq.n	8008030 <rint+0x70>
 80080b0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80080b4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80080b8:	bf1f      	itttt	ne
 80080ba:	ea24 0101 	bicne.w	r1, r4, r1
 80080be:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80080c2:	fa44 f202 	asrne.w	r2, r4, r2
 80080c6:	ea41 0402 	orrne.w	r4, r1, r2
 80080ca:	e7cd      	b.n	8008068 <rint+0xa8>
 80080cc:	08008260 	.word	0x08008260
 80080d0:	000fffff 	.word	0x000fffff
 80080d4:	00000000 	.word	0x00000000

080080d8 <scalbn>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	ec55 4b10 	vmov	r4, r5, d0
 80080de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80080e2:	4606      	mov	r6, r0
 80080e4:	462b      	mov	r3, r5
 80080e6:	b99a      	cbnz	r2, 8008110 <scalbn+0x38>
 80080e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80080ec:	4323      	orrs	r3, r4
 80080ee:	d036      	beq.n	800815e <scalbn+0x86>
 80080f0:	4b39      	ldr	r3, [pc, #228]	; (80081d8 <scalbn+0x100>)
 80080f2:	4629      	mov	r1, r5
 80080f4:	ee10 0a10 	vmov	r0, s0
 80080f8:	2200      	movs	r2, #0
 80080fa:	f7f8 fa41 	bl	8000580 <__aeabi_dmul>
 80080fe:	4b37      	ldr	r3, [pc, #220]	; (80081dc <scalbn+0x104>)
 8008100:	429e      	cmp	r6, r3
 8008102:	4604      	mov	r4, r0
 8008104:	460d      	mov	r5, r1
 8008106:	da10      	bge.n	800812a <scalbn+0x52>
 8008108:	a32b      	add	r3, pc, #172	; (adr r3, 80081b8 <scalbn+0xe0>)
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	e03a      	b.n	8008186 <scalbn+0xae>
 8008110:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008114:	428a      	cmp	r2, r1
 8008116:	d10c      	bne.n	8008132 <scalbn+0x5a>
 8008118:	ee10 2a10 	vmov	r2, s0
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 f878 	bl	8000214 <__adddf3>
 8008124:	4604      	mov	r4, r0
 8008126:	460d      	mov	r5, r1
 8008128:	e019      	b.n	800815e <scalbn+0x86>
 800812a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800812e:	460b      	mov	r3, r1
 8008130:	3a36      	subs	r2, #54	; 0x36
 8008132:	4432      	add	r2, r6
 8008134:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008138:	428a      	cmp	r2, r1
 800813a:	dd08      	ble.n	800814e <scalbn+0x76>
 800813c:	2d00      	cmp	r5, #0
 800813e:	a120      	add	r1, pc, #128	; (adr r1, 80081c0 <scalbn+0xe8>)
 8008140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008144:	da1c      	bge.n	8008180 <scalbn+0xa8>
 8008146:	a120      	add	r1, pc, #128	; (adr r1, 80081c8 <scalbn+0xf0>)
 8008148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800814c:	e018      	b.n	8008180 <scalbn+0xa8>
 800814e:	2a00      	cmp	r2, #0
 8008150:	dd08      	ble.n	8008164 <scalbn+0x8c>
 8008152:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008156:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800815a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800815e:	ec45 4b10 	vmov	d0, r4, r5
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008168:	da19      	bge.n	800819e <scalbn+0xc6>
 800816a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800816e:	429e      	cmp	r6, r3
 8008170:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008174:	dd0a      	ble.n	800818c <scalbn+0xb4>
 8008176:	a112      	add	r1, pc, #72	; (adr r1, 80081c0 <scalbn+0xe8>)
 8008178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e2      	bne.n	8008146 <scalbn+0x6e>
 8008180:	a30f      	add	r3, pc, #60	; (adr r3, 80081c0 <scalbn+0xe8>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 f9fb 	bl	8000580 <__aeabi_dmul>
 800818a:	e7cb      	b.n	8008124 <scalbn+0x4c>
 800818c:	a10a      	add	r1, pc, #40	; (adr r1, 80081b8 <scalbn+0xe0>)
 800818e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0b8      	beq.n	8008108 <scalbn+0x30>
 8008196:	a10e      	add	r1, pc, #56	; (adr r1, 80081d0 <scalbn+0xf8>)
 8008198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800819c:	e7b4      	b.n	8008108 <scalbn+0x30>
 800819e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081a2:	3236      	adds	r2, #54	; 0x36
 80081a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80081ac:	4620      	mov	r0, r4
 80081ae:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <scalbn+0x108>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	e7e8      	b.n	8008186 <scalbn+0xae>
 80081b4:	f3af 8000 	nop.w
 80081b8:	c2f8f359 	.word	0xc2f8f359
 80081bc:	01a56e1f 	.word	0x01a56e1f
 80081c0:	8800759c 	.word	0x8800759c
 80081c4:	7e37e43c 	.word	0x7e37e43c
 80081c8:	8800759c 	.word	0x8800759c
 80081cc:	fe37e43c 	.word	0xfe37e43c
 80081d0:	c2f8f359 	.word	0xc2f8f359
 80081d4:	81a56e1f 	.word	0x81a56e1f
 80081d8:	43500000 	.word	0x43500000
 80081dc:	ffff3cb0 	.word	0xffff3cb0
 80081e0:	3c900000 	.word	0x3c900000

080081e4 <_init>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr

080081f0 <_fini>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr
